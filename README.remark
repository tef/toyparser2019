@metadata {
    title: "Remark, a restructured markup format.",
}

# Remark(able), a restructured markup format.

> I also dream about a modern replacement for LaTeX designed from the ground up
> to target multiple output formats (at least PDF, HTML, EPUB).
> &em{John MacFarlane, author of Pandoc, editor of CommonMark.}

## Why Remark?

Markdown is great for small comments, or blog posts. LaTeX is good for writing
a book on Mathematics. RST is good for technical documentation, and HTML is good
for webpages. So why Remark?

- CommonMark like shortcuts
- LaTeX like directives
- Standard ways to embed structured data, too.
- A consistent way to escape text
- Not just HTML output

Unlike LaTeX, unlike Markdown, and unlike RST, Remark is canonically implemented in terms
of a parsing evaluation grammar. It weighs in about half the size of CommonMark.

## Remark In A Nutshell

Remark has markdown-like rules for annotating text:

| Remark | Result | Raw HTML |
| :-- | :----: | -------: |
| ``\* \` \> \# \\`` | \* \` \> \# \\ | ``* ` &gt; # \`` |
| `*text*`, `**text**`, or `***text***` | *text* | `<strong>text</strong>` |
| `_text_`, `__text__`, or `___text___` | _text_ | `<em>text</em>` |
| `~text~`, `~~text~~`, or `~~~text~~~` | ~text~ | `<del>text</del>` | 
| &code{\`raw\`}, &code{\`\`raw\`\`}, or &code{\`\`\`raw\`\`\`} | `raw` |  `<code>raw</code>` |
| `:emoji_name:` | :emoji_name: | `<span class="emoji">emoji_name</span>` |

A remark document is a collection of blocks, which contain paragraphs. Inside a paragraph, multiple
spaces are treated as one, and a paragraph ends when a new block starts, or after two newlines.

| Remark | Result | Raw HTML |
| :----- | :----: | -------: |
| `text     text` | text text | `text text` |
| `text\     text` | text\nbsp;text | `text&nbsp;text` |
| \code{text\\\n;text} | text\br;text | `text<br/>text` |

Blocks are also quite similar to markdown. Headings, Lists, Code Blocks, Blockquotes, and Horizonal Rules
work almost exactly the same. Unlike markdown, a list cannot have more than one blank line between items. A blockquote must have an `>` on every line, even empty lines.

&table[column_align: ["left", "left", "left"]]:
  - - # Remark
    - # Result
    - # HTML

  - 
    - ```
      # A multi-line
      # Heading
      ```
    - 
      # A multi-line
      # Heading
      
    - `<h1>A multi-line Heading</h1>` 
  - 
    - `---`
    -  \hr 
    - `<hr/>`  
  -
    - ```
      - 1
      - 2
      ```
    -
      - 1
      - 2 
    -
      ```
      <ul>
      <li>1</li>
      <li>2</li>
      </ul>
      ```
  -
    - ```
      -- 1
      -- 2
      ```
    -
      -- 1
      -- 2 
    -
      ```
      <ul>
      <li>1</li>
      <li>2</li>
      </ul>
      ```
  - - ````
      ```
      1 + 2
      ```
      ````
    - ```
      1 + 2
      ```
    - ```
      <pre><code>1 + 2</code></pre>
      ```
  - - ```
      > A *bolded line
      > that continues* 

      > A second quote
      ```
    -
      > A *bolded line
      > that continues* 

      > A second quote
    -
      ```
      <blockquote>
      <p>A <strong>bolded line that continues</strong></p>
      </blockquote>
      <blockquote>
      <p>A Second Quote</p>
      </blockquote>
      ```
  - - ```
      | header 1 | header 2 |
      | :------: | :------: |
      | cell 1   | cell 2   |
      ```
    - 
      \table:
        - - # Header 1
          - # Header 2
        - - cell 1
          - cell 2
      
    - ```
      <table><thead><tr><td>header 1 ....
      .... <td>cell 2</td></tr></table> 
      ```
  - - ```
      | Prose blocks are special
      |   line breaks and whitespace preserved
      |      like foot prints in snow
      ```
    -
      | Prose blocks are special
      |   line breaks and whitespace preserved
      |      like foot prints in snow
    - ```
      <p style="white-space: pre-wrap">...
      ...</p>
      ```

Unlike markdown, and a little more like LaTeX, Remark has a standard form for directives, `\name[args]{text}`.

\table:
   - - # Shorthand
     - # Longhand
      
   - - `*text*`, `_text_`, `~text~`
     - `\strong{text}`, `\em{text}`, `\strike{text}`

   - - `# Heading`
     - `\heading[level: 1]: Heading`
   - - ````
        - 1
        - 2
       ````
     - ````
       \list: \item{1}\item{2}
       ````
   - - ````
       ```python
       1 + 2
       ```
       ````
     - ````
       \code[language: "python"]```
       1 + 2
       ```
       ````

Block directives and inline directives accept arguments, too.

````
# [arg: 1] A Header with args, including **strong**[args:2] inline args.

--- [another: 4]

\list[start: 1]:
  - [args: 4.5] A Numbered List
    > [args: 5] A block quote

    > A New Paragraph in the same blockquote

\table[args:3]:
| Heading |
| :-----: |
|  Cell   |

````

There's even a way to embed raw data inside a document, too:

```
@metadata {name: "tef", title: "Remark README"}
```

## An Overview of Remark:

A Remark document is, well, very like an HTML document. A document contains a list of blocks and paragraphs.
Blocks can contain other blocks and paragraphs. Paragraphs can contain inline directives, but not block directives.

- Blocks
	- Paragraphs
	- Headings
	- Lists
	- Blockquotes
	- Horizonal Rules
	- Code Blocks
	- Prose Blocks
	- Tables
	- Named Directives (`\name[...]: ...`)

- Inlines
	- Emphasis
	- Strong
	- Strikethrough
	- Code Span
	- Plain text
	- Named Inline Directive (`\name[...]{...}`)

## Documents

 - Can have a metadata block
 - Can be `\document{...}`


## Headings, Rules

- `#` marked headings: `# heading`, `## Subheading` and continue on till the end of the paragraph.

- `# [args] text` to pass arguments

- `---` for a horizonal rule, `--- [arguments]` with args, `----`,`-----`, at least 3 `-`s

## Code Blocks

Code blocks can be tagged with a language identifier, like in markdown:

````
```foo
example
```
````

Code blocks, headings cannot have leading whitespace. Lists, quotes, on the other hand,
can have up to 8 leading spaces.

``````
`````
you can use longer delimiters
`````
``````

## Blockquotes

For a blockquote, every line must start with `>`:
```
> A paragraph
> that spans lines
> 
> And a second paragraph


> A new block quote
```

## Lists

Lists can have at most one blank line between
items, i.e two empty lines between list items means two lists with one item each.

````
- A list with one element
that spans two lines


- A new List
  
  - A sublist
````

Finally, if there are no blank lines between items, or one item, and every item is a solitary paragraph,
then the list is considered 'tight':

```buu
- a
- b
- c


```
The above will render without `<p>..</p>` around the item contents.

## Tables

Markdown like tables exist, too:

```

| header | header |
| ------ | ------ |
| cell   | cell   |
```

No leading space. Header cells, row cells, can be empty. All but the last `|` are optional.

The header row has a division row, underneath, which *must* match the number of columns. 
Subsequent rows do not need to.

You can also specify tables another way:
````
- - # Heading
  - # Heading
- - Cell
  - Cell
- - Cell
  - Cell
````

Or the long way:
````
\begin::table
\row: \cell{1}\cell{2}
\end::table
````

## The LaTeX-like Directives

Unlike markdown, every piece of ascii-art has a more canonical longer form, called a directive.
A directive has a name, optional parameters, and an argument, usually text:

- `\heading[1]{text}`, or `\h[2]{text}`
- `\emphasis{text}`, `\strong{text}`
- `\hr`, `\br` 
- `\list[spacing: "loose"]{\item{text}}`, 

For example, `# My heading` can be expressed in several different ways:

- `\heading[level: 1]: My Heading`
- `\heading[level: 1]{My Heading}`,
- `\heading[level: 1]{{{My Heading}}}`

Like the block forms above, directives can take parameters, alongside text:

- `\foo[key: "value", "key": "value"]{text}`
- `\foo[bare_key, "value with no key"]{text}`
- `\foo[a,b,c]` is `\foo["a": null, "b":null, "c":null]`. 

Parameters are lists of (key,value) pairs, where one or both are given. non null keys must be unique. 
Keys can be quoted strings, or identifier like bare words. Values can take numerous JSON like forms:

- `0x123`, `0b111`, `0o123`, `123` 
- `123.456`, `123e45`,floats
- `"strings"`, `'or single quoted'`
- `[lists]`, `{key:value}`

Inline directives can take `\code{text}` or \code{\\code\`text\`} as arguments.

Block directives can take several forms:

A single paragraph:

````
\para: This will include all text on this line
and this line too. The space after `:` is not optional.
````

A code block (args must be `\code[args]`, not after opening delimiter):

````
\code```
a raw block
```
````

An indented set of blocks:

````
\section:
	It can start on the next line and continues
	until the first unindented block

````

A delimited set of blocks

````
\begin::section
Paragraph one

Paragraph two
\end
````

A list, a blockquote

````
\list:
- 1 
- 2
````

````
\quote:
> para
> continued

````

Or even tables:
````
\table:
| x | y |
| - | - |
| 1 | 2 |
````

Like `# headings`, and  \code{\`\`\`}, `\directive:` or \code{\\directive\`\`\`} must be 
at most 8 spaces indented from the beginning of the line.

Directives can also take a delimited block, with an optional name (an identifier):

```
\begin::blockquote
A para
\begin::blockquote named
Inner
\end::blockquote named

Another
\end::blockquote
```

## Arguments

Arguments can be passed to horizontal rules, lists, quotes, code blocks, code spans, and others too:

````
--- [a:1]

- [b:2] foo
> [c:3] foo

``` [d:4
foo
```

*one*[e:5] _two_[f:6] ~three~[g:7] `four`[g:8]

### [h:9] Foo

\begin::section [i:10]
\end::section
````

Whitespace before args is mandatory for blocks, but forbidden for inline forms.

## Paragraphs

- Words are seperated by whitespace. The number of spaces is not preserved.

- Two newlines end a paragraph. 

- Paragraphs also end if there's one of the following blocks on the next line:
	- Header
	- Horizonal Rule
	- Code Block
	- List, Quote
	- Table 

- `\` is the escape character, use `\\` for a literal `\`

- A `\` before spaces creates a non breaking space. 

- A `\` before newline creates a hardbreak

- Use `\*`, `\_`, `\#`, `\>`, \code{\`} to get those characters.

## Inlines

- *\*strong\**, _\_emphasis\__ ~\~strike through\~~, \code{\`code\`}, and `:emoji:`

- Doubling or tripling markers doesn't change their meaning:

  ```
  _emphasis_ __emphasis__ ___emphasis___ \emph{emphasis}
  *strong* **strong** ***strong*** \strong{strong}
  ~strike~ ~~strike~~ ~~~strike~~~ \strike{strike}
  `code` ``code`` ```code``` \code{code} \code`code`
  ```



## Data Nodes

If you want to skip the text processing and just dump data inside, you can. A heading
can be specified as a raw node, instead of using a directive, or `#` shorthand.

```
  @heading {
      level: 1,
      text: ["My Heading", ],
  }
```

Raw nodes can also be used to specify metadata, although `\metadata[author:"tef", date:"..."]` works just as well.

```
@metadata {
    author: "tef",
    date: "2019-09-30T12:00Z",
    example: \para{...},
}
```

Really they're so things can emit dom nodes in a simpler, canonical form, and you can still paste it midway into another
document. Yes, that's a terrible idea, but stopping it happening doesn't prevent the need.

The subset of Remark that's only `@foo{}` with no directives or markup or bare identifiers, is called RSON.

## An Example Document

Putting it all together, here's a larger example:

````````
@metadata {
    author: "tef",
    version: "123",
}

# A title

A paragraph is split
over  multiple lines

Although this one \
Contains a line break

- here is a list item with `raw text`

- here is the next list item
 
  ```` [language: "python"]
  and a code block inside
  ````


- this is a new list

  > this is a quoted paragraph inside the list
  > 
  > this is a new paragraph inside the blockquote

  > this is a new blockquote

This paragraph contains _emphasis_ and *strong text*. As well as ___emphasis over
multiple lines___ and `inline code`, too.

\list[start: 1]:
- a final list
- that starts at 1
  - with an unnumbered
  - sublist inside, that has text that
continues on the next line.

This is the last paragraph, which contains a non-breaking\ space, and :emoji:.
````````



## Writing CommonMark

- `#` Headers, over a single line
- `---` style hrs
- `-` lists
- 
