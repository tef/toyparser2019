# Remark(able), a restructured markup format.

> I also dream about a modern replacement for LaTeX designed from the ground up
to target multiple output formats (at least PDF, HTML, EPUB).
> \em{John MacFarlane, author of Pandoc, editor of CommonMark.}

## Remark In A Nutshell.

Commonmark like shorthand, LaTeX like directives, JSON like data.

| Remark | Result | Raw |
| ------ | ------ | --- |
| `*text*`, `**text**`, or `***text***` | *text* | `<strong>text</strong>` |
| `_text_`, `__text__`, or `___text___` | _text_ | `<em>text</em>` |
| `~text~`, `~~text~~`, or `~~~text~~~` | ~text~ | `<del>text</del>` | 
| \code{\`raw\`}, \code{\`\`raw\`\`}, or \code{\`\`\`raw\`\`\`} | `raw` |  `<code>raw</code>` |
| `# Heading` | Heading | `<h1>Heading</h1>` |
| `---` | \hr | `<hr/>` | 
| `text     text` | text text | `text text` |
| `text\     text` | text\nbsp;text | `text&nbsp;text` |
| \code{text\\\br;text} | text\br;text | `text<br/>text` |
| ``\* \` \> \# \\`` | \* \` \> \# \\ | ``* ` &gt; # \`` |
| `:emoji_name:` | :emoji_name: | `<span class="emoji">emoji_name</span>` |

There's Lists, Blockquotes, and Codeblocks, too:

```
- A List
  - A Sublist
- A second item

- A New List
```

```
> A Paragraph inside a blockquote
> A New Paragraph.
that continues onto the next line

> - A list inside the same blockquote

> A new paragraph in a new blockquote
```

````
```python
print("hello")
```
````

There's also directives, too:

Every shorthand has a longer `\name[args]{text}` equivilent. There's even a 
raw `@name {arg: ..., text: [ ... ]}` form too, but you probably don't care 
about it. 

````
\heading[level:1]: This is a header
that continues until a paragraph break

\list[start: 1]:
- A Numbered List with \code{inline code}.
````

Almost everything takes arguments, too:

```
# [arg: 1] A Header with args, including **strong**[args:2] inline args.
```

## Example

````
# A Heading

A paragraph with a non\ breaking space, some \em{inline} text,\
and a hard line break.

---

\list[start:1]:
  - A Numbered List
    > A block quote

    > A New Paragraph

---

```bash
echo "hello world
```

| Heading |
| :-----: |
|  Cell   |

````

## Overview of markup directives:

Every Remark document is a series of block structures, which may contain other blocks, or inline structures.

- Blocks
	- Paragraphs
	- Headings
	- Lists
	- Blockquotes
	- Horizonal Rules
	- Code Blocks
	- Tables
	- Raw Nodes
	- Directive (`\name[...]: ...`)

- Inlines
	- Emphasis
	- Strong
	- Strikethrough
	- Code Span
	- Plain text
	- Directive (`\name[...]{...}`)

## Paragraphs

- Words are seperated by whitespace. The number of spaces is not preserved.

- Two newlines end a paragraph. 

- Paragraphs also end if there's one of the following blocks on the next line:
	- Header
	- Horizonal Rule
	- Code Block
	- List, Quote
	- Table 

- `\` is the escape character, use `\\` for a literal `\`

- A `\` before spaces creates a non breaking space. 

- A `\` before newline creates a hardbreak

- Use `\*`, `\_`, `\#`, `\>`, \code{\`} to get those characters.

## Headings, Rules

- `#` marked headings: `# heading`, `## Subheading` and continue on till the end of the paragraph.

- `---` for a horizonal rule

## Inlines

- *\*strong\**, _\_emphasis\__ ~\~strike through\~~, \code{\`code\`}, and `:emoij:`

 Doubling or tripling markers doesn't change their meaning:

```
_emphasis_ __emphasis__ ___emphasis___
*strong* **strong** ***strong***
~strike~ ~~strike~~ ~~~strike~~~
`code` ``code`` ```code```
```

## Code Blocks

Code blocks can be tagged with a language identifier, like in markdown:

````
```foo
example
```
````

Code blocks, headings cannot have leading whitespace. Lists, quotes, on the other hand,
can have up to 8 leading spaces.

## Groups: Lists and Blockquotes

Lists and quotes can have at most one blank line between
items, i.e two empty lines between list items means two lists with one item each.

````
- A list with one element
that spans two lines


- A new List
  
  - A sublist
````

Unlike markdown, `>` works under the same rules as `-`. In other words, only the start of a paragraph gets a `>`, 
and anything indented underneath is included. Using a `>` starts a new paragraph.

```
> A block quote
that spans lines
> And a second paragraph


> A new block quote

> A second Paragraph
```

Finally, if there are no blank lines between items, or one item, and every item is a solitary paragraph,
then the list is considered 'tight':


```buu
- a
- b
- c


```
The above will render without `<p>..</p>` around the item contents.

## Tables

Markdown like tables exist, too:

```

| header | header |
| ------ | ------ |
| cell   | cell   |
```

No leading space. Header cells, row cells, can be empty. All but the last `|` are optional.

The header row has a division row, underneath, which *must* match the number of columns. 
Subsequent rows do not need to.


## The LaTeX-like Directives

Unlike markdown, every piece of ascii-art has a more canonical longer form, called a directive.
A directive has a name, optional parameters, and an argument, usually text:

- `\heading[1]{text}`, or `\h[2]{text}`
- `\emphasis{text}`, `\strong{text}`
- `\hr`, `\br` 
- `\list[spacing: "loose"]{\item{text}}`, 

For example, `# My heading` can be expressed in several different ways:

- `\heading[level: 1]: My Heading`
- `\heading[level: 1]{My Heading}`,
- `\heading[level: 1]{{{My Heading}}}`

Like the block forms above, directives can take parameters, alongside text:

- `\foo[key: "value", "key": "value"]{text}`
- `\foo[bare_key, "value with no key"]{text}`
- `\foo[a,b,c]` is `\foo["a": null, "b":null, "c":null]`. 

Parameters are lists of (key,value) pairs, where one or both are given. non null keys must be unique. 
Keys can be quoted strings, or identifier like bare words. Values can take numerous JSON like forms:

- `0x123`, `0b111`, `0o123`, `123` 
- `123.456`, `123e45`,floats
- `"strings"`, `'or single quoted'`
- `[lists]`, `{key:value}`

Finally, directives can take list, quote, or code blocks as arguments, or a paragraph:

````
\para: This will include all text on this line
and this line too.

\heading:
It can start on the next line and continues
until the end of the paragraph

You can use \code{text} or \code`raw text`, but text in \code{\`} is escaped. 

\code```
a raw block
```

\list:
- 1 
- 2

\quote:
> para

````

Like `# headings`, and  \code{\`\`\`}, `\directive:` or \code{\\directive\`\`\`} must be 
at the beginning of a line.

Directives can also take a delimited block, with an optional name:

```
\blockquote::begin
A para
\blockquote::begin named
Inner
\blockquote::end named

Another
\blockquote::end
```

## Arguments

Arguments can be passed to horizontal rules, lists, quotes, code blocks, code spans, and others too:

````
--- [a:1]

- [b:2] foo
> [c:3] foo

``` [d:4
foo
```

*one*[e:5] _two_[f:6] ~three~[g:7] `four`[g:8]

### [h:7] Foo
````

Whitespace before args is mandatory for blocks, but forbidden for inline forms.


## Raw Nodes

If you want to skip the text processing and just dump data inside, you can. A heading
can be specified as a raw node, instead of using a directive, or `#` shorthand.

```
  @heading {
      level: 1,
      text: ["My Heading", ],
  }
```

Raw nodes can also be used to specify metadata, although `\metadata[author:"tef", date:"..."]` works just as well.

```
@metadata {
    author: "tef",
    date: "2019-09-30T12:00Z",
    example: \para{...},
}
```

Really they're so things can emit dom nodes in a simpler, canonical form, and you can still paste it midway into another
document. Yes, that's a terrible idea, but stopping it happening doesn't prevent the need.

The subset of Remark that's only `@foo{}` with no directives or markup or bare identifiers, is called RSON.

## An Example Document

Putting it all together, here's a larger example:

````````
@metadata {
    author: "tef",
    version: "123",
}

# A title

A paragraph is split
over  multiple lines

Although this one \
Contains a line break

- here is a list item with `raw text`

- here is the next list item
 
  ```` [language: "python"]
  and a code block inside
  ````


- this is a new list

  > this is a quoted paragraph inside the list

  > this is a new paragraph inside the blockquote



  > this is a new blockquote

This paragraph contains _emphasis_ and *strong text*. As well as ___emphasis over
multiple lines___ and `inline code`, too.

\list[start: 1]:
- a final list
- that starts at 1
  - with an unnumbered
  - sublist inside, that has text that
continues on the next line.

This is the last paragraph, which contains a non-breaking\ space, and :emoji:.
````````



