import unicodedata, re

class Node:
    def __init__(self, name, start, end, start_column, end_column, children, value):
        self.name = name
        self.start = start
        self.end = end
        self.start_column = start_column
        self.end_column = end_column
        self.children = children if children is not None else ()
        self.value = value
    def __str__(self):
        return '{}[{}:{}]'.format(self.name, self.start, self.end)
    def build(self, buf, builder):
        children = [child.build(buf, builder) for child in self.children]
        if callable(builder): return builder(buf, self, children)
        if self.name == "value": return self.value
        return builder[self.name](buf, self, children)

regex_0 = re.compile(r'''[a-zA-Z](?:[0-9a-zA-Z_])*''')
regex_1 = re.compile(r'''(?:(?:,))?''')
regex_2 = re.compile(r'''(?:::)''')
regex_3 = re.compile(r'''(?:begin|end|raw)''')
regex_4 = re.compile(r'''(?:(?:\[)){3,}''')
regex_5 = re.compile(r'''(?:[\[])+''')
regex_6 = re.compile(r'''(?:\$|;)''')
regex_7 = re.compile(r'''(?:(?:\[))+''')
regex_8 = re.compile(r'''(?:(?:\-)){3,}''')
regex_9 = re.compile(r'''(?:(?:\#)){1,9}''')
regex_10 = re.compile(r'''(?:(?:`)){3,}''')
regex_11 = re.compile(r'''(?:[^ \n\t])+''')
regex_12 = re.compile(r'''(?:\-\-|\-|\*|\+)''')
regex_13 = re.compile(r'''[^\n]''')
regex_14 = re.compile(r'''(?:(?::))?''')
regex_15 = re.compile(r'''(?:(?:\-))+''')
regex_16 = re.compile(r'''[\*_!-/:-@\[-`\{-\~]''')
regex_17 = re.compile(r'''(?:\&|\\)''')
regex_18 = re.compile(r'''(?:(?:\#))?''')
regex_19 = re.compile(r'''(?:0x|x)''')
regex_20 = re.compile(r'''(?:[0-9])+''')
regex_21 = re.compile(r'''(?:;)''')
regex_22 = re.compile(r'''[^\t \n]''')
regex_23 = re.compile(r'''[^\t \n`_\*\~\\\}\]]''')
regex_24 = re.compile(r'''(?:(?:_))+''')
regex_25 = re.compile(r'''[_\*\~]''')
regex_26 = re.compile(r'''(?:(?:`))+''')
regex_27 = re.compile(r'''[^ \t\n`]''')
regex_28 = re.compile(r'''(?:[^ \t\n`])*''')
regex_29 = re.compile(r'''[^`]''')
regex_30 = re.compile(r'''(?:(?:`))*''')
regex_31 = re.compile(r'''[A-Za-z]''')
regex_32 = re.compile(r'''(?:[0-9A-Za-z_])*''')
regex_33 = re.compile(r'''[^\x00-\x1f\\"\ud800-\udfff]''')
regex_34 = re.compile(r'''[0-1]''')
regex_35 = re.compile(r'''[0-9a-fA-F]''')
regex_36 = re.compile(r'''(?:D|d)''')
regex_37 = re.compile(r'''[8-9A-F]''')
regex_38 = re.compile(r'''(?:\\)["\\/bfnrt'\n]''')
regex_39 = re.compile(r'''[^\x00-\x1f\\'\ud800-\udfff]''')
regex_40 = re.compile(r'''(?:(?:(?:[\-\+])?(?:0x)[0-9A-Fa-f](?:[0-9A-Fa-f_])*)|(?:(?:[\-\+])?(?:0o)[0-8](?:[0-8_])*)|(?:(?:[\-\+])?(?:0b)[0-1](?:[0-1_])*)|(?:(?:[\-\+])?(?:(?:(?:0))|(?:[1-9](?:[0-9])*))(?:(?:\.)(?:[0-9])*)?(?:(?:e|E)(?:(?:\+|\-)(?:[0-9])*)?)?))''')
regex_41 = re.compile(r'''(?:[^\n])*''')

class Parser:
    def __init__(self, tabstop=None, allow_mixed_indent=True):
         self.tabstop = tabstop or 8
         self.cache = None
         self.allow_mixed_indent = allow_mixed_indent

    def parse(self, buf, offset=0, end=None, err=None, builder=None):
        self.cache = dict()
        end = len(buf) if end is None else end
        start, eof = offset, end
        column, indent_column = 0, [0]
        prefix, children = [], []
        new_offset, column, partial_tab_offset, partial_tab_width = self.parse_remark_document(buf, start, end, offset, column, indent_column, prefix, children, 0, 0)
        if new_offset == end:
             if builder is None: return Node('remark_document', offset, new_offset, 0, column, children, None)
             return children[-1].build(buf, builder)
        # print('no', children, offset, new_offset, end)
        if err is not None: raise err(buf, new_offset, 'no')

    def parse_remark_document(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while count_0 < 1:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    if buf[offset_1:offset_1+1] == '\ufeff':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_block_element(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                            if offset_2 == -1: break



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_para(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                            if offset_2 == -1: break



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_1 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_1 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_1 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break
                            else:
                                offset_2 = -1
                                break

                            count_1 = 0
                            while True:
                                offset_3 = offset_2
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_2, offset_3)
                                    if column_3 != 0:
                                        offset_3 = -1
                                        break
                                    # print('start')
                                    for indent, dedent in prefix_0:
                                        # print(indent, dedent)
                                        _children, _prefix = [], []
                                        offset_4 = offset_3
                                        offset_4, column_3, partial_tab_offset_3, partial_tab_width_3 = indent(buf, buf_start, buf_eof, offset_4, column_3, indent_column_3, _prefix, _children, partial_tab_offset_3, partial_tab_width_3)
                                        if _prefix or _children:
                                           raise Exception('bar')
                                        if offset_4 == -1:
                                            offset_3 = -1
                                            break
                                        offset_3 = offset_4
                                        indent_column_3.append(column_3)
                                    if offset_3 == -1:
                                        break

                                    count_2 = 0
                                    while offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                    width = partial_tab_width_3
                                                else:
                                                    width  = (self.tabstop-((column_3)%self.tabstop));
                                                count_2 += width
                                                column_3 += width
                                                offset_3 += 1
                                            else:
                                                count_2 += 1
                                                column_3 += 1
                                                offset_3 += 1
                                        else:
                                            break

                                    if offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                            offset_3 +=2
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        elif codepoint in '\r\n':
                                            offset_3 +=1
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        else:
                                            offset_3 = -1
                                            break
                                    else:
                                        offset_3 = -1
                                        break

                                    #print('safe exit rep rule', offset_2, offset_3)
                                    break
                                #print('exit rep rule', offset_2, offset_3)
                                if offset_3 == -1:
                                    break
                                if offset_2 == offset_3: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_2 = offset_3
                                column_2 = column_3
                                indent_column_2 = indent_column_3
                                partial_tab_offset_2 = partial_tab_offset_3
                                partial_tab_width_2 = partial_tab_width_3
                                count_1 += 1
                            if offset_2 == -1:
                                break
                            value_1 = count_1

                            children_3 = []
                            value_2 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            value_2.name = 'remark_empty_line'
                            value_2.end = offset_2
                            value_2.end_column = column_2
                            value_2.value = None
                            children_2.append(value_2)



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            if offset_2 != buf_eof:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
                break
            if offset_0 == -1:
                break
            value_0 = count_0

            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    if offset_1 != buf_eof:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while True:
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True:
                            #print('entry rep rule', offset_1, offset_2)
                            if column_2 != 0:
                                offset_2 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_3 = offset_2
                                offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_3 == -1:
                                    offset_2 = -1
                                    break
                                offset_2 = offset_3
                                indent_column_2.append(column_2)
                            if offset_2 == -1:
                                break

                            while True: # start choice
                                offset_3 = offset_2
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_block_element(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_3, partial_tab_offset_3, partial_tab_width_3)
                                    if offset_3 == -1: break



                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_3 = offset_2
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_para(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_3, partial_tab_offset_3, partial_tab_width_3)
                                    if offset_3 == -1: break



                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_3 = offset_2
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    count_1 = 0
                                    while offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                    width = partial_tab_width_3
                                                else:
                                                    width  = (self.tabstop-((column_3)%self.tabstop));
                                                count_1 += width
                                                column_3 += width
                                                offset_3 += 1
                                            else:
                                                count_1 += 1
                                                column_3 += 1
                                                offset_3 += 1
                                        else:
                                            break

                                    if offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                            offset_3 +=2
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        elif codepoint in '\r\n':
                                            offset_3 +=1
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        else:
                                            offset_3 = -1
                                            break
                                    else:
                                        offset_3 = -1
                                        break

                                    count_1 = 0
                                    while True:
                                        offset_4 = offset_3
                                        column_4 = column_3
                                        indent_column_4 = list(indent_column_3)
                                        partial_tab_offset_4 = partial_tab_offset_3
                                        partial_tab_width_4 = partial_tab_width_3
                                        children_4 = [] if children_3 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_3, offset_4)
                                            if column_4 != 0:
                                                offset_4 = -1
                                                break
                                            # print('start')
                                            for indent, dedent in prefix_0:
                                                # print(indent, dedent)
                                                _children, _prefix = [], []
                                                offset_5 = offset_4
                                                offset_5, column_4, partial_tab_offset_4, partial_tab_width_4 = indent(buf, buf_start, buf_eof, offset_5, column_4, indent_column_4, _prefix, _children, partial_tab_offset_4, partial_tab_width_4)
                                                if _prefix or _children:
                                                   raise Exception('bar')
                                                if offset_5 == -1:
                                                    offset_4 = -1
                                                    break
                                                offset_4 = offset_5
                                                indent_column_4.append(column_4)
                                            if offset_4 == -1:
                                                break

                                            count_2 = 0
                                            while offset_4 < buf_eof:
                                                codepoint = buf[offset_4]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_4 == partial_tab_offset_4 and partial_tab_width_4 > 0:
                                                            width = partial_tab_width_4
                                                        else:
                                                            width  = (self.tabstop-((column_4)%self.tabstop));
                                                        count_2 += width
                                                        column_4 += width
                                                        offset_4 += 1
                                                    else:
                                                        count_2 += 1
                                                        column_4 += 1
                                                        offset_4 += 1
                                                else:
                                                    break

                                            if offset_4 < buf_eof:
                                                codepoint = buf[offset_4]
                                                if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                                    offset_4 +=2
                                                    column_4 = 0
                                                    indent_column_4[:] = (0, )
                                                elif codepoint in '\r\n':
                                                    offset_4 +=1
                                                    column_4 = 0
                                                    indent_column_4[:] = (0, )
                                                else:
                                                    offset_4 = -1
                                                    break
                                            else:
                                                offset_4 = -1
                                                break

                                            #print('safe exit rep rule', offset_3, offset_4)
                                            break
                                        #print('exit rep rule', offset_3, offset_4)
                                        if offset_4 == -1:
                                            break
                                        if offset_3 == offset_4: break
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        offset_3 = offset_4
                                        column_3 = column_4
                                        indent_column_3 = indent_column_4
                                        partial_tab_offset_3 = partial_tab_offset_4
                                        partial_tab_width_3 = partial_tab_width_4
                                        count_1 += 1
                                    if offset_3 == -1:
                                        break
                                    value_4 = count_1

                                    children_4 = []
                                    value_5 = Node(None, offset_3, offset_3, column_3, column_3, children_4, None)
                                    value_5.name = 'remark_empty_line'
                                    value_5.end = offset_3
                                    value_5.end_column = column_3
                                    value_5.value = None
                                    children_3.append(value_5)



                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_3 = offset_2
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    if offset_3 != buf_eof:
                                        offset_3 = -1
                                        break


                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = -1 # no more choices
                                break # end choice
                            if offset_2 == -1:
                                break

                            #print('safe exit rep rule', offset_1, offset_2)
                            break
                        #print('exit rep rule', offset_1, offset_2)
                        if offset_2 == -1:
                            break
                        if offset_1 == offset_2: break
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        offset_1 = offset_2
                        column_1 = column_2
                        indent_column_1 = indent_column_2
                        partial_tab_offset_1 = partial_tab_offset_2
                        partial_tab_width_1 = partial_tab_width_2
                        count_0 += 1
                    if offset_1 == -1:
                        break
                    value_3 = count_0

                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                            offset_1 +=2
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_1 +=1
                            column_1 = 0
                            indent_column_1[:] = (0, )
                            count_0 +=1
                        elif codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    if offset_1 != buf_eof:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_block_element(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_code_block(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_atx_heading(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_horizontal_rule(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_raw_block_directive(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_begin_end_directive(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_block_directive(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_block_definition(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_list_block(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_blockquote(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_table(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_prose_para(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_paragraph_breaks(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    if buf[offset_1:offset_1+1] == '@':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_horizontal_rule(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_atx_heading(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_code_block(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_list_block(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_blockquote(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_table(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_definition(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_linebreak(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    if buf[offset_1:offset_1+1] == '\\':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    children_2 = []
                    value_0 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_0.name = 'remark_hardbreak'
                    value_0.end = offset_1
                    value_0.end_column = column_1
                    value_0.value = None
                    children_1.append(value_0)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    children_2 = []
                    value_1 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_1.name = 'remark_softbreak'
                    value_1.end = offset_1
                    value_1.end_column = column_1
                    value_1.value = None
                    children_1.append(value_1)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            if column_0 != 0:
                offset_0 = -1
                break
            # print('start')
            for indent, dedent in prefix_0:
                # print(indent, dedent)
                _children, _prefix = [], []
                offset_1 = offset_0
                offset_1, column_0, partial_tab_offset_0, partial_tab_width_0 = indent(buf, buf_start, buf_eof, offset_1, column_0, indent_column_0, _prefix, _children, partial_tab_offset_0, partial_tab_width_0)
                if _prefix or _children:
                   raise Exception('bar')
                if offset_1 == -1:
                    if dedent is None:
                        offset_0 = -1
                        break
                    _children, _prefix = [], []
                    offset_1 = offset_0
                    offset_1, _column, _partial_tab_offset, _partial_tab_width = dedent(buf, buf_start, buf_eof, offset_1, column_0, list(indent_column_0), _prefix, _children, partial_tab_offset_0, partial_tab_width_0)
                    if offset_1 != -1:
                        offset_0 = -1
                        break
                    else:
                        offset_1 = offset_0
                offset_0 = offset_1
                indent_column_0.append(column_0)
            if offset_0 == -1:
                break

            while True: # start reject
                children_1 = []
                offset_1 = offset_0 + 0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_paragraph_breaks(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                if offset_1 == -1: break


                break
            if offset_1 != -1:
                offset_0 = -1
                break

            count_0 = 0
            while offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            while True: # start reject
                children_1 = []
                offset_1 = offset_0 + 0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                if offset_1 < buf_eof:
                    codepoint = buf[offset_1]
                    if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                        offset_1 +=2
                        column_1 = 0
                        indent_column_1[:] = (0, )
                    elif codepoint in '\r\n':
                        offset_1 +=1
                        column_1 = 0
                        indent_column_1[:] = (0, )
                    else:
                        offset_1 = -1
                        break
                else:
                    offset_1 = -1
                    break

                break
            if offset_1 != -1:
                offset_0 = -1
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inner_para(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                count_0 = 0
                while offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_0)%self.tabstop));
                            count_0 += width
                            column_0 += width
                            offset_0 += 1
                        else:
                            count_0 += 1
                            column_0 += 1
                            offset_0 += 1
                    else:
                        break

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_whitespace'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inline_element(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0)
            if offset_0 == -1: break


            count_0 = 0
            while True:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_linebreak(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                            if offset_2 == -1: break



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_3 = []
                            value_2 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            while True: # start capture
                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_1 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                break
                            if offset_2 == -1:
                                break
                            value_2.name = 'remark_whitespace'
                            value_2.end = offset_2
                            value_2.end_column = column_2
                            value_2.value = None
                            children_2.append(value_2)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_element(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break


                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if offset_0 == -1:
                break
            value_1 = count_0

            children_1 = []
            value_3 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                count_0 = 0
                while offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_0)%self.tabstop));
                            count_0 += width
                            column_0 += width
                            offset_0 += 1
                        else:
                            count_0 += 1
                            column_0 += 1
                            offset_0 += 1
                    else:
                        break

                break
            if offset_0 == -1:
                break
            value_3.name = 'remark_whitespace'
            value_3.end = offset_0
            value_3.end_column = column_0
            value_3.value = None
            children_0.append(value_3)

            count_0 = 0
            while count_0 < 1:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    if buf[offset_1:offset_1+1] == '\\':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    children_1.append(Node('value', offset_1, offset_1, column_1, column_1, (), '\\'))

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
                break
            if offset_0 == -1:
                break
            value_4 = count_0


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_para(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_para(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_paragraph'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            if offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                    offset_0 +=2
                    column_0 = 0
                    indent_column_0[:] = (0, )
                elif codepoint in '\r\n':
                    offset_0 +=1
                    column_0 = 0
                    indent_column_0[:] = (0, )
                else:
                    offset_0 = -1
                    break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_remark_identifier(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = None
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                _match = regex_0.match(buf, offset_0)
                if _match:
                    _end = _match.end()
                    column_0 += (_end - offset_0)
                    offset_0 = _end
                else:
                    offset_0 = -1
                    break

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_identifier'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_directive_args(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                    offset_0 +=2
                    column_0 = 0
                    indent_column_0[:] = (0, )
                elif codepoint in '\r\n':
                    offset_0 +=1
                    column_0 = 0
                    indent_column_0[:] = (0, )
                    count_0 +=1
                elif codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            count_0 = 0
            while count_0 < 1:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_arg(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break


                    count_1 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_1 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_1 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    count_1 = 0
                    while True:
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True:
                            #print('entry rep rule', offset_1, offset_2)
                            if buf[offset_2:offset_2+1] == ',':
                                offset_2 += 1
                                column_2 += 1
                            else:
                                offset_2 = -1
                                break

                            count_2 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                    count_2 +=1
                                elif codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_2 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_2 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break

                            offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_directive_arg(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                            if offset_2 == -1: break


                            count_2 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_2 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_2 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break

                            #print('safe exit rep rule', offset_1, offset_2)
                            break
                        #print('exit rep rule', offset_1, offset_2)
                        if offset_2 == -1:
                            break
                        if offset_1 == offset_2: break
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        offset_1 = offset_2
                        column_1 = column_2
                        indent_column_1 = indent_column_2
                        partial_tab_offset_1 = partial_tab_offset_2
                        partial_tab_width_1 = partial_tab_width_2
                        count_1 += 1
                    if offset_1 == -1:
                        break
                    value_1 = count_1

                    _match = regex_1.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    count_1 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                            offset_1 +=2
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_1 +=1
                            column_1 = 0
                            indent_column_1[:] = (0, )
                            count_1 +=1
                        elif codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_1 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_1 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
                break
            if offset_0 == -1:
                break
            value_0 = count_0


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_directive_arg(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                while True: # start choice
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_remark_identifier(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        count_0 = 0
                        while count_0 < 1:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_1 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                if buf[offset_2:offset_2+1] == ':':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_1 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_1 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_rson_value(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                if offset_2 == -1: break


                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_0 += 1
                            break
                        if offset_1 == -1:
                            break
                        value_1 = count_0


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_string(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if buf[offset_1:offset_1+1] == ':':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                                count_0 +=1
                            elif codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_value(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break



                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_value(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break



                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_0 = -1 # no more choices
                    break # end choice
                if offset_0 == -1:
                    break

                break
            if offset_0 == -1:
                break
            value_0.name = 'arg'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_begin_end_directive(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            if buf[offset_0:offset_0+1] == '@':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break

            if buf[offset_0:offset_0+7] == 'begin::':
                offset_0 += 7
                column_0 += 7
            else:
                offset_0 = -1
                break

            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                children_2 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    offset_1 = offset_0
                    while True: # start backref
                        offset_1, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_remark_identifier(buf, buf_start, buf_eof, offset_1, column_0, indent_column_0, prefix_0, children_2, partial_tab_offset_0, partial_tab_width_0)
                        if offset_1 == -1: break


                        break
                    if offset_1 == -1:
                        offset_0 = -1
                        break
                    value_2 = buf[offset_0:offset_1]
                    offset_0 = offset_1

                    break
                if offset_0 == -1:
                    break
                value_1.name = 'directive_name'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_1.append(value_1)

                value_3 = 'fake name'
                offset_1 = offset_0
                while True: # start backref
                    while True: # start choice
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            offset_3 = offset_2
                            while True: # start backref
                                _match = regex_0.match(buf, offset_3)
                                if _match:
                                    _end = _match.end()
                                    column_1 += (_end - offset_3)
                                    offset_3 = _end
                                else:
                                    offset_3 = -1
                                    break

                                break
                            if offset_3 == -1:
                                offset_2 = -1
                                break
                            value_4 = buf[offset_2:offset_3]
                            offset_2 = offset_3

                            value_3 = value_4

                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            children_3 = []
                            value_5 = Node(None, offset_2, offset_2, column_1, column_1, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while count_0 < 1:
                                    offset_3 = offset_2
                                    column_2 = column_1
                                    indent_column_2 = list(indent_column_1)
                                    partial_tab_offset_2 = partial_tab_offset_1
                                    partial_tab_width_2 = partial_tab_width_1
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        if buf[offset_3:offset_3+1] == '{':
                                            offset_3 += 1
                                            column_2 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_directive_args(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_3 == -1: break


                                        if buf[offset_3:offset_3+1] == '}':
                                            offset_3 += 1
                                            column_2 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    count_0 += 1
                                    break
                                if offset_2 == -1:
                                    break
                                value_6 = count_0

                                break
                            if offset_2 == -1:
                                break
                            value_5.name = 'directive_args'
                            value_5.end = offset_2
                            value_5.end_column = column_1
                            value_5.value = None
                            children_2.append(value_5)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            children_3 = []
                            value_7 = Node(None, offset_2, offset_2, column_1, column_1, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while count_0 < 1:
                                    offset_3 = offset_2
                                    column_2 = column_1
                                    indent_column_2 = list(indent_column_1)
                                    partial_tab_offset_2 = partial_tab_offset_1
                                    partial_tab_width_2 = partial_tab_width_1
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        if buf[offset_3:offset_3+1] == '{':
                                            offset_3 += 1
                                            column_2 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_directive_args(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_3 == -1: break


                                        if buf[offset_3:offset_3+1] == '}':
                                            offset_3 += 1
                                            column_2 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    count_0 += 1
                                    break
                                if offset_2 == -1:
                                    break
                                value_8 = count_0

                                break
                            if offset_2 == -1:
                                break
                            value_7.name = 'directive_args'
                            value_7.end = offset_2
                            value_7.end_column = column_1
                            value_7.value = None
                            children_2.append(value_7)

                            count_0 = 0
                            while count_0 < 1:
                                offset_3 = offset_2
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_2, offset_3)
                                    offset_4 = offset_3
                                    while True: # start backref
                                        _match = regex_0.match(buf, offset_4)
                                        if _match:
                                            _end = _match.end()
                                            column_2 += (_end - offset_4)
                                            offset_4 = _end
                                        else:
                                            offset_4 = -1
                                            break

                                        break
                                    if offset_4 == -1:
                                        offset_3 = -1
                                        break
                                    value_10 = buf[offset_3:offset_4]
                                    offset_3 = offset_4

                                    value_3 = value_10

                                    #print('safe exit rep rule', offset_2, offset_3)
                                    break
                                #print('exit rep rule', offset_2, offset_3)
                                if offset_3 == -1:
                                    break
                                if offset_2 == offset_3: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_2 = offset_3
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                                break
                            if offset_2 == -1:
                                break
                            value_9 = count_0


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                    width = partial_tab_width_0
                                else:
                                    width  = (self.tabstop-((column_0)%self.tabstop));
                                count_0 += width
                                column_0 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_0 += 1
                                offset_1 += 1
                        else:
                            break

                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                    width = partial_tab_width_0
                                else:
                                    width  = (self.tabstop-((column_0)%self.tabstop));
                                count_0 += width
                                column_0 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_0 += 1
                                offset_1 += 1
                        else:
                            break

                    if offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                            offset_1 +=2
                            column_0 = 0
                            indent_column_0[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_1 +=1
                            column_0 = 0
                            indent_column_0[:] = (0, )
                        else:
                            offset_1 = -1
                            break


                    children_2 = []
                    value_11 = Node(None, offset_1, offset_1, column_0, column_0, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while True:
                            offset_2 = offset_1
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if column_1 != 0:
                                    offset_2 = -1
                                    break
                                # print('start')
                                for indent, dedent in prefix_0:
                                    # print(indent, dedent)
                                    _children, _prefix = [], []
                                    offset_3 = offset_2
                                    offset_3, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_3, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                    if _prefix or _children:
                                       raise Exception('bar')
                                    if offset_3 == -1:
                                        offset_2 = -1
                                        break
                                    offset_2 = offset_3
                                    indent_column_1.append(column_1)
                                if offset_2 == -1:
                                    break

                                while True: # start reject
                                    children_4 = []
                                    offset_3 = offset_2 + 0
                                    column_2 = column_1
                                    indent_column_2 = list(indent_column_1)
                                    partial_tab_offset_2 = partial_tab_offset_1
                                    partial_tab_width_2 = partial_tab_width_1
                                    count_1 = 0
                                    while offset_3 < buf_eof and count_1 < 8:
                                        codepoint = buf[offset_3]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                if count_1 + width > 8:
                                                    new_width = 8 - count_1
                                                    count_1 += new_width
                                                    column_2 += new_width
                                                    partial_tab_offset_2 = offset_3
                                                    partial_tab_width_2 = width - new_width
                                                    break
                                                count_1 += width
                                                column_2 += width
                                                offset_3 += 1
                                            else:
                                                count_1 += 1
                                                column_2 += 1
                                                offset_3 += 1
                                        else:
                                            break

                                    if buf[offset_3:offset_3+1] == '@':
                                        offset_3 += 1
                                        column_2 += 1
                                    else:
                                        offset_3 = -1
                                        break

                                    if buf[offset_3:offset_3+3] == 'end':
                                        offset_3 += 3
                                        column_2 += 3
                                    else:
                                        offset_3 = -1
                                        break

                                    while True: # start choice
                                        offset_4 = offset_3
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True: # case
                                            _match = regex_2.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_3 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = offset_4
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_5 is not None and children_5 is not None:
                                                children_4.extend(children_5)
                                            break
                                        # end case
                                        offset_4 = offset_3
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True: # case
                                            count_1 = 0
                                            while offset_4 < buf_eof:
                                                codepoint = buf[offset_4]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        count_1 += width
                                                        column_3 += width
                                                        offset_4 += 1
                                                    else:
                                                        count_1 += 1
                                                        column_3 += 1
                                                        offset_4 += 1
                                                else:
                                                    break

                                            count_1 = 0
                                            while offset_4 < buf_eof:
                                                codepoint = buf[offset_4]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        count_1 += width
                                                        column_3 += width
                                                        offset_4 += 1
                                                    else:
                                                        count_1 += 1
                                                        column_3 += 1
                                                        offset_4 += 1
                                                else:
                                                    break

                                            if offset_4 < buf_eof:
                                                codepoint = buf[offset_4]
                                                if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                                    offset_4 +=2
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                elif codepoint in '\r\n':
                                                    offset_4 +=1
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                else:
                                                    offset_4 = -1
                                                    break



                                            break
                                        if offset_4 != -1:
                                            offset_3 = offset_4
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_5 is not None and children_5 is not None:
                                                children_4.extend(children_5)
                                            break
                                        # end case
                                        offset_3 = -1 # no more choices
                                        break # end choice
                                    if offset_3 == -1:
                                        break

                                    break
                                if offset_3 != -1:
                                    offset_2 = -1
                                    break

                                while True: # start choice
                                    offset_3 = offset_2
                                    column_2 = column_1
                                    indent_column_2 = list(indent_column_1)
                                    partial_tab_offset_2 = partial_tab_offset_1
                                    partial_tab_width_2 = partial_tab_width_1
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_block_element(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_3 == -1: break



                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_1 = column_2
                                        indent_column_1 = indent_column_2
                                        partial_tab_offset_1 = partial_tab_offset_2
                                        partial_tab_width_1 = partial_tab_width_2
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_2 = column_1
                                    indent_column_2 = list(indent_column_1)
                                    partial_tab_offset_2 = partial_tab_offset_1
                                    partial_tab_width_2 = partial_tab_width_1
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_para(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_3 == -1: break



                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_1 = column_2
                                        indent_column_1 = indent_column_2
                                        partial_tab_offset_1 = partial_tab_offset_2
                                        partial_tab_width_1 = partial_tab_width_2
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_2 = column_1
                                    indent_column_2 = list(indent_column_1)
                                    partial_tab_offset_2 = partial_tab_offset_1
                                    partial_tab_width_2 = partial_tab_width_1
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        count_1 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                        width = partial_tab_width_2
                                                    else:
                                                        width  = (self.tabstop-((column_2)%self.tabstop));
                                                    count_1 += width
                                                    column_2 += width
                                                    offset_3 += 1
                                                else:
                                                    count_1 += 1
                                                    column_2 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        if offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                offset_3 +=2
                                                column_2 = 0
                                                indent_column_2[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_3 +=1
                                                column_2 = 0
                                                indent_column_2[:] = (0, )
                                            else:
                                                offset_3 = -1
                                                break
                                        else:
                                            offset_3 = -1
                                            break

                                        count_1 = 0
                                        while True:
                                            offset_4 = offset_3
                                            column_3 = column_2
                                            indent_column_3 = list(indent_column_2)
                                            partial_tab_offset_3 = partial_tab_offset_2
                                            partial_tab_width_3 = partial_tab_width_2
                                            children_5 = [] if children_4 is not None else None
                                            while True:
                                                #print('entry rep rule', offset_3, offset_4)
                                                if column_3 != 0:
                                                    offset_4 = -1
                                                    break
                                                # print('start')
                                                for indent, dedent in prefix_0:
                                                    # print(indent, dedent)
                                                    _children, _prefix = [], []
                                                    offset_5 = offset_4
                                                    offset_5, column_3, partial_tab_offset_3, partial_tab_width_3 = indent(buf, buf_start, buf_eof, offset_5, column_3, indent_column_3, _prefix, _children, partial_tab_offset_3, partial_tab_width_3)
                                                    if _prefix or _children:
                                                       raise Exception('bar')
                                                    if offset_5 == -1:
                                                        offset_4 = -1
                                                        break
                                                    offset_4 = offset_5
                                                    indent_column_3.append(column_3)
                                                if offset_4 == -1:
                                                    break

                                                count_2 = 0
                                                while offset_4 < buf_eof:
                                                    codepoint = buf[offset_4]
                                                    if codepoint in ' \t':
                                                        if codepoint == '\t':
                                                            if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                                width = partial_tab_width_3
                                                            else:
                                                                width  = (self.tabstop-((column_3)%self.tabstop));
                                                            count_2 += width
                                                            column_3 += width
                                                            offset_4 += 1
                                                        else:
                                                            count_2 += 1
                                                            column_3 += 1
                                                            offset_4 += 1
                                                    else:
                                                        break

                                                if offset_4 < buf_eof:
                                                    codepoint = buf[offset_4]
                                                    if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                                        offset_4 +=2
                                                        column_3 = 0
                                                        indent_column_3[:] = (0, )
                                                    elif codepoint in '\r\n':
                                                        offset_4 +=1
                                                        column_3 = 0
                                                        indent_column_3[:] = (0, )
                                                    else:
                                                        offset_4 = -1
                                                        break
                                                else:
                                                    offset_4 = -1
                                                    break

                                                #print('safe exit rep rule', offset_3, offset_4)
                                                break
                                            #print('exit rep rule', offset_3, offset_4)
                                            if offset_4 == -1:
                                                break
                                            if offset_3 == offset_4: break
                                            if children_5 is not None and children_5 is not None:
                                                children_4.extend(children_5)
                                            offset_3 = offset_4
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            count_1 += 1
                                        if offset_3 == -1:
                                            break
                                        value_13 = count_1

                                        children_5 = []
                                        value_14 = Node(None, offset_3, offset_3, column_2, column_2, children_5, None)
                                        value_14.name = 'remark_empty_line'
                                        value_14.end = offset_3
                                        value_14.end_column = column_2
                                        value_14.value = None
                                        children_4.append(value_14)



                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_1 = column_2
                                        indent_column_1 = indent_column_2
                                        partial_tab_offset_1 = partial_tab_offset_2
                                        partial_tab_width_1 = partial_tab_width_2
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_2 = -1 # no more choices
                                    break # end choice
                                if offset_2 == -1:
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                        if offset_1 == -1:
                            break
                        value_12 = count_0

                        break
                    if offset_1 == -1:
                        break
                    value_11.name = 'directive_block'
                    value_11.end = offset_1
                    value_11.end_column = column_0
                    value_11.value = None
                    children_1.append(value_11)

                    while True: # start choice
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            while True: # start lookahed
                                children_3 = []
                                offset_3 = offset_2 + 0
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                count_0 = 0
                                while offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                        offset_3 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_3 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_0 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_0 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_0 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break

                                if offset_3 != buf_eof:
                                    offset_3 = -1
                                    break

                                break
                            if offset_3 == -1:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            while True: # start lookahed
                                children_3 = []
                                offset_3 = offset_2 + 0
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                if column_2 != 0:
                                    offset_3 = -1
                                    break
                                # print('start')
                                for indent, dedent in prefix_0:
                                    # print(indent, dedent)
                                    _children, _prefix = [], []
                                    offset_4 = offset_3
                                    offset_4, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_4, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                    if _prefix or _children:
                                       raise Exception('bar')
                                    if offset_4 == -1:
                                        offset_3 = -1
                                        break
                                    offset_3 = offset_4
                                    indent_column_2.append(column_2)
                                if offset_3 == -1:
                                    break

                                count_0 = 0
                                while offset_3 < buf_eof and count_0 < 8:
                                    codepoint = buf[offset_3]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            if count_0 + width > 8:
                                                new_width = 8 - count_0
                                                count_0 += new_width
                                                column_2 += new_width
                                                partial_tab_offset_2 = offset_3
                                                partial_tab_width_2 = width - new_width
                                                break
                                            count_0 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_0 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break

                                if buf[offset_3:offset_3+1] == '@':
                                    offset_3 += 1
                                    column_2 += 1
                                else:
                                    offset_3 = -1
                                    break

                                if buf[offset_3:offset_3+3] == 'end':
                                    offset_3 += 3
                                    column_2 += 3
                                else:
                                    offset_3 = -1
                                    break

                                if buf[offset_3:offset_3+2] == '::':
                                    offset_3 += 2
                                    column_2 += 2
                                else:
                                    offset_3 = -1
                                    break

                                while True: # start reject
                                    children_4 = []
                                    offset_4 = offset_3 + 0
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    if buf[offset_4:offset_4+len(value_2)] == value_2:
                                        offset_4 += len(value_2)
                                        column_3 += len(value_2)
                                    else:
                                        offset_4 = -1
                                        break

                                    break
                                if offset_4 != -1:
                                    offset_3 = -1
                                    break

                                _match = regex_0.match(buf, offset_3)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_3)
                                    offset_3 = _end
                                else:
                                    offset_3 = -1
                                    break

                                count_0 = 0
                                while count_0 < 1:
                                    offset_4 = offset_3
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_3, offset_4)
                                        count_1 = 0
                                        while offset_4 < buf_eof:
                                            codepoint = buf[offset_4]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_1 += width
                                                    column_3 += width
                                                    offset_4 += 1
                                                else:
                                                    count_1 += 1
                                                    column_3 += 1
                                                    offset_4 += 1
                                            else:
                                                break

                                        if buf[offset_4:offset_4+len(value_3)] == value_3:
                                            offset_4 += len(value_3)
                                            column_3 += len(value_3)
                                        else:
                                            offset_4 = -1
                                            break

                                        #print('safe exit rep rule', offset_3, offset_4)
                                        break
                                    #print('exit rep rule', offset_3, offset_4)
                                    if offset_4 == -1:
                                        break
                                    if offset_3 == offset_4: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_3 = offset_4
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_0 += 1
                                    break
                                if offset_3 == -1:
                                    break
                                value_15 = count_0

                                count_0 = 0
                                while offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_0 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_0 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break

                                if offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                        offset_3 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_3 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    else:
                                        offset_3 = -1
                                        break


                                break
                            if offset_3 == -1:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            while True: # start lookahed
                                children_3 = []
                                offset_3 = offset_2 + 0
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                if column_2 != 0:
                                    offset_3 = -1
                                    break
                                # print('start')
                                for indent, dedent in prefix_0:
                                    # print(indent, dedent)
                                    _children, _prefix = [], []
                                    offset_4 = offset_3
                                    offset_4, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_4, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                    if _prefix or _children:
                                       raise Exception('bar')
                                    if offset_4 == -1:
                                        offset_3 = -1
                                        break
                                    offset_3 = offset_4
                                    indent_column_2.append(column_2)
                                if offset_3 == -1:
                                    break

                                count_0 = 0
                                while offset_3 < buf_eof and count_0 < 8:
                                    codepoint = buf[offset_3]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            if count_0 + width > 8:
                                                new_width = 8 - count_0
                                                count_0 += new_width
                                                column_2 += new_width
                                                partial_tab_offset_2 = offset_3
                                                partial_tab_width_2 = width - new_width
                                                break
                                            count_0 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_0 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break

                                if buf[offset_3:offset_3+1] == '@':
                                    offset_3 += 1
                                    column_2 += 1
                                else:
                                    offset_3 = -1
                                    break

                                if buf[offset_3:offset_3+3] == 'end':
                                    offset_3 += 3
                                    column_2 += 3
                                else:
                                    offset_3 = -1
                                    break

                                if buf[offset_3:offset_3+2] == '::':
                                    offset_3 += 2
                                    column_2 += 2
                                else:
                                    offset_3 = -1
                                    break

                                if buf[offset_3:offset_3+len(value_2)] == value_2:
                                    offset_3 += len(value_2)
                                    column_2 += len(value_2)
                                else:
                                    offset_3 = -1
                                    break

                                count_0 = 0
                                while offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_0 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_0 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break

                                while True: # start reject
                                    children_4 = []
                                    offset_4 = offset_3 + 0
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    if buf[offset_4:offset_4+len(value_3)] == value_3:
                                        offset_4 += len(value_3)
                                        column_3 += len(value_3)
                                    else:
                                        offset_4 = -1
                                        break

                                    break
                                if offset_4 != -1:
                                    offset_3 = -1
                                    break

                                _match = regex_0.match(buf, offset_3)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_3)
                                    offset_3 = _end
                                else:
                                    offset_3 = -1
                                    break

                                count_0 = 0
                                while offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_0 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_0 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break

                                if offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                        offset_3 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_3 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    else:
                                        offset_3 = -1
                                        break


                                break
                            if offset_3 == -1:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            if column_1 != 0:
                                offset_2 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_3 = offset_2
                                offset_3, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_3, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_3 == -1:
                                    offset_2 = -1
                                    break
                                offset_2 = offset_3
                                indent_column_1.append(column_1)
                            if offset_2 == -1:
                                break

                            count_0 = 0
                            while offset_2 < buf_eof and count_0 < 8:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        if count_0 + width > 8:
                                            new_width = 8 - count_0
                                            count_0 += new_width
                                            column_1 += new_width
                                            partial_tab_offset_1 = offset_2
                                            partial_tab_width_1 = width - new_width
                                            break
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if buf[offset_2:offset_2+1] == '@':
                                offset_2 += 1
                                column_1 += 1
                            else:
                                offset_2 = -1
                                break

                            if buf[offset_2:offset_2+3] == 'end':
                                offset_2 += 3
                                column_1 += 3
                            else:
                                offset_2 = -1
                                break

                            count_0 = 0
                            while count_0 < 1:
                                offset_3 = offset_2
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_2, offset_3)
                                    if buf[offset_3:offset_3+2] == '::':
                                        offset_3 += 2
                                        column_2 += 2
                                    else:
                                        offset_3 = -1
                                        break

                                    if buf[offset_3:offset_3+len(value_2)] == value_2:
                                        offset_3 += len(value_2)
                                        column_2 += len(value_2)
                                    else:
                                        offset_3 = -1
                                        break

                                    count_1 = 0
                                    while count_1 < 1:
                                        offset_4 = offset_3
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_4 = [] if children_3 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_3, offset_4)
                                            count_2 = 0
                                            while offset_4 < buf_eof:
                                                codepoint = buf[offset_4]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        count_2 += width
                                                        column_3 += width
                                                        offset_4 += 1
                                                    else:
                                                        count_2 += 1
                                                        column_3 += 1
                                                        offset_4 += 1
                                                else:
                                                    break

                                            if buf[offset_4:offset_4+len(value_3)] == value_3:
                                                offset_4 += len(value_3)
                                                column_3 += len(value_3)
                                            else:
                                                offset_4 = -1
                                                break

                                            #print('safe exit rep rule', offset_3, offset_4)
                                            break
                                        #print('exit rep rule', offset_3, offset_4)
                                        if offset_4 == -1:
                                            break
                                        if offset_3 == offset_4: break
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        offset_3 = offset_4
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        count_1 += 1
                                        break
                                    if offset_3 == -1:
                                        break
                                    value_17 = count_1

                                    #print('safe exit rep rule', offset_2, offset_3)
                                    break
                                #print('exit rep rule', offset_2, offset_3)
                                if offset_3 == -1:
                                    break
                                if offset_2 == offset_3: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_2 = offset_3
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                                break
                            if offset_2 == -1:
                                break
                            value_16 = count_0

                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    break
                if offset_1 == -1:
                    offset_0 = -1
                    break
                offset_0 = offset_1

                break
            if offset_0 == -1:
                break
            value_0.name = 'block_directive'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_block_directive(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_1 = offset_0
            column_1 = column_0
            while True: # start count
                count_0 = 0
                while offset_1 < buf_eof and count_0 < 8:
                    codepoint = buf[offset_1]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_1 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_1)%self.tabstop));
                            if count_0 + width > 8:
                                new_width = 8 - count_0
                                count_0 += new_width
                                column_1 += new_width
                                partial_tab_offset_0 = offset_1
                                partial_tab_width_0 = width - new_width
                                break
                            count_0 += width
                            column_1 += width
                            offset_1 += 1
                        else:
                            count_0 += 1
                            column_1 += 1
                            offset_1 += 1
                    else:
                        break

                break
            if offset_1 == -1:
                offset_0 = -1; break
            value_0 = column_1 - column_0
            offset_0 = offset_1
            column_0 = column_1

            count_0 = column_0 - indent_column_0[len(indent_column_0)-1]
            # print(count_0, 'indent')
            def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                saw_tab, saw_not_tab = False, False
                start_column, start_offset = column, offset
                if count < 0: offset = -1
                while count > 0 and offset < buf_eof:
                    codepoint = buf[offset];
                    if codepoint in ' \t':
                        if not allow_mixed_indent:
                            if codepoint == '\t': saw_tab = True
                            else: saw_not_tab = True
                            if saw_tab and saw_not_tab:
                                 offset = -1; break
                        if codepoint != '\t':
                            column += 1
                            offset += 1
                            count -=1
                        else:
                            if offset == partial_tab_offset and partial_tab_width > 0:
                                width = partial_tab_width
                            else:
                                width  = (self.tabstop-((column)%self.tabstop));
                            if width <= count:
                                column += width
                                offset += 1
                                count -= width
                            else:
                                partial_tab_offset = offset
                                partial_tab_width = width-count
                                column += count
                                count -= width
                                break
                    elif codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        break
                    elif codepoint in '\r\n':
                        break
                    else:
                        offset = -1
                        break
                return offset, column, partial_tab_offset, partial_tab_width
            prefix_0.append((_indent, None))
            indent_column_0.append(column_0)
            while True:
                if buf[offset_0:offset_0+1] == '@':
                    offset_0 += 1
                    column_0 += 1
                else:
                    offset_0 = -1
                    break

                while True: # start reject
                    children_1 = []
                    offset_1 = offset_0 + 0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    _match = regex_3.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    break
                if offset_1 != -1:
                    offset_0 = -1
                    break

                children_1 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
                while True: # start capture
                    children_2 = []
                    value_2 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                    while True: # start capture
                        offset_1 = offset_0
                        while True: # start backref
                            _match = regex_0.match(buf, offset_1)
                            if _match:
                                _end = _match.end()
                                column_0 += (_end - offset_1)
                                offset_1 = _end
                            else:
                                offset_1 = -1
                                break

                            break
                        if offset_1 == -1:
                            offset_0 = -1
                            break
                        value_3 = buf[offset_0:offset_1]
                        offset_0 = offset_1

                        break
                    if offset_0 == -1:
                        break
                    value_2.name = 'directive_name'
                    value_2.end = offset_0
                    value_2.end_column = column_0
                    value_2.value = None
                    children_1.append(value_2)

                    children_2 = []
                    value_4 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while count_0 < 1:
                            offset_1 = offset_0
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_0, offset_1)
                                count_1 = 0
                                while offset_1 < buf_eof:
                                    codepoint = buf[offset_1]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_1 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_1 += 1
                                    else:
                                        break

                                if buf[offset_1:offset_1+1] == '{':
                                    offset_1 += 1
                                    column_1 += 1
                                else:
                                    offset_1 = -1
                                    break

                                offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                                if offset_1 == -1: break


                                if buf[offset_1:offset_1+1] == '}':
                                    offset_1 += 1
                                    column_1 += 1
                                else:
                                    offset_1 = -1
                                    break

                                #print('safe exit rep rule', offset_0, offset_1)
                                break
                            #print('exit rep rule', offset_0, offset_1)
                            if offset_1 == -1:
                                break
                            if offset_0 == offset_1: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                            break
                        if offset_0 == -1:
                            break
                        value_5 = count_0

                        break
                    if offset_0 == -1:
                        break
                    value_4.name = 'directive_args'
                    value_4.end = offset_0
                    value_4.end_column = column_0
                    value_4.value = None
                    children_1.append(value_4)

                    while True: # start choice
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            if buf[offset_1:offset_1+1] == ';':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            children_2.append(Node('value', offset_1, offset_1, column_1, column_1, (), None))

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break
                            else:
                                offset_1 = -1
                                break


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_code_block(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break



                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_1 < buf_eof and count_0 < 1:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        if count_0 + width > 1:
                                            new_width = 1 - count_0
                                            count_0 += new_width
                                            column_1 += new_width
                                            partial_tab_offset_1 = offset_1
                                            partial_tab_width_1 = width - new_width
                                            break
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            offset_2 = offset_1
                            column_2 = column_1
                            while True: # start count
                                _match = regex_4.match(buf, offset_2)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_2)
                                    offset_2 = _end
                                else:
                                    offset_2 = -1
                                    break

                                break
                            if offset_2 == -1:
                                offset_1 = -1; break
                            value_6 = column_2 - column_1
                            offset_1 = offset_2
                            column_1 = column_2

                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break


                            children_3 = []
                            value_7 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while True:
                                    offset_2 = offset_1
                                    column_2 = column_1
                                    indent_column_2 = list(indent_column_1)
                                    partial_tab_offset_2 = partial_tab_offset_1
                                    partial_tab_width_2 = partial_tab_width_1
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_1, offset_2)
                                        if column_2 != 0:
                                            offset_2 = -1
                                            break
                                        # print('start')
                                        for indent, dedent in prefix_0:
                                            # print(indent, dedent)
                                            _children, _prefix = [], []
                                            offset_3 = offset_2
                                            offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                            if _prefix or _children:
                                               raise Exception('bar')
                                            if offset_3 == -1:
                                                offset_2 = -1
                                                break
                                            offset_2 = offset_3
                                            indent_column_2.append(column_2)
                                        if offset_2 == -1:
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_3 = offset_2 + 0
                                            column_3 = column_2
                                            indent_column_3 = list(indent_column_2)
                                            partial_tab_offset_3 = partial_tab_offset_2
                                            partial_tab_width_3 = partial_tab_width_2
                                            count_1 = 0
                                            while offset_3 < buf_eof and count_1 < 8:
                                                codepoint = buf[offset_3]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        if count_1 + width > 8:
                                                            new_width = 8 - count_1
                                                            count_1 += new_width
                                                            column_3 += new_width
                                                            partial_tab_offset_3 = offset_3
                                                            partial_tab_width_3 = width - new_width
                                                            break
                                                        count_1 += width
                                                        column_3 += width
                                                        offset_3 += 1
                                                    else:
                                                        count_1 += 1
                                                        column_3 += 1
                                                        offset_3 += 1
                                                else:
                                                    break

                                            count_1 = 0
                                            while count_1 < value_6:
                                                offset_4 = offset_3
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                children_6 = [] if children_5 is not None else None
                                                while True:
                                                    #print('entry rep rule', offset_3, offset_4)
                                                    if buf[offset_4:offset_4+1] == ']':
                                                        offset_4 += 1
                                                        column_4 += 1
                                                    else:
                                                        offset_4 = -1
                                                        break

                                                    #print('safe exit rep rule', offset_3, offset_4)
                                                    break
                                                #print('exit rep rule', offset_3, offset_4)
                                                if offset_4 == -1:
                                                    break
                                                if offset_3 == offset_4: break
                                                if children_6 is not None and children_6 is not None:
                                                    children_5.extend(children_6)
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                count_1 += 1
                                            if count_1 < value_6:
                                            #    print('min exit', offset_3)
                                                offset_3 = -1
                                                break
                                            if offset_3 == -1:
                                                break
                                            value_9 = count_1

                                            count_1 = 0
                                            while offset_3 < buf_eof:
                                                codepoint = buf[offset_3]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        count_1 += width
                                                        column_3 += width
                                                        offset_3 += 1
                                                    else:
                                                        count_1 += 1
                                                        column_3 += 1
                                                        offset_3 += 1
                                                else:
                                                    break

                                            if offset_3 < buf_eof:
                                                codepoint = buf[offset_3]
                                                if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                    offset_3 +=2
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                elif codepoint in '\r\n':
                                                    offset_3 +=1
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                else:
                                                    offset_3 = -1
                                                    break


                                            break
                                        if offset_3 != -1:
                                            offset_2 = -1
                                            break

                                        while True: # start choice
                                            offset_3 = offset_2
                                            column_3 = column_2
                                            indent_column_3 = list(indent_column_2)
                                            partial_tab_offset_3 = partial_tab_offset_2
                                            partial_tab_width_3 = partial_tab_width_2
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_block_element(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                                if offset_3 == -1: break



                                                break
                                            if offset_3 != -1:
                                                offset_2 = offset_3
                                                column_2 = column_3
                                                indent_column_2 = indent_column_3
                                                partial_tab_offset_2 = partial_tab_offset_3
                                                partial_tab_width_2 = partial_tab_width_3
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_3 = offset_2
                                            column_3 = column_2
                                            indent_column_3 = list(indent_column_2)
                                            partial_tab_offset_3 = partial_tab_offset_2
                                            partial_tab_width_3 = partial_tab_width_2
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_para(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                                if offset_3 == -1: break



                                                break
                                            if offset_3 != -1:
                                                offset_2 = offset_3
                                                column_2 = column_3
                                                indent_column_2 = indent_column_3
                                                partial_tab_offset_2 = partial_tab_offset_3
                                                partial_tab_width_2 = partial_tab_width_3
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_3 = offset_2
                                            column_3 = column_2
                                            indent_column_3 = list(indent_column_2)
                                            partial_tab_offset_3 = partial_tab_offset_2
                                            partial_tab_width_3 = partial_tab_width_2
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                count_1 = 0
                                                while offset_3 < buf_eof:
                                                    codepoint = buf[offset_3]
                                                    if codepoint in ' \t':
                                                        if codepoint == '\t':
                                                            if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                                width = partial_tab_width_3
                                                            else:
                                                                width  = (self.tabstop-((column_3)%self.tabstop));
                                                            count_1 += width
                                                            column_3 += width
                                                            offset_3 += 1
                                                        else:
                                                            count_1 += 1
                                                            column_3 += 1
                                                            offset_3 += 1
                                                    else:
                                                        break

                                                if offset_3 < buf_eof:
                                                    codepoint = buf[offset_3]
                                                    if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                        offset_3 +=2
                                                        column_3 = 0
                                                        indent_column_3[:] = (0, )
                                                    elif codepoint in '\r\n':
                                                        offset_3 +=1
                                                        column_3 = 0
                                                        indent_column_3[:] = (0, )
                                                    else:
                                                        offset_3 = -1
                                                        break
                                                else:
                                                    offset_3 = -1
                                                    break

                                                count_1 = 0
                                                while True:
                                                    offset_4 = offset_3
                                                    column_4 = column_3
                                                    indent_column_4 = list(indent_column_3)
                                                    partial_tab_offset_4 = partial_tab_offset_3
                                                    partial_tab_width_4 = partial_tab_width_3
                                                    children_6 = [] if children_5 is not None else None
                                                    while True:
                                                        #print('entry rep rule', offset_3, offset_4)
                                                        if column_4 != 0:
                                                            offset_4 = -1
                                                            break
                                                        # print('start')
                                                        for indent, dedent in prefix_0:
                                                            # print(indent, dedent)
                                                            _children, _prefix = [], []
                                                            offset_5 = offset_4
                                                            offset_5, column_4, partial_tab_offset_4, partial_tab_width_4 = indent(buf, buf_start, buf_eof, offset_5, column_4, indent_column_4, _prefix, _children, partial_tab_offset_4, partial_tab_width_4)
                                                            if _prefix or _children:
                                                               raise Exception('bar')
                                                            if offset_5 == -1:
                                                                offset_4 = -1
                                                                break
                                                            offset_4 = offset_5
                                                            indent_column_4.append(column_4)
                                                        if offset_4 == -1:
                                                            break

                                                        count_2 = 0
                                                        while offset_4 < buf_eof:
                                                            codepoint = buf[offset_4]
                                                            if codepoint in ' \t':
                                                                if codepoint == '\t':
                                                                    if offset_4 == partial_tab_offset_4 and partial_tab_width_4 > 0:
                                                                        width = partial_tab_width_4
                                                                    else:
                                                                        width  = (self.tabstop-((column_4)%self.tabstop));
                                                                    count_2 += width
                                                                    column_4 += width
                                                                    offset_4 += 1
                                                                else:
                                                                    count_2 += 1
                                                                    column_4 += 1
                                                                    offset_4 += 1
                                                            else:
                                                                break

                                                        if offset_4 < buf_eof:
                                                            codepoint = buf[offset_4]
                                                            if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                                                offset_4 +=2
                                                                column_4 = 0
                                                                indent_column_4[:] = (0, )
                                                            elif codepoint in '\r\n':
                                                                offset_4 +=1
                                                                column_4 = 0
                                                                indent_column_4[:] = (0, )
                                                            else:
                                                                offset_4 = -1
                                                                break
                                                        else:
                                                            offset_4 = -1
                                                            break

                                                        #print('safe exit rep rule', offset_3, offset_4)
                                                        break
                                                    #print('exit rep rule', offset_3, offset_4)
                                                    if offset_4 == -1:
                                                        break
                                                    if offset_3 == offset_4: break
                                                    if children_6 is not None and children_6 is not None:
                                                        children_5.extend(children_6)
                                                    offset_3 = offset_4
                                                    column_3 = column_4
                                                    indent_column_3 = indent_column_4
                                                    partial_tab_offset_3 = partial_tab_offset_4
                                                    partial_tab_width_3 = partial_tab_width_4
                                                    count_1 += 1
                                                if offset_3 == -1:
                                                    break
                                                value_10 = count_1

                                                children_6 = []
                                                value_11 = Node(None, offset_3, offset_3, column_3, column_3, children_6, None)
                                                value_11.name = 'remark_empty_line'
                                                value_11.end = offset_3
                                                value_11.end_column = column_3
                                                value_11.value = None
                                                children_5.append(value_11)



                                                break
                                            if offset_3 != -1:
                                                offset_2 = offset_3
                                                column_2 = column_3
                                                indent_column_2 = indent_column_3
                                                partial_tab_offset_2 = partial_tab_offset_3
                                                partial_tab_width_2 = partial_tab_width_3
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_2 = -1 # no more choices
                                            break # end choice
                                        if offset_2 == -1:
                                            break

                                        #print('safe exit rep rule', offset_1, offset_2)
                                        break
                                    #print('exit rep rule', offset_1, offset_2)
                                    if offset_2 == -1:
                                        break
                                    if offset_1 == offset_2: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    count_0 += 1
                                if offset_1 == -1:
                                    break
                                value_8 = count_0

                                break
                            if offset_1 == -1:
                                break
                            value_7.name = 'directive_block'
                            value_7.end = offset_1
                            value_7.end_column = column_1
                            value_7.value = None
                            children_2.append(value_7)

                            if column_1 != 0:
                                offset_1 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_2 = offset_1
                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_2 == -1:
                                    offset_1 = -1
                                    break
                                offset_1 = offset_2
                                indent_column_1.append(column_1)
                            if offset_1 == -1:
                                break

                            count_0 = 0
                            while count_0 < value_6:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    if buf[offset_2:offset_2+1] == ']':
                                        offset_2 += 1
                                        column_2 += 1
                                    else:
                                        offset_2 = -1
                                        break

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                            if count_0 < value_6:
                            #    print('min exit', offset_1)
                                offset_1 = -1
                                break
                            if offset_1 == -1:
                                break
                            value_12 = count_0

                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break



                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            while True: # start reject
                                children_3 = []
                                offset_2 = offset_1 + 0
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                count_0 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_0 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_0 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                if offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    else:
                                        offset_2 = -1
                                        break
                                else:
                                    offset_2 = -1
                                    break

                                break
                            if offset_2 != -1:
                                offset_1 = -1
                                break

                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break
                            if count_0 < 1:
                                offset_1 = -1
                                break

                            children_3 = []
                            value_13 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                            while True: # start capture
                                offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inner_para(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                                if offset_1 == -1: break


                                break
                            if offset_1 == -1:
                                break
                            value_13.name = 'directive_para'
                            value_13.end = offset_1
                            value_13.end_column = column_1
                            value_13.value = None
                            children_2.append(value_13)

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break
                            else:
                                offset_1 = -1
                                break

                            if column_1 != 0:
                                offset_1 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_2 = offset_1
                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_2 == -1:
                                    offset_1 = -1
                                    break
                                offset_1 = offset_2
                                indent_column_1.append(column_1)
                            if offset_1 == -1:
                                break

                            while True: # start choice
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    children_4 = []
                                    value_14 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                    while True: # start capture
                                        offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_inner_list(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_2 == -1: break


                                        break
                                    if offset_2 == -1:
                                        break
                                    value_14.name = 'directive_list'
                                    value_14.end = offset_2
                                    value_14.end_column = column_2
                                    value_14.value = None
                                    children_3.append(value_14)


                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    children_4 = []
                                    value_15 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                    while True: # start capture
                                        offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_inner_blockquote(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_2 == -1: break


                                        break
                                    if offset_2 == -1:
                                        break
                                    value_15.name = 'directive_quote'
                                    value_15.end = offset_2
                                    value_15.end_column = column_2
                                    value_15.value = None
                                    children_3.append(value_15)


                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    children_4 = []
                                    value_16 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                    while True: # start capture
                                        offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_inner_prose_para(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_2 == -1: break


                                        break
                                    if offset_2 == -1:
                                        break
                                    value_16.name = 'directive_prose'
                                    value_16.end = offset_2
                                    value_16.end_column = column_2
                                    value_16.value = None
                                    children_3.append(value_16)


                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    children_4 = []
                                    value_17 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                    while True: # start capture
                                        offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_inner_table(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_2 == -1: break


                                        break
                                    if offset_2 == -1:
                                        break
                                    value_17.name = 'directive_table'
                                    value_17.end = offset_2
                                    value_17.end_column = column_2
                                    value_17.value = None
                                    children_3.append(value_17)


                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    children_4 = []
                                    value_18 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                    while True: # start capture
                                        offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_definition_item(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                        if offset_2 == -1: break


                                        count_0 = 0
                                        while True:
                                            offset_3 = offset_2
                                            column_3 = column_2
                                            indent_column_3 = list(indent_column_2)
                                            partial_tab_offset_3 = partial_tab_offset_2
                                            partial_tab_width_3 = partial_tab_width_2
                                            children_5 = [] if children_4 is not None else None
                                            while True:
                                                #print('entry rep rule', offset_2, offset_3)
                                                if column_3 != 0:
                                                    offset_3 = -1
                                                    break
                                                # print('start')
                                                for indent, dedent in prefix_0:
                                                    # print(indent, dedent)
                                                    _children, _prefix = [], []
                                                    offset_4 = offset_3
                                                    offset_4, column_3, partial_tab_offset_3, partial_tab_width_3 = indent(buf, buf_start, buf_eof, offset_4, column_3, indent_column_3, _prefix, _children, partial_tab_offset_3, partial_tab_width_3)
                                                    if _prefix or _children:
                                                       raise Exception('bar')
                                                    if offset_4 == -1:
                                                        offset_3 = -1
                                                        break
                                                    offset_3 = offset_4
                                                    indent_column_3.append(column_3)
                                                if offset_3 == -1:
                                                    break

                                                offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_definition_item(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                                if offset_3 == -1: break


                                                #print('safe exit rep rule', offset_2, offset_3)
                                                break
                                            #print('exit rep rule', offset_2, offset_3)
                                            if offset_3 == -1:
                                                break
                                            if offset_2 == offset_3: break
                                            if children_5 is not None and children_5 is not None:
                                                children_4.extend(children_5)
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            count_0 += 1
                                        if offset_2 == -1:
                                            break
                                        value_19 = count_0

                                        break
                                    if offset_2 == -1:
                                        break
                                    value_18.name = 'directive_definition_list'
                                    value_18.end = offset_2
                                    value_18.end_column = column_2
                                    value_18.value = None
                                    children_3.append(value_18)


                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_directive_code_block(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_1 = -1 # no more choices
                                break # end choice
                            if offset_1 == -1:
                                break


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 != buf_eof:
                                offset_1 = -1
                                break

                            children_2.append(Node('value', offset_1, offset_1, column_1, column_1, (), None))


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break
                            else:
                                offset_1 = -1
                                break

                            if column_1 != 0:
                                offset_1 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_2 = offset_1
                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_2 == -1:
                                    offset_1 = -1
                                    break
                                offset_1 = offset_2
                                indent_column_1.append(column_1)
                            if offset_1 == -1:
                                break

                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break


                            children_2.append(Node('value', offset_1, offset_1, column_1, column_1, (), None))


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_0 = -1 # no more choices
                        break # end choice
                    if offset_0 == -1:
                        break

                    break
                if offset_0 == -1:
                    break
                value_1.name = 'block_directive'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_0.append(value_1)

                break
            prefix_0.pop()
            if len(indent_column_0) > 1: indent_column_0.pop()
            if offset_0 == -1: break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_raw_block_directive(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_1 = offset_0
            column_1 = column_0
            while True: # start count
                count_0 = 0
                while offset_1 < buf_eof and count_0 < 8:
                    codepoint = buf[offset_1]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_1 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_1)%self.tabstop));
                            if count_0 + width > 8:
                                new_width = 8 - count_0
                                count_0 += new_width
                                column_1 += new_width
                                partial_tab_offset_0 = offset_1
                                partial_tab_width_0 = width - new_width
                                break
                            count_0 += width
                            column_1 += width
                            offset_1 += 1
                        else:
                            count_0 += 1
                            column_1 += 1
                            offset_1 += 1
                    else:
                        break

                break
            if offset_1 == -1:
                offset_0 = -1; break
            value_0 = column_1 - column_0
            offset_0 = offset_1
            column_0 = column_1

            count_0 = column_0 - indent_column_0[len(indent_column_0)-1]
            # print(count_0, 'indent')
            def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                saw_tab, saw_not_tab = False, False
                start_column, start_offset = column, offset
                if count < 0: offset = -1
                while count > 0 and offset < buf_eof:
                    codepoint = buf[offset];
                    if codepoint in ' \t':
                        if not allow_mixed_indent:
                            if codepoint == '\t': saw_tab = True
                            else: saw_not_tab = True
                            if saw_tab and saw_not_tab:
                                 offset = -1; break
                        if codepoint != '\t':
                            column += 1
                            offset += 1
                            count -=1
                        else:
                            if offset == partial_tab_offset and partial_tab_width > 0:
                                width = partial_tab_width
                            else:
                                width  = (self.tabstop-((column)%self.tabstop));
                            if width <= count:
                                column += width
                                offset += 1
                                count -= width
                            else:
                                partial_tab_offset = offset
                                partial_tab_width = width-count
                                column += count
                                count -= width
                                break
                    elif codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        break
                    elif codepoint in '\r\n':
                        break
                    else:
                        offset = -1
                        break
                return offset, column, partial_tab_offset, partial_tab_width
            prefix_0.append((_indent, None))
            indent_column_0.append(column_0)
            while True:
                if buf[offset_0:offset_0+6] == '@raw::':
                    offset_0 += 6
                    column_0 += 6
                else:
                    offset_0 = -1
                    break

                children_1 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
                while True: # start capture
                    children_2 = []
                    value_2 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                    while True: # start capture
                        offset_1 = offset_0
                        while True: # start backref
                            _match = regex_0.match(buf, offset_1)
                            if _match:
                                _end = _match.end()
                                column_0 += (_end - offset_1)
                                offset_1 = _end
                            else:
                                offset_1 = -1
                                break

                            break
                        if offset_1 == -1:
                            offset_0 = -1
                            break
                        value_3 = buf[offset_0:offset_1]
                        offset_0 = offset_1

                        break
                    if offset_0 == -1:
                        break
                    value_2.name = 'directive_name'
                    value_2.end = offset_0
                    value_2.end_column = column_0
                    value_2.value = None
                    children_1.append(value_2)

                    children_2 = []
                    value_4 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while count_0 < 1:
                            offset_1 = offset_0
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_0, offset_1)
                                count_1 = 0
                                while offset_1 < buf_eof:
                                    codepoint = buf[offset_1]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_1 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_1 += 1
                                    else:
                                        break

                                if buf[offset_1:offset_1+1] == '{':
                                    offset_1 += 1
                                    column_1 += 1
                                else:
                                    offset_1 = -1
                                    break

                                offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                                if offset_1 == -1: break


                                if buf[offset_1:offset_1+1] == '}':
                                    offset_1 += 1
                                    column_1 += 1
                                else:
                                    offset_1 = -1
                                    break

                                #print('safe exit rep rule', offset_0, offset_1)
                                break
                            #print('exit rep rule', offset_0, offset_1)
                            if offset_1 == -1:
                                break
                            if offset_0 == offset_1: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                            break
                        if offset_0 == -1:
                            break
                        value_5 = count_0

                        break
                    if offset_0 == -1:
                        break
                    value_4.name = 'directive_args'
                    value_4.end = offset_0
                    value_4.end_column = column_0
                    value_4.value = None
                    children_1.append(value_4)

                    count_0 = 0
                    while offset_0 < buf_eof:
                        codepoint = buf[offset_0]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                    width = partial_tab_width_0
                                else:
                                    width  = (self.tabstop-((column_0)%self.tabstop));
                                count_0 += width
                                column_0 += width
                                offset_0 += 1
                            else:
                                count_0 += 1
                                column_0 += 1
                                offset_0 += 1
                        else:
                            break

                    while True: # start choice
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while count_0 < 1:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    if offset_2 < buf_eof:
                                        codepoint = buf[offset_2]
                                        if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                            offset_2 +=2
                                            column_2 = 0
                                            indent_column_2[:] = (0, )
                                        elif codepoint in '\r\n':
                                            offset_2 +=1
                                            column_2 = 0
                                            indent_column_2[:] = (0, )
                                        else:
                                            offset_2 = -1
                                            break
                                    else:
                                        offset_2 = -1
                                        break

                                    if column_2 != 0:
                                        offset_2 = -1
                                        break
                                    # print('start')
                                    for indent, dedent in prefix_0:
                                        # print(indent, dedent)
                                        _children, _prefix = [], []
                                        offset_3 = offset_2
                                        offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                        if _prefix or _children:
                                           raise Exception('bar')
                                        if offset_3 == -1:
                                            offset_2 = -1
                                            break
                                        offset_2 = offset_3
                                        indent_column_2.append(column_2)
                                    if offset_2 == -1:
                                        break

                                    count_1 = 0
                                    while offset_2 < buf_eof and count_1 < value_0:
                                        codepoint = buf[offset_2]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                if count_1 + width > value_0:
                                                    new_width = value_0 - count_1
                                                    count_1 += new_width
                                                    column_2 += new_width
                                                    partial_tab_offset_2 = offset_2
                                                    partial_tab_width_2 = width - new_width
                                                    break
                                                count_1 += width
                                                column_2 += width
                                                offset_2 += 1
                                            else:
                                                count_1 += 1
                                                column_2 += 1
                                                offset_2 += 1
                                        else:
                                            break
                                    if count_1 < value_0:
                                        offset_2 = -1
                                        break

                                    while True: # start reject
                                        children_4 = []
                                        offset_3 = offset_2 + 0
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        count_1 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_1 += width
                                                    column_3 += width
                                                    offset_3 += 1
                                                else:
                                                    count_1 += 1
                                                    column_3 += 1
                                                    offset_3 += 1
                                            else:
                                                break
                                        if count_1 < 1:
                                            offset_3 = -1
                                            break

                                        break
                                    if offset_3 != -1:
                                        offset_2 = -1
                                        break

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                                break
                            if offset_1 == -1:
                                break
                            value_6 = count_0

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_code_block(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break



                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break



                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_0 = -1 # no more choices
                        break # end choice
                    if offset_0 == -1:
                        break

                    break
                if offset_0 == -1:
                    break
                value_1.name = 'raw_block_directive'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_0.append(value_1)

                break
            prefix_0.pop()
            if len(indent_column_0) > 1: indent_column_0.pop()
            if offset_0 == -1: break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_start_definition(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            if buf[offset_0:offset_0+1] == '[':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_definition_label(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_1 = offset_0
                column_1 = column_0
                while True: # start count
                    _match = regex_5.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    break
                if offset_1 == -1:
                    offset_0 = -1; break
                value_1 = column_1 - column_0
                offset_0 = offset_1
                column_0 = column_1

                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inline_element(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                count_0 = 0
                while True:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        while True: # start choice
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True: # case
                                offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_linebreak(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                if offset_2 == -1: break



                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                break
                            # end case
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True: # case
                                children_4 = []
                                value_3 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                while True: # start capture
                                    count_1 = 0
                                    while offset_2 < buf_eof:
                                        codepoint = buf[offset_2]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                count_1 += width
                                                column_2 += width
                                                offset_2 += 1
                                            else:
                                                count_1 += 1
                                                column_2 += 1
                                                offset_2 += 1
                                        else:
                                            break

                                    break
                                if offset_2 == -1:
                                    break
                                value_3.name = 'remark_whitespace'
                                value_3.end = offset_2
                                value_3.end_column = column_2
                                value_3.value = None
                                children_3.append(value_3)


                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                break
                            # end case
                            offset_1 = -1 # no more choices
                            break # end choice
                        if offset_1 == -1:
                            break

                        while True: # start reject
                            children_3 = []
                            offset_2 = offset_1 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            count_1 = 0
                            while count_1 < value_1:
                                offset_3 = offset_2
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                children_4 = [] if children_3 is not None else None
                                while True:
                                    #print('entry rep rule', offset_2, offset_3)
                                    if buf[offset_3:offset_3+1] == ']':
                                        offset_3 += 1
                                        column_3 += 1
                                    else:
                                        offset_3 = -1
                                        break

                                    #print('safe exit rep rule', offset_2, offset_3)
                                    break
                                #print('exit rep rule', offset_2, offset_3)
                                if offset_3 == -1:
                                    break
                                if offset_2 == offset_3: break
                                if children_4 is not None and children_4 is not None:
                                    children_3.extend(children_4)
                                offset_2 = offset_3
                                column_2 = column_3
                                indent_column_2 = indent_column_3
                                partial_tab_offset_2 = partial_tab_offset_3
                                partial_tab_width_2 = partial_tab_width_3
                                count_1 += 1
                            if count_1 < value_1:
                            #    print('min exit', offset_2)
                                offset_2 = -1
                                break
                            if offset_2 == -1:
                                break
                            value_4 = count_1

                            break
                        if offset_2 != -1:
                            offset_1 = -1
                            break

                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_element(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if offset_0 == -1:
                    break
                value_2 = count_0

                while True: # start choice
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_linebreak(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break



                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        children_3 = []
                        value_5 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                        while True: # start capture
                            count_0 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            break
                        if offset_1 == -1:
                            break
                        value_5.name = 'remark_whitespace'
                        value_5.end = offset_1
                        value_5.end_column = column_1
                        value_5.value = None
                        children_2.append(value_5)


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_0 = -1 # no more choices
                    break # end choice
                if offset_0 == -1:
                    break

                count_0 = 0
                while count_0 < value_1:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        if buf[offset_1:offset_1+1] == ']':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if count_0 < value_1:
                #    print('min exit', offset_0)
                    offset_0 = -1
                    break
                if offset_0 == -1:
                    break
                value_6 = count_0

                children_2 = []
                value_7 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    count_0 = 0
                    while count_0 < 1:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_3 = [] if children_2 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if buf[offset_1:offset_1+1] == '{':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            if buf[offset_1:offset_1+1] == '}':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_3 is not None and children_3 is not None:
                            children_2.extend(children_3)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                        break
                    if offset_0 == -1:
                        break
                    value_8 = count_0

                    break
                if offset_0 == -1:
                    break
                value_7.name = 'directive_args'
                value_7.end = offset_0
                value_7.end_column = column_0
                value_7.value = None
                children_1.append(value_7)

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_definition_label'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_block_definition(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_1 = offset_0
            column_1 = column_0
            while True: # start count
                count_0 = 0
                while offset_1 < buf_eof and count_0 < 8:
                    codepoint = buf[offset_1]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_1 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_1)%self.tabstop));
                            if count_0 + width > 8:
                                new_width = 8 - count_0
                                count_0 += new_width
                                column_1 += new_width
                                partial_tab_offset_0 = offset_1
                                partial_tab_width_0 = width - new_width
                                break
                            count_0 += width
                            column_1 += width
                            offset_1 += 1
                        else:
                            count_0 += 1
                            column_1 += 1
                            offset_1 += 1
                    else:
                        break

                break
            if offset_1 == -1:
                offset_0 = -1; break
            value_0 = column_1 - column_0
            offset_0 = offset_1
            column_0 = column_1

            count_0 = column_0 - indent_column_0[len(indent_column_0)-1]
            # print(count_0, 'indent')
            def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                saw_tab, saw_not_tab = False, False
                start_column, start_offset = column, offset
                if count < 0: offset = -1
                while count > 0 and offset < buf_eof:
                    codepoint = buf[offset];
                    if codepoint in ' \t':
                        if not allow_mixed_indent:
                            if codepoint == '\t': saw_tab = True
                            else: saw_not_tab = True
                            if saw_tab and saw_not_tab:
                                 offset = -1; break
                        if codepoint != '\t':
                            column += 1
                            offset += 1
                            count -=1
                        else:
                            if offset == partial_tab_offset and partial_tab_width > 0:
                                width = partial_tab_width
                            else:
                                width  = (self.tabstop-((column)%self.tabstop));
                            if width <= count:
                                column += width
                                offset += 1
                                count -= width
                            else:
                                partial_tab_offset = offset
                                partial_tab_width = width-count
                                column += count
                                count -= width
                                break
                    elif codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        break
                    elif codepoint in '\r\n':
                        break
                    else:
                        offset = -1
                        break
                return offset, column, partial_tab_offset, partial_tab_width
            prefix_0.append((_indent, self.parse_paragraph_breaks))
            indent_column_0.append(column_0)
            while True:
                children_1 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
                while True: # start capture
                    offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_definition_item(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                    if offset_0 == -1: break


                    count_0 = 0
                    while True:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if column_1 != 0:
                                offset_1 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_2 = offset_1
                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_2 == -1:
                                    offset_1 = -1
                                    break
                                offset_1 = offset_2
                                indent_column_1.append(column_1)
                            if offset_1 == -1:
                                break

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_definition_item(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                    if offset_0 == -1:
                        break
                    value_2 = count_0

                    break
                if offset_0 == -1:
                    break
                value_1.name = 'remark_definition_list'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_0.append(value_1)

                break
            prefix_0.pop()
            if len(indent_column_0) > 1: indent_column_0.pop()
            if offset_0 == -1: break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_definition_item(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_definition_label(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0)
            if offset_0 == -1: break


            if buf[offset_0:offset_0+1] == ':':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break

            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                while True: # start choice
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        while True: # start reject
                            children_3 = []
                            offset_2 = offset_1 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_0 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break
                            else:
                                offset_2 = -1
                                break

                            break
                        if offset_2 != -1:
                            offset_1 = -1
                            break

                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break
                        if count_0 < 1:
                            offset_1 = -1
                            break

                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_para(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break



                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        if column_1 != 0:
                            offset_1 = -1
                            break
                        # print('start')
                        for indent, dedent in prefix_0:
                            # print(indent, dedent)
                            _children, _prefix = [], []
                            offset_2 = offset_1
                            offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                            if _prefix or _children:
                               raise Exception('bar')
                            if offset_2 == -1:
                                offset_1 = -1
                                break
                            offset_1 = offset_2
                            indent_column_1.append(column_1)
                        if offset_1 == -1:
                            break

                        while True: # start reject
                            children_3 = []
                            offset_2 = offset_1 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_0 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break
                            if count_0 < 1:
                                offset_2 = -1
                                break

                            break
                        if offset_2 != -1:
                            offset_1 = -1
                            break

                        count_0 = column_1 - indent_column_1[len(indent_column_1)-1]
                        # print(count_0, 'indent')
                        def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                            saw_tab, saw_not_tab = False, False
                            start_column, start_offset = column, offset
                            if count < 0: offset = -1
                            while count > 0 and offset < buf_eof:
                                codepoint = buf[offset];
                                if codepoint in ' \t':
                                    if not allow_mixed_indent:
                                        if codepoint == '\t': saw_tab = True
                                        else: saw_not_tab = True
                                        if saw_tab and saw_not_tab:
                                             offset = -1; break
                                    if codepoint != '\t':
                                        column += 1
                                        offset += 1
                                        count -=1
                                    else:
                                        if offset == partial_tab_offset and partial_tab_width > 0:
                                            width = partial_tab_width
                                        else:
                                            width  = (self.tabstop-((column)%self.tabstop));
                                        if width <= count:
                                            column += width
                                            offset += 1
                                            count -= width
                                        else:
                                            partial_tab_offset = offset
                                            partial_tab_width = width-count
                                            column += count
                                            count -= width
                                            break
                                elif codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    break
                                elif codepoint in '\r\n':
                                    break
                                else:
                                    offset = -1
                                    break
                            return offset, column, partial_tab_offset, partial_tab_width
                        prefix_0.append((_indent, None))
                        indent_column_1.append(column_1)
                        while True:
                            while True: # start choice
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_list_block(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_blockquote(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_prose_para(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_table(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_1 = -1 # no more choices
                                break # end choice
                            if offset_1 == -1:
                                break

                            break
                        prefix_0.pop()
                        if len(indent_column_1) > 1: indent_column_1.pop()
                        if offset_1 == -1: break


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        if column_1 != 0:
                            offset_1 = -1
                            break
                        # print('start')
                        for indent, dedent in prefix_0:
                            # print(indent, dedent)
                            _children, _prefix = [], []
                            offset_2 = offset_1
                            offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                            if _prefix or _children:
                               raise Exception('bar')
                            if offset_2 == -1:
                                offset_1 = -1
                                break
                            offset_1 = offset_2
                            indent_column_1.append(column_1)
                        if offset_1 == -1:
                            break

                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break
                        if count_0 < 1:
                            offset_1 = -1
                            break

                        count_0 = column_1 - indent_column_1[len(indent_column_1)-1]
                        # print(count_0, 'indent')
                        def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                            saw_tab, saw_not_tab = False, False
                            start_column, start_offset = column, offset
                            if count < 0: offset = -1
                            while count > 0 and offset < buf_eof:
                                codepoint = buf[offset];
                                if codepoint in ' \t':
                                    if not allow_mixed_indent:
                                        if codepoint == '\t': saw_tab = True
                                        else: saw_not_tab = True
                                        if saw_tab and saw_not_tab:
                                             offset = -1; break
                                    if codepoint != '\t':
                                        column += 1
                                        offset += 1
                                        count -=1
                                    else:
                                        if offset == partial_tab_offset and partial_tab_width > 0:
                                            width = partial_tab_width
                                        else:
                                            width  = (self.tabstop-((column)%self.tabstop));
                                        if width <= count:
                                            column += width
                                            offset += 1
                                            count -= width
                                        else:
                                            partial_tab_offset = offset
                                            partial_tab_width = width-count
                                            column += count
                                            count -= width
                                            break
                                elif codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    break
                                elif codepoint in '\r\n':
                                    break
                                else:
                                    offset = -1
                                    break
                            return offset, column, partial_tab_offset, partial_tab_width
                        prefix_0.append((_indent, None))
                        indent_column_1.append(column_1)
                        while True:
                            while True: # start choice
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_block_element(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_para(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    count_0 = 0
                                    while offset_2 < buf_eof:
                                        codepoint = buf[offset_2]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                count_0 += width
                                                column_2 += width
                                                offset_2 += 1
                                            else:
                                                count_0 += 1
                                                column_2 += 1
                                                offset_2 += 1
                                        else:
                                            break

                                    if offset_2 < buf_eof:
                                        codepoint = buf[offset_2]
                                        if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                            offset_2 +=2
                                            column_2 = 0
                                            indent_column_2[:] = (0, )
                                        elif codepoint in '\r\n':
                                            offset_2 +=1
                                            column_2 = 0
                                            indent_column_2[:] = (0, )
                                        else:
                                            offset_2 = -1
                                            break
                                    else:
                                        offset_2 = -1
                                        break

                                    count_0 = 0
                                    while True:
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_4 = [] if children_3 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_2, offset_3)
                                            if column_3 != 0:
                                                offset_3 = -1
                                                break
                                            # print('start')
                                            for indent, dedent in prefix_0:
                                                # print(indent, dedent)
                                                _children, _prefix = [], []
                                                offset_4 = offset_3
                                                offset_4, column_3, partial_tab_offset_3, partial_tab_width_3 = indent(buf, buf_start, buf_eof, offset_4, column_3, indent_column_3, _prefix, _children, partial_tab_offset_3, partial_tab_width_3)
                                                if _prefix or _children:
                                                   raise Exception('bar')
                                                if offset_4 == -1:
                                                    offset_3 = -1
                                                    break
                                                offset_3 = offset_4
                                                indent_column_3.append(column_3)
                                            if offset_3 == -1:
                                                break

                                            count_1 = 0
                                            while offset_3 < buf_eof:
                                                codepoint = buf[offset_3]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        count_1 += width
                                                        column_3 += width
                                                        offset_3 += 1
                                                    else:
                                                        count_1 += 1
                                                        column_3 += 1
                                                        offset_3 += 1
                                                else:
                                                    break

                                            if offset_3 < buf_eof:
                                                codepoint = buf[offset_3]
                                                if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                    offset_3 +=2
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                elif codepoint in '\r\n':
                                                    offset_3 +=1
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                else:
                                                    offset_3 = -1
                                                    break
                                            else:
                                                offset_3 = -1
                                                break

                                            #print('safe exit rep rule', offset_2, offset_3)
                                            break
                                        #print('exit rep rule', offset_2, offset_3)
                                        if offset_3 == -1:
                                            break
                                        if offset_2 == offset_3: break
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        count_0 += 1
                                    if offset_2 == -1:
                                        break
                                    value_1 = count_0

                                    children_4 = []
                                    value_2 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                    value_2.name = 'remark_empty_line'
                                    value_2.end = offset_2
                                    value_2.end_column = column_2
                                    value_2.value = None
                                    children_3.append(value_2)



                                    break
                                if offset_2 != -1:
                                    offset_1 = offset_2
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_1 = -1 # no more choices
                                break # end choice
                            if offset_1 == -1:
                                break

                            count_0 = 0
                            while True:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    if column_2 != 0:
                                        offset_2 = -1
                                        break
                                    # print('start')
                                    for indent, dedent in prefix_0:
                                        # print(indent, dedent)
                                        _children, _prefix = [], []
                                        offset_3 = offset_2
                                        offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                        if _prefix or _children:
                                           raise Exception('bar')
                                        if offset_3 == -1:
                                            offset_2 = -1
                                            break
                                        offset_2 = offset_3
                                        indent_column_2.append(column_2)
                                    if offset_2 == -1:
                                        break

                                    while True: # start choice
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_4 = [] if children_3 is not None else None
                                        while True: # case
                                            offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_block_element(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_4, partial_tab_offset_3, partial_tab_width_3)
                                            if offset_3 == -1: break



                                            break
                                        if offset_3 != -1:
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_4 is not None and children_4 is not None:
                                                children_3.extend(children_4)
                                            break
                                        # end case
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_4 = [] if children_3 is not None else None
                                        while True: # case
                                            offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_para(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_4, partial_tab_offset_3, partial_tab_width_3)
                                            if offset_3 == -1: break



                                            break
                                        if offset_3 != -1:
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_4 is not None and children_4 is not None:
                                                children_3.extend(children_4)
                                            break
                                        # end case
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_4 = [] if children_3 is not None else None
                                        while True: # case
                                            count_1 = 0
                                            while offset_3 < buf_eof:
                                                codepoint = buf[offset_3]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        count_1 += width
                                                        column_3 += width
                                                        offset_3 += 1
                                                    else:
                                                        count_1 += 1
                                                        column_3 += 1
                                                        offset_3 += 1
                                                else:
                                                    break

                                            if offset_3 < buf_eof:
                                                codepoint = buf[offset_3]
                                                if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                    offset_3 +=2
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                elif codepoint in '\r\n':
                                                    offset_3 +=1
                                                    column_3 = 0
                                                    indent_column_3[:] = (0, )
                                                else:
                                                    offset_3 = -1
                                                    break
                                            else:
                                                offset_3 = -1
                                                break

                                            count_1 = 0
                                            while True:
                                                offset_4 = offset_3
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                children_5 = [] if children_4 is not None else None
                                                while True:
                                                    #print('entry rep rule', offset_3, offset_4)
                                                    if column_4 != 0:
                                                        offset_4 = -1
                                                        break
                                                    # print('start')
                                                    for indent, dedent in prefix_0:
                                                        # print(indent, dedent)
                                                        _children, _prefix = [], []
                                                        offset_5 = offset_4
                                                        offset_5, column_4, partial_tab_offset_4, partial_tab_width_4 = indent(buf, buf_start, buf_eof, offset_5, column_4, indent_column_4, _prefix, _children, partial_tab_offset_4, partial_tab_width_4)
                                                        if _prefix or _children:
                                                           raise Exception('bar')
                                                        if offset_5 == -1:
                                                            offset_4 = -1
                                                            break
                                                        offset_4 = offset_5
                                                        indent_column_4.append(column_4)
                                                    if offset_4 == -1:
                                                        break

                                                    count_2 = 0
                                                    while offset_4 < buf_eof:
                                                        codepoint = buf[offset_4]
                                                        if codepoint in ' \t':
                                                            if codepoint == '\t':
                                                                if offset_4 == partial_tab_offset_4 and partial_tab_width_4 > 0:
                                                                    width = partial_tab_width_4
                                                                else:
                                                                    width  = (self.tabstop-((column_4)%self.tabstop));
                                                                count_2 += width
                                                                column_4 += width
                                                                offset_4 += 1
                                                            else:
                                                                count_2 += 1
                                                                column_4 += 1
                                                                offset_4 += 1
                                                        else:
                                                            break

                                                    if offset_4 < buf_eof:
                                                        codepoint = buf[offset_4]
                                                        if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                                            offset_4 +=2
                                                            column_4 = 0
                                                            indent_column_4[:] = (0, )
                                                        elif codepoint in '\r\n':
                                                            offset_4 +=1
                                                            column_4 = 0
                                                            indent_column_4[:] = (0, )
                                                        else:
                                                            offset_4 = -1
                                                            break
                                                    else:
                                                        offset_4 = -1
                                                        break

                                                    #print('safe exit rep rule', offset_3, offset_4)
                                                    break
                                                #print('exit rep rule', offset_3, offset_4)
                                                if offset_4 == -1:
                                                    break
                                                if offset_3 == offset_4: break
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                count_1 += 1
                                            if offset_3 == -1:
                                                break
                                            value_4 = count_1

                                            children_5 = []
                                            value_5 = Node(None, offset_3, offset_3, column_3, column_3, children_5, None)
                                            value_5.name = 'remark_empty_line'
                                            value_5.end = offset_3
                                            value_5.end_column = column_3
                                            value_5.value = None
                                            children_4.append(value_5)



                                            break
                                        if offset_3 != -1:
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_4 is not None and children_4 is not None:
                                                children_3.extend(children_4)
                                            break
                                        # end case
                                        offset_2 = -1 # no more choices
                                        break # end choice
                                    if offset_2 == -1:
                                        break

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                            if offset_1 == -1:
                                break
                            value_3 = count_0

                            break
                        prefix_0.pop()
                        if len(indent_column_1) > 1: indent_column_1.pop()
                        if offset_1 == -1: break


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_0 = -1 # no more choices
                    break # end choice
                if offset_0 == -1:
                    break

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_definition_block'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inline_directive(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            if buf[offset_0:offset_0+1] == '$':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break

            while True: # start reject
                children_1 = []
                offset_1 = offset_0 + 0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                _match = regex_3.match(buf, offset_1)
                if _match:
                    _end = _match.end()
                    column_1 += (_end - offset_1)
                    offset_1 = _end
                else:
                    offset_1 = -1
                    break

                break
            if offset_1 != -1:
                offset_0 = -1
                break

            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                children_2 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_remark_identifier(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_2, partial_tab_offset_0, partial_tab_width_0)
                    if offset_0 == -1: break


                    break
                if offset_0 == -1:
                    break
                value_1.name = 'directive_name'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_1.append(value_1)

                while True: # start reject
                    children_2 = []
                    offset_1 = offset_0 + 0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    if buf[offset_1:offset_1+1] == ':':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    break
                if offset_1 != -1:
                    offset_0 = -1
                    break

                count_0 = 0
                while count_0 < 1:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        while True: # start choice
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True: # case
                                _match = regex_6.match(buf, offset_2)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_2)
                                    offset_2 = _end
                                else:
                                    offset_2 = -1
                                    break

                                children_3.append(Node('value', offset_2, offset_2, column_2, column_2, (), None))

                                children_3.append(Node('value', offset_2, offset_2, column_2, column_2, (), None))


                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                break
                            # end case
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True: # case
                                count_1 = 0
                                while offset_2 < buf_eof and count_1 < 1:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            if count_1 + width > 1:
                                                new_width = 1 - count_1
                                                count_1 += new_width
                                                column_2 += new_width
                                                partial_tab_offset_2 = offset_2
                                                partial_tab_width_2 = width - new_width
                                                break
                                            count_1 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                offset_3 = offset_2
                                column_3 = column_2
                                while True: # start count
                                    _match = regex_7.match(buf, offset_3)
                                    if _match:
                                        _end = _match.end()
                                        column_3 += (_end - offset_3)
                                        offset_3 = _end
                                    else:
                                        offset_3 = -1
                                        break

                                    break
                                if offset_3 == -1:
                                    offset_2 = -1; break
                                value_3 = column_3 - column_2
                                offset_2 = offset_3
                                column_2 = column_3

                                while True: # start reject
                                    children_4 = []
                                    offset_3 = offset_2 + 0
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    count_1 = 0
                                    while offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                    width = partial_tab_width_3
                                                else:
                                                    width  = (self.tabstop-((column_3)%self.tabstop));
                                                count_1 += width
                                                column_3 += width
                                                offset_3 += 1
                                            else:
                                                count_1 += 1
                                                column_3 += 1
                                                offset_3 += 1
                                        else:
                                            break

                                    if offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                            offset_3 +=2
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        elif codepoint in '\r\n':
                                            offset_3 +=1
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        else:
                                            offset_3 = -1
                                            break


                                    break
                                if offset_3 != -1:
                                    offset_2 = -1
                                    break

                                children_4 = []
                                value_4 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                while True: # start capture
                                    count_1 = 0
                                    while count_1 < 1:
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_2, offset_3)
                                            while True: # start reject
                                                children_6 = []
                                                offset_4 = offset_3 + 0
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                count_2 = 0
                                                while count_2 < value_3:
                                                    offset_5 = offset_4
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    children_7 = [] if children_6 is not None else None
                                                    while True:
                                                        #print('entry rep rule', offset_4, offset_5)
                                                        if buf[offset_5:offset_5+1] == ']':
                                                            offset_5 += 1
                                                            column_5 += 1
                                                        else:
                                                            offset_5 = -1
                                                            break

                                                        #print('safe exit rep rule', offset_4, offset_5)
                                                        break
                                                    #print('exit rep rule', offset_4, offset_5)
                                                    if offset_5 == -1:
                                                        break
                                                    if offset_4 == offset_5: break
                                                    if children_7 is not None and children_7 is not None:
                                                        children_6.extend(children_7)
                                                    offset_4 = offset_5
                                                    column_4 = column_5
                                                    indent_column_4 = indent_column_5
                                                    partial_tab_offset_4 = partial_tab_offset_5
                                                    partial_tab_width_4 = partial_tab_width_5
                                                    count_2 += 1
                                                if count_2 < value_3:
                                                #    print('min exit', offset_4)
                                                    offset_4 = -1
                                                    break
                                                if offset_4 == -1:
                                                    break
                                                value_6 = count_2

                                                break
                                            if offset_4 != -1:
                                                offset_3 = -1
                                                break

                                            offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_inline_element(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                            if offset_3 == -1: break


                                            count_2 = 0
                                            while True:
                                                offset_4 = offset_3
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                children_6 = [] if children_5 is not None else None
                                                while True:
                                                    #print('entry rep rule', offset_3, offset_4)
                                                    while True: # start choice
                                                        offset_5 = offset_4
                                                        column_5 = column_4
                                                        indent_column_5 = list(indent_column_4)
                                                        partial_tab_offset_5 = partial_tab_offset_4
                                                        partial_tab_width_5 = partial_tab_width_4
                                                        children_7 = [] if children_6 is not None else None
                                                        while True: # case
                                                            offset_5, column_5, partial_tab_offset_5, partial_tab_width_5 = self.parse_linebreak(buf, buf_start, buf_eof, offset_5, column_5, indent_column_5, prefix_0, children_7, partial_tab_offset_5, partial_tab_width_5)
                                                            if offset_5 == -1: break



                                                            break
                                                        if offset_5 != -1:
                                                            offset_4 = offset_5
                                                            column_4 = column_5
                                                            indent_column_4 = indent_column_5
                                                            partial_tab_offset_4 = partial_tab_offset_5
                                                            partial_tab_width_4 = partial_tab_width_5
                                                            if children_7 is not None and children_7 is not None:
                                                                children_6.extend(children_7)
                                                            break
                                                        # end case
                                                        offset_5 = offset_4
                                                        column_5 = column_4
                                                        indent_column_5 = list(indent_column_4)
                                                        partial_tab_offset_5 = partial_tab_offset_4
                                                        partial_tab_width_5 = partial_tab_width_4
                                                        children_7 = [] if children_6 is not None else None
                                                        while True: # case
                                                            children_8 = []
                                                            value_8 = Node(None, offset_5, offset_5, column_5, column_5, children_8, None)
                                                            while True: # start capture
                                                                count_3 = 0
                                                                while offset_5 < buf_eof:
                                                                    codepoint = buf[offset_5]
                                                                    if codepoint in ' \t':
                                                                        if codepoint == '\t':
                                                                            if offset_5 == partial_tab_offset_5 and partial_tab_width_5 > 0:
                                                                                width = partial_tab_width_5
                                                                            else:
                                                                                width  = (self.tabstop-((column_5)%self.tabstop));
                                                                            count_3 += width
                                                                            column_5 += width
                                                                            offset_5 += 1
                                                                        else:
                                                                            count_3 += 1
                                                                            column_5 += 1
                                                                            offset_5 += 1
                                                                    else:
                                                                        break

                                                                break
                                                            if offset_5 == -1:
                                                                break
                                                            value_8.name = 'remark_whitespace'
                                                            value_8.end = offset_5
                                                            value_8.end_column = column_5
                                                            value_8.value = None
                                                            children_7.append(value_8)


                                                            break
                                                        if offset_5 != -1:
                                                            offset_4 = offset_5
                                                            column_4 = column_5
                                                            indent_column_4 = indent_column_5
                                                            partial_tab_offset_4 = partial_tab_offset_5
                                                            partial_tab_width_4 = partial_tab_width_5
                                                            if children_7 is not None and children_7 is not None:
                                                                children_6.extend(children_7)
                                                            break
                                                        # end case
                                                        offset_4 = -1 # no more choices
                                                        break # end choice
                                                    if offset_4 == -1:
                                                        break

                                                    while True: # start reject
                                                        children_7 = []
                                                        offset_5 = offset_4 + 0
                                                        column_5 = column_4
                                                        indent_column_5 = list(indent_column_4)
                                                        partial_tab_offset_5 = partial_tab_offset_4
                                                        partial_tab_width_5 = partial_tab_width_4
                                                        count_3 = 0
                                                        while count_3 < value_3:
                                                            offset_6 = offset_5
                                                            column_6 = column_5
                                                            indent_column_6 = list(indent_column_5)
                                                            partial_tab_offset_6 = partial_tab_offset_5
                                                            partial_tab_width_6 = partial_tab_width_5
                                                            children_8 = [] if children_7 is not None else None
                                                            while True:
                                                                #print('entry rep rule', offset_5, offset_6)
                                                                if buf[offset_6:offset_6+1] == ']':
                                                                    offset_6 += 1
                                                                    column_6 += 1
                                                                else:
                                                                    offset_6 = -1
                                                                    break

                                                                #print('safe exit rep rule', offset_5, offset_6)
                                                                break
                                                            #print('exit rep rule', offset_5, offset_6)
                                                            if offset_6 == -1:
                                                                break
                                                            if offset_5 == offset_6: break
                                                            if children_8 is not None and children_8 is not None:
                                                                children_7.extend(children_8)
                                                            offset_5 = offset_6
                                                            column_5 = column_6
                                                            indent_column_5 = indent_column_6
                                                            partial_tab_offset_5 = partial_tab_offset_6
                                                            partial_tab_width_5 = partial_tab_width_6
                                                            count_3 += 1
                                                        if count_3 < value_3:
                                                        #    print('min exit', offset_5)
                                                            offset_5 = -1
                                                            break
                                                        if offset_5 == -1:
                                                            break
                                                        value_9 = count_3

                                                        break
                                                    if offset_5 != -1:
                                                        offset_4 = -1
                                                        break

                                                    offset_4, column_4, partial_tab_offset_4, partial_tab_width_4 = self.parse_inline_element(buf, buf_start, buf_eof, offset_4, column_4, indent_column_4, prefix_0, children_6, partial_tab_offset_4, partial_tab_width_4)
                                                    if offset_4 == -1: break


                                                    #print('safe exit rep rule', offset_3, offset_4)
                                                    break
                                                #print('exit rep rule', offset_3, offset_4)
                                                if offset_4 == -1:
                                                    break
                                                if offset_3 == offset_4: break
                                                if children_6 is not None and children_6 is not None:
                                                    children_5.extend(children_6)
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                count_2 += 1
                                            if offset_3 == -1:
                                                break
                                            value_7 = count_2

                                            #print('safe exit rep rule', offset_2, offset_3)
                                            break
                                        #print('exit rep rule', offset_2, offset_3)
                                        if offset_3 == -1:
                                            break
                                        if offset_2 == offset_3: break
                                        if children_5 is not None and children_5 is not None:
                                            children_4.extend(children_5)
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        count_1 += 1
                                        break
                                    if offset_2 == -1:
                                        break
                                    value_5 = count_1

                                    count_1 = 0
                                    while True:
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_2, offset_3)
                                            while True: # start choice
                                                offset_4 = offset_3
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                children_6 = [] if children_5 is not None else None
                                                while True: # case
                                                    offset_4, column_4, partial_tab_offset_4, partial_tab_width_4 = self.parse_linebreak(buf, buf_start, buf_eof, offset_4, column_4, indent_column_4, prefix_0, children_6, partial_tab_offset_4, partial_tab_width_4)
                                                    if offset_4 == -1: break



                                                    break
                                                if offset_4 != -1:
                                                    offset_3 = offset_4
                                                    column_3 = column_4
                                                    indent_column_3 = indent_column_4
                                                    partial_tab_offset_3 = partial_tab_offset_4
                                                    partial_tab_width_3 = partial_tab_width_4
                                                    if children_6 is not None and children_6 is not None:
                                                        children_5.extend(children_6)
                                                    break
                                                # end case
                                                offset_4 = offset_3
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                children_6 = [] if children_5 is not None else None
                                                while True: # case
                                                    children_7 = []
                                                    value_11 = Node(None, offset_4, offset_4, column_4, column_4, children_7, None)
                                                    while True: # start capture
                                                        count_2 = 0
                                                        while offset_4 < buf_eof:
                                                            codepoint = buf[offset_4]
                                                            if codepoint in ' \t':
                                                                if codepoint == '\t':
                                                                    if offset_4 == partial_tab_offset_4 and partial_tab_width_4 > 0:
                                                                        width = partial_tab_width_4
                                                                    else:
                                                                        width  = (self.tabstop-((column_4)%self.tabstop));
                                                                    count_2 += width
                                                                    column_4 += width
                                                                    offset_4 += 1
                                                                else:
                                                                    count_2 += 1
                                                                    column_4 += 1
                                                                    offset_4 += 1
                                                            else:
                                                                break

                                                        break
                                                    if offset_4 == -1:
                                                        break
                                                    value_11.name = 'remark_whitespace'
                                                    value_11.end = offset_4
                                                    value_11.end_column = column_4
                                                    value_11.value = None
                                                    children_6.append(value_11)


                                                    break
                                                if offset_4 != -1:
                                                    offset_3 = offset_4
                                                    column_3 = column_4
                                                    indent_column_3 = indent_column_4
                                                    partial_tab_offset_3 = partial_tab_offset_4
                                                    partial_tab_width_3 = partial_tab_width_4
                                                    if children_6 is not None and children_6 is not None:
                                                        children_5.extend(children_6)
                                                    break
                                                # end case
                                                offset_3 = -1 # no more choices
                                                break # end choice
                                            if offset_3 == -1:
                                                break

                                            #print('safe exit rep rule', offset_2, offset_3)
                                            break
                                        #print('exit rep rule', offset_2, offset_3)
                                        if offset_3 == -1:
                                            break
                                        if offset_2 == offset_3: break
                                        if children_5 is not None and children_5 is not None:
                                            children_4.extend(children_5)
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        count_1 += 1
                                    if offset_2 == -1:
                                        break
                                    value_10 = count_1

                                    break
                                if offset_2 == -1:
                                    break
                                value_4.name = 'directive_span'
                                value_4.end = offset_2
                                value_4.end_column = column_2
                                value_4.value = None
                                children_3.append(value_4)

                                count_1 = 0
                                while count_1 < value_3:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        if buf[offset_3:offset_3+1] == ']':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_1 += 1
                                if count_1 < value_3:
                                #    print('min exit', offset_2)
                                    offset_2 = -1
                                    break
                                if offset_2 == -1:
                                    break
                                value_12 = count_1

                                children_4 = []
                                value_13 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                while True: # start capture
                                    count_1 = 0
                                    while count_1 < 1:
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_2, offset_3)
                                            if buf[offset_3:offset_3+1] == '{':
                                                offset_3 += 1
                                                column_3 += 1
                                            else:
                                                offset_3 = -1
                                                break

                                            offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_directive_args(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                            if offset_3 == -1: break


                                            if buf[offset_3:offset_3+1] == '}':
                                                offset_3 += 1
                                                column_3 += 1
                                            else:
                                                offset_3 = -1
                                                break

                                            #print('safe exit rep rule', offset_2, offset_3)
                                            break
                                        #print('exit rep rule', offset_2, offset_3)
                                        if offset_3 == -1:
                                            break
                                        if offset_2 == offset_3: break
                                        if children_5 is not None and children_5 is not None:
                                            children_4.extend(children_5)
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        count_1 += 1
                                        break
                                    if offset_2 == -1:
                                        break
                                    value_14 = count_1

                                    break
                                if offset_2 == -1:
                                    break
                                value_13.name = 'directive_args'
                                value_13.end = offset_2
                                value_13.end_column = column_2
                                value_13.value = None
                                children_3.append(value_13)


                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                break
                            # end case
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True: # case
                                children_4 = []
                                value_15 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                while True: # start capture
                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_inner_code_span(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break


                                    break
                                if offset_2 == -1:
                                    break
                                value_15.name = 'directive_code_span'
                                value_15.end = offset_2
                                value_15.end_column = column_2
                                value_15.value = None
                                children_3.append(value_15)

                                children_4 = []
                                value_16 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                while True: # start capture
                                    count_1 = 0
                                    while count_1 < 1:
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_2, offset_3)
                                            if buf[offset_3:offset_3+1] == '{':
                                                offset_3 += 1
                                                column_3 += 1
                                            else:
                                                offset_3 = -1
                                                break

                                            offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_directive_args(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                            if offset_3 == -1: break


                                            if buf[offset_3:offset_3+1] == '}':
                                                offset_3 += 1
                                                column_3 += 1
                                            else:
                                                offset_3 = -1
                                                break

                                            #print('safe exit rep rule', offset_2, offset_3)
                                            break
                                        #print('exit rep rule', offset_2, offset_3)
                                        if offset_3 == -1:
                                            break
                                        if offset_2 == offset_3: break
                                        if children_5 is not None and children_5 is not None:
                                            children_4.extend(children_5)
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        count_1 += 1
                                        break
                                    if offset_2 == -1:
                                        break
                                    value_17 = count_1

                                    break
                                if offset_2 == -1:
                                    break
                                value_16.name = 'directive_args'
                                value_16.end = offset_2
                                value_16.end_column = column_2
                                value_16.value = None
                                children_3.append(value_16)


                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                break
                            # end case
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True: # case
                                children_3.append(Node('value', offset_2, offset_2, column_2, column_2, (), None))

                                children_4 = []
                                value_18 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                while True: # start capture
                                    if buf[offset_2:offset_2+1] == '{':
                                        offset_2 += 1
                                        column_2 += 1
                                    else:
                                        offset_2 = -1
                                        break

                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_directive_args(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break


                                    if buf[offset_2:offset_2+1] == '}':
                                        offset_2 += 1
                                        column_2 += 1
                                    else:
                                        offset_2 = -1
                                        break

                                    break
                                if offset_2 == -1:
                                    break
                                value_18.name = 'directive_args'
                                value_18.end = offset_2
                                value_18.end_column = column_2
                                value_18.value = None
                                children_3.append(value_18)


                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                break
                            # end case
                            offset_1 = -1 # no more choices
                            break # end choice
                        if offset_1 == -1:
                            break

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                    break
                if offset_0 == -1:
                    break
                value_2 = count_0

                break
            if offset_0 == -1:
                break
            value_0.name = 'inline_directive'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_raw_inline_directive(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            if buf[offset_0:offset_0+6] == '$raw::':
                offset_0 += 6
                column_0 += 6
            else:
                offset_0 = -1
                break

            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                children_2 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_remark_identifier(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_2, partial_tab_offset_0, partial_tab_width_0)
                    if offset_0 == -1: break


                    break
                if offset_0 == -1:
                    break
                value_1.name = 'directive_name'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_1.append(value_1)

                while True: # start reject
                    children_2 = []
                    offset_1 = offset_0 + 0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    if buf[offset_1:offset_1+1] == ':':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    break
                if offset_1 != -1:
                    offset_0 = -1
                    break

                children_2 = []
                value_2 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_code_span(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_2, partial_tab_offset_0, partial_tab_width_0)
                    if offset_0 == -1: break


                    break
                if offset_0 == -1:
                    break
                value_2.name = 'directive_code_span'
                value_2.end = offset_0
                value_2.end_column = column_0
                value_2.value = None
                children_1.append(value_2)

                children_2 = []
                value_3 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    count_0 = 0
                    while count_0 < 1:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_3 = [] if children_2 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if buf[offset_1:offset_1+1] == '{':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            if buf[offset_1:offset_1+1] == '}':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_3 is not None and children_3 is not None:
                            children_2.extend(children_3)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                        break
                    if offset_0 == -1:
                        break
                    value_4 = count_0

                    break
                if offset_0 == -1:
                    break
                value_3.name = 'directive_args'
                value_3.end = offset_0
                value_3.end_column = column_0
                value_3.value = None
                children_1.append(value_3)

                break
            if offset_0 == -1:
                break
            value_0.name = 'raw_inline_directive'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_horizontal_rule(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                _match = regex_8.match(buf, offset_0)
                if _match:
                    _end = _match.end()
                    column_0 += (_end - offset_0)
                    offset_0 = _end
                else:
                    offset_0 = -1
                    break

                children_2 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    count_0 = 0
                    while count_0 < 1:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_3 = [] if children_2 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            count_1 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_1 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_1 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break
                            if count_1 < 1:
                                offset_1 = -1
                                break

                            if buf[offset_1:offset_1+1] == '{':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            if buf[offset_1:offset_1+1] == '}':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_3 is not None and children_3 is not None:
                            children_2.extend(children_3)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                        break
                    if offset_0 == -1:
                        break
                    value_2 = count_0

                    break
                if offset_0 == -1:
                    break
                value_1.name = 'directive_args'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_1.append(value_1)

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_horizontal_rule'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            count_0 = 0
            while offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            if offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                    offset_0 +=2
                    column_0 = 0
                    indent_column_0[:] = (0, )
                elif codepoint in '\r\n':
                    offset_0 +=1
                    column_0 = 0
                    indent_column_0[:] = (0, )
                else:
                    offset_0 = -1
                    break



            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_atx_heading_indent(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            _match = regex_9.match(buf, offset_0)
            if _match:
                _end = _match.end()
                column_0 += (_end - offset_0)
                offset_0 = _end
            else:
                offset_0 = -1
                break

            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof and count_0 < 1:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                if count_0 + width > 1:
                                    new_width = 1 - count_0
                                    count_0 += new_width
                                    column_1 += new_width
                                    partial_tab_offset_1 = offset_1
                                    partial_tab_width_1 = width - new_width
                                    break
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break
                    if count_0 < 1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    while True: # start lookahed
                        children_2 = []
                        offset_2 = offset_1 + 0
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        if offset_2 < buf_eof:
                            codepoint = buf[offset_2]
                            if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                offset_2 +=2
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_2 +=1
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            else:
                                offset_2 = -1
                                break
                        else:
                            offset_2 = -1
                            break

                        break
                    if offset_2 == -1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_atx_heading(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            value_0 = 0
            offset_1 = offset_0
            while True: # start backref
                children_1 = []
                value_1 = Node(None, offset_1, offset_1, column_0, column_0, children_1, None)
                while True: # start capture
                    offset_2 = offset_1
                    column_1 = column_0
                    while True: # start count
                        _match = regex_9.match(buf, offset_2)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_2)
                            offset_2 = _end
                        else:
                            offset_2 = -1
                            break

                        break
                    if offset_2 == -1:
                        offset_1 = -1; break
                    value_2 = buf[offset_1:offset_2].count('#')
                    offset_1 = offset_2
                    column_0 = column_1

                    value_0 = value_2

                    children_2 = []
                    value_3 = Node(None, offset_1, offset_1, column_0, column_0, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while count_0 < 1:
                            offset_2 = offset_1
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break
                                if count_1 < 1:
                                    offset_2 = -1
                                    break

                                if buf[offset_2:offset_2+1] == '{':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                                if offset_2 == -1: break


                                if buf[offset_2:offset_2+1] == '}':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                            break
                        if offset_1 == -1:
                            break
                        value_4 = count_0

                        break
                    if offset_1 == -1:
                        break
                    value_3.name = 'directive_args'
                    value_3.end = offset_1
                    value_3.end_column = column_0
                    value_3.value = None
                    children_1.append(value_3)

                    while True: # start choice
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break
                            if count_0 < 1:
                                offset_2 = -1
                                break

                            prefix_0.append((self.parse_atx_heading_indent, None))
                            indent_column_1.append(column_1)
                            while True:
                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inner_para(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                                if offset_2 == -1: break


                                break
                            prefix_0.pop()
                            if len(indent_column_1) > 1: indent_column_1.pop()
                            if offset_2 == -1: break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    break
                if offset_1 == -1:
                    break
                value_1.name = 'remark_heading'
                value_1.end = offset_1
                value_1.end_column = column_0
                value_1.value = value_0
                children_0.append(value_1)

                break
            if offset_1 == -1:
                offset_0 = -1
                break
            offset_0 = offset_1


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_start_prose_para(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            if buf[offset_0:offset_0+1] == '|':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break

            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof and count_0 < 1:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                if count_0 + width > 1:
                                    new_width = 1 - count_0
                                    count_0 += new_width
                                    column_1 += new_width
                                    partial_tab_offset_1 = offset_1
                                    partial_tab_width_1 = width - new_width
                                    break
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break
                    if count_0 < 1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    while True: # start lookahed
                        children_2 = []
                        offset_2 = offset_1 + 0
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        count_0 = 0
                        while offset_2 < buf_eof:
                            codepoint = buf[offset_2]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                        width = partial_tab_width_2
                                    else:
                                        width  = (self.tabstop-((column_2)%self.tabstop));
                                    count_0 += width
                                    column_2 += width
                                    offset_2 += 1
                                else:
                                    count_0 += 1
                                    column_2 += 1
                                    offset_2 += 1
                            else:
                                break

                        if offset_2 < buf_eof:
                            codepoint = buf[offset_2]
                            if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                offset_2 +=2
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_2 +=1
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            else:
                                offset_2 = -1
                                break


                        break
                    if offset_2 == -1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_prose_para(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_prose_para(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_prose_paragraph'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inner_prose_para(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_start_prose_para(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0)
            if offset_0 == -1: break


            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                count_0 = 0
                while count_0 < 1:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        count_1 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_1 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_1 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if buf[offset_1:offset_1+1] == '{':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        if buf[offset_1:offset_1+1] == '}':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        count_1 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_1 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_1 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break


                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_prose_para(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                    break
                if offset_0 == -1:
                    break
                value_1 = count_0

                break
            if offset_0 == -1:
                break
            value_0.name = 'directive_args'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            count_0 = -1
            # print(count_0, 'indent')
            def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                saw_tab, saw_not_tab = False, False
                start_column, start_offset = column, offset
                if count < 0: offset = -1
                while count > 0 and offset < buf_eof:
                    codepoint = buf[offset];
                    if codepoint in ' \t':
                        if not allow_mixed_indent:
                            if codepoint == '\t': saw_tab = True
                            else: saw_not_tab = True
                            if saw_tab and saw_not_tab:
                                 offset = -1; break
                        if codepoint != '\t':
                            column += 1
                            offset += 1
                            count -=1
                        else:
                            if offset == partial_tab_offset and partial_tab_width > 0:
                                width = partial_tab_width
                            else:
                                width  = (self.tabstop-((column)%self.tabstop));
                            if width <= count:
                                column += width
                                offset += 1
                                count -= width
                            else:
                                partial_tab_offset = offset
                                partial_tab_width = width-count
                                column += count
                                count -= width
                                break
                    elif codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        break
                    elif codepoint in '\r\n':
                        break
                    else:
                        offset = -1
                        break
                return offset, column, partial_tab_offset, partial_tab_width
            prefix_0.append((_indent, None))
            indent_column_0.append(column_0)
            while True:
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_para(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                break
            prefix_0.pop()
            if len(indent_column_0) > 1: indent_column_0.pop()
            if offset_0 == -1: break

            count_0 = 0
            while True:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    children_2 = []
                    value_3 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_3.name = 'remark_prose_hardbreak'
                    value_3.end = offset_1
                    value_3.end_column = column_1
                    value_3.value = None
                    children_1.append(value_3)

                    if column_1 != 0:
                        offset_1 = -1
                        break
                    # print('start')
                    for indent, dedent in prefix_0:
                        # print(indent, dedent)
                        _children, _prefix = [], []
                        offset_2 = offset_1
                        offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                        if _prefix or _children:
                           raise Exception('bar')
                        if offset_2 == -1:
                            offset_1 = -1
                            break
                        offset_1 = offset_2
                        indent_column_1.append(column_1)
                    if offset_1 == -1:
                        break

                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_prose_para(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break


                    count_1 = -1
                    # print(count_1, 'indent')
                    def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_1, allow_mixed_indent=self.allow_mixed_indent):
                        saw_tab, saw_not_tab = False, False
                        start_column, start_offset = column, offset
                        if count < 0: offset = -1
                        while count > 0 and offset < buf_eof:
                            codepoint = buf[offset];
                            if codepoint in ' \t':
                                if not allow_mixed_indent:
                                    if codepoint == '\t': saw_tab = True
                                    else: saw_not_tab = True
                                    if saw_tab and saw_not_tab:
                                         offset = -1; break
                                if codepoint != '\t':
                                    column += 1
                                    offset += 1
                                    count -=1
                                else:
                                    if offset == partial_tab_offset and partial_tab_width > 0:
                                        width = partial_tab_width
                                    else:
                                        width  = (self.tabstop-((column)%self.tabstop));
                                    if width <= count:
                                        column += width
                                        offset += 1
                                        count -= width
                                    else:
                                        partial_tab_offset = offset
                                        partial_tab_width = width-count
                                        column += count
                                        count -= width
                                        break
                            elif codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                break
                            elif codepoint in '\r\n':
                                break
                            else:
                                offset = -1
                                break
                        return offset, column, partial_tab_offset, partial_tab_width
                    prefix_0.append((_indent, None))
                    indent_column_1.append(column_1)
                    while True:
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inner_para(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        break
                    prefix_0.pop()
                    if len(indent_column_1) > 1: indent_column_1.pop()
                    if offset_1 == -1: break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if offset_0 == -1:
                break
            value_2 = count_0

            if offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                    offset_0 +=2
                    column_0 = 0
                    indent_column_0[:] = (0, )
                elif codepoint in '\r\n':
                    offset_0 +=1
                    column_0 = 0
                    indent_column_0[:] = (0, )
                else:
                    offset_0 = -1
                    break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_start_code_block(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            if buf[offset_0:offset_0+3] == '```':
                offset_0 += 3
                column_0 += 3
            else:
                offset_0 = -1
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_code_block(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            count_0 = column_0 - indent_column_0[len(indent_column_0)-1]
            # print(count_0, 'indent')
            def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                saw_tab, saw_not_tab = False, False
                start_column, start_offset = column, offset
                if count < 0: offset = -1
                while count > 0 and offset < buf_eof:
                    codepoint = buf[offset];
                    if codepoint in ' \t':
                        if not allow_mixed_indent:
                            if codepoint == '\t': saw_tab = True
                            else: saw_not_tab = True
                            if saw_tab and saw_not_tab:
                                 offset = -1; break
                        if codepoint != '\t':
                            column += 1
                            offset += 1
                            count -=1
                        else:
                            if offset == partial_tab_offset and partial_tab_width > 0:
                                width = partial_tab_width
                            else:
                                width  = (self.tabstop-((column)%self.tabstop));
                            if width <= count:
                                column += width
                                offset += 1
                                count -= width
                            else:
                                partial_tab_offset = offset
                                partial_tab_width = width-count
                                column += count
                                count -= width
                                break
                    elif codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        break
                    elif codepoint in '\r\n':
                        break
                    else:
                        offset = -1
                        break
                return offset, column, partial_tab_offset, partial_tab_width
            prefix_0.append((_indent, None))
            indent_column_0.append(column_0)
            while True:
                children_1 = []
                value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
                while True: # start capture
                    offset_1 = offset_0
                    column_1 = column_0
                    while True: # start count
                        _match = regex_10.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        offset_0 = -1; break
                    value_1 = buf[offset_0:offset_1].count('`')
                    offset_0 = offset_1
                    column_0 = column_1

                    while True: # start choice
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_3 = []
                            value_2 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while offset_1 < buf_eof:
                                    codepoint = buf[offset_1]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_0 += width
                                            column_1 += width
                                            offset_1 += 1
                                        else:
                                            count_0 += 1
                                            column_1 += 1
                                            offset_1 += 1
                                    else:
                                        break
                                if count_0 < 1:
                                    offset_1 = -1
                                    break

                                if buf[offset_1:offset_1+1] == '{':
                                    offset_1 += 1
                                    column_1 += 1
                                else:
                                    offset_1 = -1
                                    break

                                offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                                if offset_1 == -1: break


                                if buf[offset_1:offset_1+1] == '}':
                                    offset_1 += 1
                                    column_1 += 1
                                else:
                                    offset_1 = -1
                                    break

                                break
                            if offset_1 == -1:
                                break
                            value_2.name = 'directive_args'
                            value_2.end = offset_1
                            value_2.end_column = column_1
                            value_2.value = None
                            children_2.append(value_2)


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_3 = []
                            value_3 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while offset_1 < buf_eof:
                                    codepoint = buf[offset_1]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_0 += width
                                            column_1 += width
                                            offset_1 += 1
                                        else:
                                            count_0 += 1
                                            column_1 += 1
                                            offset_1 += 1
                                    else:
                                        break

                                offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_remark_identifier(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                                if offset_1 == -1: break


                                break
                            if offset_1 == -1:
                                break
                            value_3.name = 'code_string'
                            value_3.end = offset_1
                            value_3.end_column = column_1
                            value_3.value = None
                            children_2.append(value_3)


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_2.append(Node('value', offset_1, offset_1, column_1, column_1, (), None))


                            break
                        if offset_1 != -1:
                            offset_0 = offset_1
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_0 = -1 # no more choices
                        break # end choice
                    if offset_0 == -1:
                        break

                    count_0 = 0
                    while offset_0 < buf_eof:
                        codepoint = buf[offset_0]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                    width = partial_tab_width_0
                                else:
                                    width  = (self.tabstop-((column_0)%self.tabstop));
                                count_0 += width
                                column_0 += width
                                offset_0 += 1
                            else:
                                count_0 += 1
                                column_0 += 1
                                offset_0 += 1
                        else:
                            break

                    if offset_0 < buf_eof:
                        codepoint = buf[offset_0]
                        if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                            offset_0 +=2
                            column_0 = 0
                            indent_column_0[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_0 +=1
                            column_0 = 0
                            indent_column_0[:] = (0, )
                        else:
                            offset_0 = -1
                            break


                    count_0 = 0
                    while True:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if column_1 != 0:
                                offset_1 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_2 = offset_1
                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_2 == -1:
                                    offset_1 = -1
                                    break
                                offset_1 = offset_2
                                indent_column_1.append(column_1)
                            if offset_1 == -1:
                                break

                            while True: # start reject
                                children_3 = []
                                offset_2 = offset_1 + 0
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                count_1 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        if buf[offset_3:offset_3+1] == '`':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_1 += 1
                                if count_1 < value_1:
                                #    print('min exit', offset_2)
                                    offset_2 = -1
                                    break
                                if offset_2 == -1:
                                    break
                                value_5 = count_1

                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_1 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                if offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    else:
                                        offset_2 = -1
                                        break


                                break
                            if offset_2 != -1:
                                offset_1 = -1
                                break

                            count_1 = 0
                            while True:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    while True: # start choice
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_4 = [] if children_3 is not None else None
                                        while True: # case
                                            children_5 = []
                                            value_7 = Node(None, offset_3, offset_3, column_3, column_3, children_5, None)
                                            while True: # start capture
                                                count_2 = 0
                                                while offset_3 < buf_eof:
                                                    codepoint = buf[offset_3]
                                                    if codepoint in ' \t':
                                                        if codepoint == '\t':
                                                            if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                                width = partial_tab_width_3
                                                            else:
                                                                width  = (self.tabstop-((column_3)%self.tabstop));
                                                            count_2 += width
                                                            column_3 += width
                                                            offset_3 += 1
                                                        else:
                                                            count_2 += 1
                                                            column_3 += 1
                                                            offset_3 += 1
                                                    else:
                                                        break
                                                if count_2 < 1:
                                                    offset_3 = -1
                                                    break

                                                break
                                            if offset_3 == -1:
                                                break
                                            value_7.name = 'code_whitespace'
                                            value_7.end = offset_3
                                            value_7.end_column = column_3
                                            value_7.value = None
                                            children_4.append(value_7)


                                            break
                                        if offset_3 != -1:
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_4 is not None and children_4 is not None:
                                                children_3.extend(children_4)
                                            break
                                        # end case
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_4 = [] if children_3 is not None else None
                                        while True: # case
                                            children_5 = []
                                            value_8 = Node(None, offset_3, offset_3, column_3, column_3, children_5, None)
                                            while True: # start capture
                                                _match = regex_11.match(buf, offset_3)
                                                if _match:
                                                    _end = _match.end()
                                                    column_3 += (_end - offset_3)
                                                    offset_3 = _end
                                                else:
                                                    offset_3 = -1
                                                    break

                                                break
                                            if offset_3 == -1:
                                                break
                                            value_8.name = 'code_text'
                                            value_8.end = offset_3
                                            value_8.end_column = column_3
                                            value_8.value = None
                                            children_4.append(value_8)


                                            break
                                        if offset_3 != -1:
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_4 is not None and children_4 is not None:
                                                children_3.extend(children_4)
                                            break
                                        # end case
                                        offset_2 = -1 # no more choices
                                        break # end choice
                                    if offset_2 == -1:
                                        break

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_1 += 1
                            if offset_1 == -1:
                                break
                            value_6 = count_1

                            children_3 = []
                            value_9 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                            while True: # start capture
                                count_1 = 0
                                while offset_1 < buf_eof:
                                    codepoint = buf[offset_1]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_1 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_1 += 1
                                    else:
                                        break

                                if offset_1 < buf_eof:
                                    codepoint = buf[offset_1]
                                    if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                        offset_1 +=2
                                        column_1 = 0
                                        indent_column_1[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_1 +=1
                                        column_1 = 0
                                        indent_column_1[:] = (0, )
                                    else:
                                        offset_1 = -1
                                        break


                                break
                            if offset_1 == -1:
                                break
                            value_9.name = 'code_text'
                            value_9.end = offset_1
                            value_9.end_column = column_1
                            value_9.value = None
                            children_2.append(value_9)

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                    if offset_0 == -1:
                        break
                    value_4 = count_0

                    if column_0 != 0:
                        offset_0 = -1
                        break
                    # print('start')
                    for indent, dedent in prefix_0:
                        # print(indent, dedent)
                        _children, _prefix = [], []
                        offset_1 = offset_0
                        offset_1, column_0, partial_tab_offset_0, partial_tab_width_0 = indent(buf, buf_start, buf_eof, offset_1, column_0, indent_column_0, _prefix, _children, partial_tab_offset_0, partial_tab_width_0)
                        if _prefix or _children:
                           raise Exception('bar')
                        if offset_1 == -1:
                            offset_0 = -1
                            break
                        offset_0 = offset_1
                        indent_column_0.append(column_0)
                    if offset_0 == -1:
                        break

                    count_0 = 0
                    while True:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if buf[offset_1:offset_1+1] == '`':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                    if count_0 < value_1:
                    #    print('min exit', offset_0)
                        offset_0 = -1
                        break
                    if offset_0 == -1:
                        break
                    value_10 = count_0

                    count_0 = 0
                    while offset_0 < buf_eof:
                        codepoint = buf[offset_0]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                    width = partial_tab_width_0
                                else:
                                    width  = (self.tabstop-((column_0)%self.tabstop));
                                count_0 += width
                                column_0 += width
                                offset_0 += 1
                            else:
                                count_0 += 1
                                column_0 += 1
                                offset_0 += 1
                        else:
                            break

                    count_0 = 0
                    while offset_0 < buf_eof:
                        codepoint = buf[offset_0]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                    width = partial_tab_width_0
                                else:
                                    width  = (self.tabstop-((column_0)%self.tabstop));
                                count_0 += width
                                column_0 += width
                                offset_0 += 1
                            else:
                                count_0 += 1
                                column_0 += 1
                                offset_0 += 1
                        else:
                            break

                    if offset_0 < buf_eof:
                        codepoint = buf[offset_0]
                        if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                            offset_0 +=2
                            column_0 = 0
                            indent_column_0[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_0 +=1
                            column_0 = 0
                            indent_column_0[:] = (0, )
                        else:
                            offset_0 = -1
                            break


                    break
                if offset_0 == -1:
                    break
                value_0.name = 'remark_code_block'
                value_0.end = offset_0
                value_0.end_column = column_0
                value_0.value = None
                children_0.append(value_0)

                break
            prefix_0.pop()
            if len(indent_column_0) > 1: indent_column_0.pop()
            if offset_0 == -1: break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_directive_code_block(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_1 = offset_0
                column_1 = column_0
                while True: # start count
                    _match = regex_10.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    break
                if offset_1 == -1:
                    offset_0 = -1; break
                value_1 = buf[offset_0:offset_1].count('`')
                offset_0 = offset_1
                column_0 = column_1

                count_0 = 0
                while offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_0)%self.tabstop));
                            count_0 += width
                            column_0 += width
                            offset_0 += 1
                        else:
                            count_0 += 1
                            column_0 += 1
                            offset_0 += 1
                    else:
                        break

                if offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        offset_0 +=2
                        column_0 = 0
                        indent_column_0[:] = (0, )
                    elif codepoint in '\r\n':
                        offset_0 +=1
                        column_0 = 0
                        indent_column_0[:] = (0, )
                    else:
                        offset_0 = -1
                        break


                count_0 = 0
                while True:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        if column_1 != 0:
                            offset_1 = -1
                            break
                        # print('start')
                        for indent, dedent in prefix_0:
                            # print(indent, dedent)
                            _children, _prefix = [], []
                            offset_2 = offset_1
                            offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                            if _prefix or _children:
                               raise Exception('bar')
                            if offset_2 == -1:
                                offset_1 = -1
                                break
                            offset_1 = offset_2
                            indent_column_1.append(column_1)
                        if offset_1 == -1:
                            break

                        while True: # start reject
                            children_3 = []
                            offset_2 = offset_1 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            count_1 = 0
                            while True:
                                offset_3 = offset_2
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                children_4 = [] if children_3 is not None else None
                                while True:
                                    #print('entry rep rule', offset_2, offset_3)
                                    if buf[offset_3:offset_3+1] == '`':
                                        offset_3 += 1
                                        column_3 += 1
                                    else:
                                        offset_3 = -1
                                        break

                                    #print('safe exit rep rule', offset_2, offset_3)
                                    break
                                #print('exit rep rule', offset_2, offset_3)
                                if offset_3 == -1:
                                    break
                                if offset_2 == offset_3: break
                                if children_4 is not None and children_4 is not None:
                                    children_3.extend(children_4)
                                offset_2 = offset_3
                                column_2 = column_3
                                indent_column_2 = indent_column_3
                                partial_tab_offset_2 = partial_tab_offset_3
                                partial_tab_width_2 = partial_tab_width_3
                                count_1 += 1
                            if count_1 < value_1:
                            #    print('min exit', offset_2)
                                offset_2 = -1
                                break
                            if offset_2 == -1:
                                break
                            value_3 = count_1

                            count_1 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_1 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_1 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break


                            break
                        if offset_2 != -1:
                            offset_1 = -1
                            break

                        count_1 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                while True: # start choice
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        children_5 = []
                                        value_5 = Node(None, offset_3, offset_3, column_3, column_3, children_5, None)
                                        while True: # start capture
                                            count_2 = 0
                                            while offset_3 < buf_eof:
                                                codepoint = buf[offset_3]
                                                if codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                            width = partial_tab_width_3
                                                        else:
                                                            width  = (self.tabstop-((column_3)%self.tabstop));
                                                        count_2 += width
                                                        column_3 += width
                                                        offset_3 += 1
                                                    else:
                                                        count_2 += 1
                                                        column_3 += 1
                                                        offset_3 += 1
                                                else:
                                                    break
                                            if count_2 < 1:
                                                offset_3 = -1
                                                break

                                            break
                                        if offset_3 == -1:
                                            break
                                        value_5.name = 'code_whitespace'
                                        value_5.end = offset_3
                                        value_5.end_column = column_3
                                        value_5.value = None
                                        children_4.append(value_5)


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        children_5 = []
                                        value_6 = Node(None, offset_3, offset_3, column_3, column_3, children_5, None)
                                        while True: # start capture
                                            _match = regex_11.match(buf, offset_3)
                                            if _match:
                                                _end = _match.end()
                                                column_3 += (_end - offset_3)
                                                offset_3 = _end
                                            else:
                                                offset_3 = -1
                                                break

                                            break
                                        if offset_3 == -1:
                                            break
                                        value_6.name = 'code_text'
                                        value_6.end = offset_3
                                        value_6.end_column = column_3
                                        value_6.value = None
                                        children_4.append(value_6)


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_2 = -1 # no more choices
                                    break # end choice
                                if offset_2 == -1:
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                        if offset_1 == -1:
                            break
                        value_4 = count_1

                        children_3 = []
                        value_7 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                        while True: # start capture
                            count_1 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_1 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_1 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break


                            break
                        if offset_1 == -1:
                            break
                        value_7.name = 'code_text'
                        value_7.end = offset_1
                        value_7.end_column = column_1
                        value_7.value = None
                        children_2.append(value_7)

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if offset_0 == -1:
                    break
                value_2 = count_0

                if column_0 != 0:
                    offset_0 = -1
                    break
                # print('start')
                for indent, dedent in prefix_0:
                    # print(indent, dedent)
                    _children, _prefix = [], []
                    offset_1 = offset_0
                    offset_1, column_0, partial_tab_offset_0, partial_tab_width_0 = indent(buf, buf_start, buf_eof, offset_1, column_0, indent_column_0, _prefix, _children, partial_tab_offset_0, partial_tab_width_0)
                    if _prefix or _children:
                       raise Exception('bar')
                    if offset_1 == -1:
                        offset_0 = -1
                        break
                    offset_0 = offset_1
                    indent_column_0.append(column_0)
                if offset_0 == -1:
                    break

                count_0 = 0
                while True:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        if buf[offset_1:offset_1+1] == '`':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if count_0 < value_1:
                #    print('min exit', offset_0)
                    offset_0 = -1
                    break
                if offset_0 == -1:
                    break
                value_8 = count_0

                count_0 = 0
                while offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_0)%self.tabstop));
                            count_0 += width
                            column_0 += width
                            offset_0 += 1
                        else:
                            count_0 += 1
                            column_0 += 1
                            offset_0 += 1
                    else:
                        break

                count_0 = 0
                while offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_0)%self.tabstop));
                            count_0 += width
                            column_0 += width
                            offset_0 += 1
                        else:
                            count_0 += 1
                            column_0 += 1
                            offset_0 += 1
                    else:
                        break

                if offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        offset_0 +=2
                        column_0 = 0
                        indent_column_0[:] = (0, )
                    elif codepoint in '\r\n':
                        offset_0 +=1
                        column_0 = 0
                        indent_column_0[:] = (0, )
                    else:
                        offset_0 = -1
                        break


                break
            if offset_0 == -1:
                break
            value_0.name = 'directive_code'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_start_blockquote(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            if buf[offset_0:offset_0+1] == '>':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break

            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof and count_0 < 1:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                if count_0 + width > 1:
                                    new_width = 1 - count_0
                                    count_0 += new_width
                                    column_1 += new_width
                                    partial_tab_offset_1 = offset_1
                                    partial_tab_width_1 = width - new_width
                                    break
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break
                    if count_0 < 1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    while True: # start lookahed
                        children_2 = []
                        offset_2 = offset_1 + 0
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        if offset_2 < buf_eof:
                            codepoint = buf[offset_2]
                            if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                offset_2 +=2
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_2 +=1
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            else:
                                offset_2 = -1
                                break
                        else:
                            offset_2 = -1
                            break

                        break
                    if offset_2 == -1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_blockquote(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_blockquote(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_blockquote'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inner_blockquote(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_start_blockquote(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0)
            if offset_0 == -1: break


            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                count_0 = 0
                while count_0 < 1:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        if buf[offset_1:offset_1+1] == '{':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        if buf[offset_1:offset_1+1] == '}':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                    break
                if offset_0 == -1:
                    break
                value_1 = count_0

                break
            if offset_0 == -1:
                break
            value_0.name = 'directive_args'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    if offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                            offset_1 +=2
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_1 +=1
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        else:
                            offset_1 = -1
                            break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    prefix_0.append((self.parse_start_blockquote, None))
                    indent_column_1.append(column_1)
                    while True:
                        while True: # start choice
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True: # case
                                offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_block_element(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                                if offset_2 == -1: break



                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_2 is not None and children_2 is not None:
                                    children_1.extend(children_2)
                                break
                            # end case
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True: # case
                                offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_para(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                                if offset_2 == -1: break



                                break
                            if offset_2 != -1:
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_2 is not None and children_2 is not None:
                                    children_1.extend(children_2)
                                break
                            # end case
                            offset_1 = -1 # no more choices
                            break # end choice
                        if offset_1 == -1:
                            break

                        break
                    prefix_0.pop()
                    if len(indent_column_1) > 1: indent_column_1.pop()
                    if offset_1 == -1: break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            count_0 = 0
            while True:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    if column_1 != 0:
                        offset_1 = -1
                        break
                    # print('start')
                    for indent, dedent in prefix_0:
                        # print(indent, dedent)
                        _children, _prefix = [], []
                        offset_2 = offset_1
                        offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                        if _prefix or _children:
                           raise Exception('bar')
                        if offset_2 == -1:
                            offset_1 = -1
                            break
                        offset_1 = offset_2
                        indent_column_1.append(column_1)
                    if offset_1 == -1:
                        break

                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_start_blockquote(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break


                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_1 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_1 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_1 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            prefix_0.append((self.parse_start_blockquote, None))
                            indent_column_2.append(column_2)
                            while True:
                                while True: # start choice
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_3 = [] if children_2 is not None else None
                                    while True: # case
                                        offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_block_element(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_3, partial_tab_offset_3, partial_tab_width_3)
                                        if offset_3 == -1: break



                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_3 is not None and children_3 is not None:
                                            children_2.extend(children_3)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_3 = [] if children_2 is not None else None
                                    while True: # case
                                        offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_para(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_3, partial_tab_offset_3, partial_tab_width_3)
                                        if offset_3 == -1: break



                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_3 is not None and children_3 is not None:
                                            children_2.extend(children_3)
                                        break
                                    # end case
                                    offset_2 = -1 # no more choices
                                    break # end choice
                                if offset_2 == -1:
                                    break

                                break
                            prefix_0.pop()
                            if len(indent_column_2) > 1: indent_column_2.pop()
                            if offset_2 == -1: break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if offset_0 == -1:
                break
            value_2 = count_0


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_start_list_block(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            _match = regex_12.match(buf, offset_0)
            if _match:
                _end = _match.end()
                column_0 += (_end - offset_0)
                offset_0 = _end
            else:
                offset_0 = -1
                break

            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    while True: # start lookahed
                        children_2 = []
                        offset_2 = offset_1 + 0
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        count_0 = 0
                        while offset_2 < buf_eof:
                            codepoint = buf[offset_2]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                        width = partial_tab_width_2
                                    else:
                                        width  = (self.tabstop-((column_2)%self.tabstop));
                                    count_0 += width
                                    column_2 += width
                                    offset_2 += 1
                                else:
                                    count_0 += 1
                                    column_2 += 1
                                    offset_2 += 1
                            else:
                                break

                        if offset_2 < buf_eof:
                            codepoint = buf[offset_2]
                            if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                offset_2 +=2
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_2 +=1
                                column_2 = 0
                                indent_column_2[:] = (0, )
                            else:
                                offset_2 = -1
                                break

                        break
                    if offset_2 == -1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    count_0 = 0
                    while offset_1 < buf_eof and count_0 < 1:
                        codepoint = buf[offset_1]
                        if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                            offset_1 +=2
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_1 +=1
                            column_1 = 0
                            indent_column_1[:] = (0, )
                            count_0 +=1
                        elif codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                if count_0 + width > 1:
                                    new_width = 1 - count_0
                                    count_0 += new_width
                                    column_1 += new_width
                                    partial_tab_offset_1 = offset_1
                                    partial_tab_width_1 = width - new_width
                                    break
                                count_0 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_0 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break
                    if count_0 < 1:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_list_item(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            value_0 = 'tight'
            offset_1 = offset_0
            while True: # start backref
                children_1 = []
                value_1 = Node(None, offset_1, offset_1, column_0, column_0, children_1, None)
                value_1.name = 'item_spacing'
                value_1.end = offset_1
                value_1.end_column = column_0
                value_1.value = value_0
                children_0.append(value_1)

                while True: # start choice
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True: # case
                        count_0 = 0
                        while offset_2 < buf_eof:
                            codepoint = buf[offset_2]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_2 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_2 += 1
                            else:
                                break

                        while True: # start reject
                            children_2 = []
                            offset_3 = offset_2 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            if offset_3 < buf_eof:
                                codepoint = buf[offset_3]
                                if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                    offset_3 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_3 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_3 = -1
                                    break
                            else:
                                offset_3 = -1
                                break

                            break
                        if offset_3 != -1:
                            offset_2 = -1
                            break


                        break
                    if offset_2 != -1:
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_1 is not None and children_1 is not None:
                            children_0.extend(children_1)
                        break
                    # end case
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True: # case
                        while True: # start lookahed
                            children_2 = []
                            offset_3 = offset_2 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            count_0 = 0
                            while offset_3 < buf_eof:
                                codepoint = buf[offset_3]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_0 += width
                                        column_2 += width
                                        offset_3 += 1
                                    else:
                                        count_0 += 1
                                        column_2 += 1
                                        offset_3 += 1
                                else:
                                    break

                            if offset_3 < buf_eof:
                                codepoint = buf[offset_3]
                                if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                    offset_3 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_3 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_3 = -1
                                    break
                            else:
                                offset_3 = -1
                                break

                            break
                        if offset_3 == -1:
                            offset_2 = -1
                            break

                        count_0 = column_1 - indent_column_1[len(indent_column_1)-1]
                        # print(count_0, 'indent')
                        def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                            saw_tab, saw_not_tab = False, False
                            start_column, start_offset = column, offset
                            if count < 0: offset = -1
                            while count > 0 and offset < buf_eof:
                                codepoint = buf[offset];
                                if codepoint in ' \t':
                                    if not allow_mixed_indent:
                                        if codepoint == '\t': saw_tab = True
                                        else: saw_not_tab = True
                                        if saw_tab and saw_not_tab:
                                             offset = -1; break
                                    if codepoint != '\t':
                                        column += 1
                                        offset += 1
                                        count -=1
                                    else:
                                        if offset == partial_tab_offset and partial_tab_width > 0:
                                            width = partial_tab_width
                                        else:
                                            width  = (self.tabstop-((column)%self.tabstop));
                                        if width <= count:
                                            column += width
                                            offset += 1
                                            count -= width
                                        else:
                                            partial_tab_offset = offset
                                            partial_tab_width = width-count
                                            column += count
                                            count -= width
                                            break
                                elif codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    break
                                elif codepoint in '\r\n':
                                    break
                                else:
                                    offset = -1
                                    break
                            return offset, column, partial_tab_offset, partial_tab_width
                        prefix_0.append((_indent, None))
                        indent_column_1.append(column_1)
                        while True:
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break
                            else:
                                offset_2 = -1
                                break

                            if column_1 != 0:
                                offset_2 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_3 = offset_2
                                offset_3, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_3, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_3 == -1:
                                    offset_2 = -1
                                    break
                                offset_2 = offset_3
                                indent_column_1.append(column_1)
                            if offset_2 == -1:
                                break

                            break
                        prefix_0.pop()
                        if len(indent_column_1) > 1: indent_column_1.pop()
                        if offset_2 == -1: break

                        value_0 = 'loose'


                        break
                    if offset_2 != -1:
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_1 is not None and children_1 is not None:
                            children_0.extend(children_1)
                        break
                    # end case
                    offset_1 = -1 # no more choices
                    break # end choice
                if offset_1 == -1:
                    break

                while True: # start choice
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True: # case
                        offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_block_element(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                        if offset_2 == -1: break


                        value_0 = 'loose'


                        break
                    if offset_2 != -1:
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_1 is not None and children_1 is not None:
                            children_0.extend(children_1)
                        break
                    # end case
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True: # case
                        offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_para(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                        if offset_2 == -1: break



                        break
                    if offset_2 != -1:
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_1 is not None and children_1 is not None:
                            children_0.extend(children_1)
                        break
                    # end case
                    offset_1 = -1 # no more choices
                    break # end choice
                if offset_1 == -1:
                    break

                count_0 = 0
                while True:
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True:
                        #print('entry rep rule', offset_1, offset_2)
                        if column_1 != 0:
                            offset_2 = -1
                            break
                        # print('start')
                        for indent, dedent in prefix_0:
                            # print(indent, dedent)
                            _children, _prefix = [], []
                            offset_3 = offset_2
                            offset_3, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_3, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                            if _prefix or _children:
                               raise Exception('bar')
                            if offset_3 == -1:
                                offset_2 = -1
                                break
                            offset_2 = offset_3
                            indent_column_1.append(column_1)
                        if offset_2 == -1:
                            break

                        count_1 = 0
                        while count_1 < 1:
                            offset_3 = offset_2
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True:
                                #print('entry rep rule', offset_2, offset_3)
                                count_2 = 0
                                while True:
                                    offset_4 = offset_3
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_3 = [] if children_2 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_3, offset_4)
                                        count_3 = 0
                                        while offset_4 < buf_eof:
                                            codepoint = buf[offset_4]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_3 += width
                                                    column_3 += width
                                                    offset_4 += 1
                                                else:
                                                    count_3 += 1
                                                    column_3 += 1
                                                    offset_4 += 1
                                            else:
                                                break

                                        if offset_4 < buf_eof:
                                            codepoint = buf[offset_4]
                                            if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                                offset_4 +=2
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_4 +=1
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            else:
                                                offset_4 = -1
                                                break
                                        else:
                                            offset_4 = -1
                                            break

                                        if column_3 != 0:
                                            offset_4 = -1
                                            break
                                        # print('start')
                                        for indent, dedent in prefix_0:
                                            # print(indent, dedent)
                                            _children, _prefix = [], []
                                            offset_5 = offset_4
                                            offset_5, column_3, partial_tab_offset_3, partial_tab_width_3 = indent(buf, buf_start, buf_eof, offset_5, column_3, indent_column_3, _prefix, _children, partial_tab_offset_3, partial_tab_width_3)
                                            if _prefix or _children:
                                               raise Exception('bar')
                                            if offset_5 == -1:
                                                offset_4 = -1
                                                break
                                            offset_4 = offset_5
                                            indent_column_3.append(column_3)
                                        if offset_4 == -1:
                                            break

                                        #print('safe exit rep rule', offset_3, offset_4)
                                        break
                                    #print('exit rep rule', offset_3, offset_4)
                                    if offset_4 == -1:
                                        break
                                    if offset_3 == offset_4: break
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    offset_3 = offset_4
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_2 += 1
                                if count_2 < 1:
                                #    print('min exit', offset_3)
                                    offset_3 = -1
                                    break
                                if offset_3 == -1:
                                    break
                                value_4 = count_2

                                while True: # start lookahed
                                    children_3 = []
                                    offset_4 = offset_3 + 0
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    count_2 = 0
                                    while offset_4 < buf_eof:
                                        codepoint = buf[offset_4]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                    width = partial_tab_width_3
                                                else:
                                                    width  = (self.tabstop-((column_3)%self.tabstop));
                                                count_2 += width
                                                column_3 += width
                                                offset_4 += 1
                                            else:
                                                count_2 += 1
                                                column_3 += 1
                                                offset_4 += 1
                                        else:
                                            break

                                    _match = regex_13.match(buf, offset_4)
                                    if _match:
                                        _end = _match.end()
                                        column_3 += (_end - offset_4)
                                        offset_4 = _end
                                    else:
                                        offset_4 = -1
                                        break

                                    break
                                if offset_4 == -1:
                                    offset_3 = -1
                                    break

                                #print('safe exit rep rule', offset_2, offset_3)
                                break
                            #print('exit rep rule', offset_2, offset_3)
                            if offset_3 == -1:
                                break
                            if offset_2 == offset_3: break
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            offset_2 = offset_3
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                            break
                        if offset_2 == -1:
                            break
                        value_3 = count_1

                        while True: # start choice
                            offset_3 = offset_2
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True: # case
                                offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_block_element(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                                if offset_3 == -1: break



                                break
                            if offset_3 != -1:
                                offset_2 = offset_3
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_2 is not None and children_2 is not None:
                                    children_1.extend(children_2)
                                break
                            # end case
                            offset_3 = offset_2
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True: # case
                                offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_para(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                                if offset_3 == -1: break



                                break
                            if offset_3 != -1:
                                offset_2 = offset_3
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_2 is not None and children_2 is not None:
                                    children_1.extend(children_2)
                                break
                            # end case
                            offset_2 = -1 # no more choices
                            break # end choice
                        if offset_2 == -1:
                            break

                        value_0 = 'loose'

                        #print('safe exit rep rule', offset_1, offset_2)
                        break
                    #print('exit rep rule', offset_1, offset_2)
                    if offset_2 == -1:
                        break
                    if offset_1 == offset_2: break
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    offset_1 = offset_2
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if offset_1 == -1:
                    break
                value_2 = count_0

                break
            if offset_1 == -1:
                offset_0 = -1
                break
            offset_0 = offset_1

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_item_label(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                while True: # start choice
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        offset_2 = offset_1
                        column_2 = column_1
                        while True: # start count
                            _match = regex_7.match(buf, offset_2)
                            if _match:
                                _end = _match.end()
                                column_2 += (_end - offset_2)
                                offset_2 = _end
                            else:
                                offset_2 = -1
                                break

                            break
                        if offset_2 == -1:
                            offset_1 = -1; break
                        value_1 = column_2 - column_1
                        offset_1 = offset_2
                        column_1 = column_2

                        while True: # start reject
                            children_3 = []
                            offset_2 = offset_1 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_0 += width
                                        column_2 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_2 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break


                            break
                        if offset_2 != -1:
                            offset_1 = -1
                            break

                        children_3 = []
                        value_2 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                        while True: # start capture
                            count_0 = 0
                            while count_0 < 1:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_4 = [] if children_3 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    while True: # start reject
                                        children_5 = []
                                        offset_3 = offset_2 + 0
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        count_1 = 0
                                        while count_1 < value_1:
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_6 = [] if children_5 is not None else None
                                            while True:
                                                #print('entry rep rule', offset_3, offset_4)
                                                if buf[offset_4:offset_4+1] == ']':
                                                    offset_4 += 1
                                                    column_4 += 1
                                                else:
                                                    offset_4 = -1
                                                    break

                                                #print('safe exit rep rule', offset_3, offset_4)
                                                break
                                            #print('exit rep rule', offset_3, offset_4)
                                            if offset_4 == -1:
                                                break
                                            if offset_3 == offset_4: break
                                            if children_6 is not None and children_6 is not None:
                                                children_5.extend(children_6)
                                            offset_3 = offset_4
                                            column_3 = column_4
                                            indent_column_3 = indent_column_4
                                            partial_tab_offset_3 = partial_tab_offset_4
                                            partial_tab_width_3 = partial_tab_width_4
                                            count_1 += 1
                                        if count_1 < value_1:
                                        #    print('min exit', offset_3)
                                            offset_3 = -1
                                            break
                                        if offset_3 == -1:
                                            break
                                        value_4 = count_1

                                        break
                                    if offset_3 != -1:
                                        offset_2 = -1
                                        break

                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_inline_element(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_4, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break


                                    count_1 = 0
                                    while True:
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True:
                                            #print('entry rep rule', offset_2, offset_3)
                                            while True: # start choice
                                                offset_4 = offset_3
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                children_6 = [] if children_5 is not None else None
                                                while True: # case
                                                    offset_4, column_4, partial_tab_offset_4, partial_tab_width_4 = self.parse_linebreak(buf, buf_start, buf_eof, offset_4, column_4, indent_column_4, prefix_0, children_6, partial_tab_offset_4, partial_tab_width_4)
                                                    if offset_4 == -1: break



                                                    break
                                                if offset_4 != -1:
                                                    offset_3 = offset_4
                                                    column_3 = column_4
                                                    indent_column_3 = indent_column_4
                                                    partial_tab_offset_3 = partial_tab_offset_4
                                                    partial_tab_width_3 = partial_tab_width_4
                                                    if children_6 is not None and children_6 is not None:
                                                        children_5.extend(children_6)
                                                    break
                                                # end case
                                                offset_4 = offset_3
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                children_6 = [] if children_5 is not None else None
                                                while True: # case
                                                    children_7 = []
                                                    value_6 = Node(None, offset_4, offset_4, column_4, column_4, children_7, None)
                                                    while True: # start capture
                                                        count_2 = 0
                                                        while offset_4 < buf_eof:
                                                            codepoint = buf[offset_4]
                                                            if codepoint in ' \t':
                                                                if codepoint == '\t':
                                                                    if offset_4 == partial_tab_offset_4 and partial_tab_width_4 > 0:
                                                                        width = partial_tab_width_4
                                                                    else:
                                                                        width  = (self.tabstop-((column_4)%self.tabstop));
                                                                    count_2 += width
                                                                    column_4 += width
                                                                    offset_4 += 1
                                                                else:
                                                                    count_2 += 1
                                                                    column_4 += 1
                                                                    offset_4 += 1
                                                            else:
                                                                break

                                                        break
                                                    if offset_4 == -1:
                                                        break
                                                    value_6.name = 'remark_whitespace'
                                                    value_6.end = offset_4
                                                    value_6.end_column = column_4
                                                    value_6.value = None
                                                    children_6.append(value_6)


                                                    break
                                                if offset_4 != -1:
                                                    offset_3 = offset_4
                                                    column_3 = column_4
                                                    indent_column_3 = indent_column_4
                                                    partial_tab_offset_3 = partial_tab_offset_4
                                                    partial_tab_width_3 = partial_tab_width_4
                                                    if children_6 is not None and children_6 is not None:
                                                        children_5.extend(children_6)
                                                    break
                                                # end case
                                                offset_3 = -1 # no more choices
                                                break # end choice
                                            if offset_3 == -1:
                                                break

                                            while True: # start reject
                                                children_6 = []
                                                offset_4 = offset_3 + 0
                                                column_4 = column_3
                                                indent_column_4 = list(indent_column_3)
                                                partial_tab_offset_4 = partial_tab_offset_3
                                                partial_tab_width_4 = partial_tab_width_3
                                                count_2 = 0
                                                while count_2 < value_1:
                                                    offset_5 = offset_4
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    children_7 = [] if children_6 is not None else None
                                                    while True:
                                                        #print('entry rep rule', offset_4, offset_5)
                                                        if buf[offset_5:offset_5+1] == ']':
                                                            offset_5 += 1
                                                            column_5 += 1
                                                        else:
                                                            offset_5 = -1
                                                            break

                                                        #print('safe exit rep rule', offset_4, offset_5)
                                                        break
                                                    #print('exit rep rule', offset_4, offset_5)
                                                    if offset_5 == -1:
                                                        break
                                                    if offset_4 == offset_5: break
                                                    if children_7 is not None and children_7 is not None:
                                                        children_6.extend(children_7)
                                                    offset_4 = offset_5
                                                    column_4 = column_5
                                                    indent_column_4 = indent_column_5
                                                    partial_tab_offset_4 = partial_tab_offset_5
                                                    partial_tab_width_4 = partial_tab_width_5
                                                    count_2 += 1
                                                if count_2 < value_1:
                                                #    print('min exit', offset_4)
                                                    offset_4 = -1
                                                    break
                                                if offset_4 == -1:
                                                    break
                                                value_7 = count_2

                                                break
                                            if offset_4 != -1:
                                                offset_3 = -1
                                                break

                                            offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_inline_element(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                            if offset_3 == -1: break


                                            #print('safe exit rep rule', offset_2, offset_3)
                                            break
                                        #print('exit rep rule', offset_2, offset_3)
                                        if offset_3 == -1:
                                            break
                                        if offset_2 == offset_3: break
                                        if children_5 is not None and children_5 is not None:
                                            children_4.extend(children_5)
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        count_1 += 1
                                    if offset_2 == -1:
                                        break
                                    value_5 = count_1

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_4 is not None and children_4 is not None:
                                    children_3.extend(children_4)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                                break
                            if offset_1 == -1:
                                break
                            value_3 = count_0

                            count_0 = 0
                            while True:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_4 = [] if children_3 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    while True: # start choice
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True: # case
                                            offset_3, column_3, partial_tab_offset_3, partial_tab_width_3 = self.parse_linebreak(buf, buf_start, buf_eof, offset_3, column_3, indent_column_3, prefix_0, children_5, partial_tab_offset_3, partial_tab_width_3)
                                            if offset_3 == -1: break



                                            break
                                        if offset_3 != -1:
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_5 is not None and children_5 is not None:
                                                children_4.extend(children_5)
                                            break
                                        # end case
                                        offset_3 = offset_2
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        children_5 = [] if children_4 is not None else None
                                        while True: # case
                                            children_6 = []
                                            value_9 = Node(None, offset_3, offset_3, column_3, column_3, children_6, None)
                                            while True: # start capture
                                                count_1 = 0
                                                while offset_3 < buf_eof:
                                                    codepoint = buf[offset_3]
                                                    if codepoint in ' \t':
                                                        if codepoint == '\t':
                                                            if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                                width = partial_tab_width_3
                                                            else:
                                                                width  = (self.tabstop-((column_3)%self.tabstop));
                                                            count_1 += width
                                                            column_3 += width
                                                            offset_3 += 1
                                                        else:
                                                            count_1 += 1
                                                            column_3 += 1
                                                            offset_3 += 1
                                                    else:
                                                        break

                                                break
                                            if offset_3 == -1:
                                                break
                                            value_9.name = 'remark_whitespace'
                                            value_9.end = offset_3
                                            value_9.end_column = column_3
                                            value_9.value = None
                                            children_5.append(value_9)


                                            break
                                        if offset_3 != -1:
                                            offset_2 = offset_3
                                            column_2 = column_3
                                            indent_column_2 = indent_column_3
                                            partial_tab_offset_2 = partial_tab_offset_3
                                            partial_tab_width_2 = partial_tab_width_3
                                            if children_5 is not None and children_5 is not None:
                                                children_4.extend(children_5)
                                            break
                                        # end case
                                        offset_2 = -1 # no more choices
                                        break # end choice
                                    if offset_2 == -1:
                                        break

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_4 is not None and children_4 is not None:
                                    children_3.extend(children_4)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                            if offset_1 == -1:
                                break
                            value_8 = count_0

                            break
                        if offset_1 == -1:
                            break
                        value_2.name = 'remark_label_span'
                        value_2.end = offset_1
                        value_2.end_column = column_1
                        value_2.value = None
                        children_2.append(value_2)

                        count_0 = 0
                        while count_0 < value_1:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == ']':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_0 += 1
                        if count_0 < value_1:
                        #    print('min exit', offset_1)
                            offset_1 = -1
                            break
                        if offset_1 == -1:
                            break
                        value_10 = count_0


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        children_3 = []
                        value_11 = Node(None, offset_1, offset_1, column_1, column_1, children_3, None)
                        value_11.name = 'remark_label_span'
                        value_11.end = offset_1
                        value_11.end_column = column_1
                        value_11.value = None
                        children_2.append(value_11)


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_0 = -1 # no more choices
                    break # end choice
                if offset_0 == -1:
                    break

                children_2 = []
                value_12 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    count_0 = 0
                    while count_0 < 1:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_3 = [] if children_2 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if buf[offset_1:offset_1+1] == '{':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            if buf[offset_1:offset_1+1] == '}':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            count_1 = 0
                            while offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_1 += width
                                        column_1 += width
                                        offset_1 += 1
                                    else:
                                        count_1 += 1
                                        column_1 += 1
                                        offset_1 += 1
                                else:
                                    break
                            if count_1 < 1:
                                offset_1 = -1
                                break

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_3 is not None and children_3 is not None:
                            children_2.extend(children_3)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                        break
                    if offset_0 == -1:
                        break
                    value_13 = count_0

                    break
                if offset_0 == -1:
                    break
                value_12.name = 'directive_args'
                value_12.end = offset_0
                value_12.end_column = column_0
                value_12.value = None
                children_1.append(value_12)

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_item_label'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inner_list(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            value_0 = 'tight'
            offset_1 = offset_0
            while True: # start backref
                offset_2 = offset_1
                column_1 = column_0
                while True: # start count
                    offset_3 = offset_2
                    column_2 = column_1
                    while True: # start count
                        count_0 = 0
                        while offset_3 < buf_eof and count_0 < 8:
                            codepoint = buf[offset_3]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_3 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                        width = partial_tab_width_0
                                    else:
                                        width  = (self.tabstop-((column_2)%self.tabstop));
                                    if count_0 + width > 8:
                                        new_width = 8 - count_0
                                        count_0 += new_width
                                        column_2 += new_width
                                        partial_tab_offset_0 = offset_3
                                        partial_tab_width_0 = width - new_width
                                        break
                                    count_0 += width
                                    column_2 += width
                                    offset_3 += 1
                                else:
                                    count_0 += 1
                                    column_2 += 1
                                    offset_3 += 1
                            else:
                                break

                        break
                    if offset_3 == -1:
                        offset_2 = -1; break
                    value_2 = column_2 - column_1
                    offset_2 = offset_3
                    column_1 = column_2

                    children_1 = []
                    value_3 = Node(None, offset_2, offset_2, column_1, column_1, children_1, None)
                    while True: # start capture
                        offset_3 = offset_2
                        while True: # start backref
                            _match = regex_12.match(buf, offset_3)
                            if _match:
                                _end = _match.end()
                                column_1 += (_end - offset_3)
                                offset_3 = _end
                            else:
                                offset_3 = -1
                                break

                            break
                        if offset_3 == -1:
                            offset_2 = -1
                            break
                        value_4 = buf[offset_2:offset_3]
                        offset_2 = offset_3

                        break
                    if offset_2 == -1:
                        break
                    value_3.name = 'item_marker'
                    value_3.end = offset_2
                    value_3.end_column = column_1
                    value_3.value = None
                    children_0.append(value_3)

                    break
                if offset_2 == -1:
                    offset_1 = -1; break
                value_1 = column_1 - column_0
                offset_1 = offset_2
                column_0 = column_1

                children_1 = []
                value_5 = Node(None, offset_1, offset_1, column_0, column_0, children_1, None)
                value_5.name = 'list_spacing'
                value_5.end = offset_1
                value_5.end_column = column_0
                value_5.value = value_0
                children_0.append(value_5)

                while True: # start choice
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True: # case
                        while True: # start lookahed
                            children_2 = []
                            offset_3 = offset_2 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            count_0 = 0
                            while offset_3 < buf_eof:
                                codepoint = buf[offset_3]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                            width = partial_tab_width_2
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_0 += width
                                        column_2 += width
                                        offset_3 += 1
                                    else:
                                        count_0 += 1
                                        column_2 += 1
                                        offset_3 += 1
                                else:
                                    break

                            if offset_3 < buf_eof:
                                codepoint = buf[offset_3]
                                if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                    offset_3 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_3 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_3 = -1
                                    break

                            break
                        if offset_3 == -1:
                            offset_2 = -1
                            break


                        break
                    if offset_2 != -1:
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_1 is not None and children_1 is not None:
                            children_0.extend(children_1)
                        break
                    # end case
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True: # case
                        count_0 = 0
                        while offset_2 < buf_eof and count_0 < 1:
                            codepoint = buf[offset_2]
                            if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                offset_2 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_2 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                                count_0 +=1
                            elif codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    if count_0 + width > 1:
                                        new_width = 1 - count_0
                                        count_0 += new_width
                                        column_1 += new_width
                                        partial_tab_offset_1 = offset_2
                                        partial_tab_width_1 = width - new_width
                                        break
                                    count_0 += width
                                    column_1 += width
                                    offset_2 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_2 += 1
                            else:
                                break
                        if count_0 < 1:
                            offset_2 = -1
                            break


                        break
                    if offset_2 != -1:
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_1 is not None and children_1 is not None:
                            children_0.extend(children_1)
                        break
                    # end case
                    offset_1 = -1 # no more choices
                    break # end choice
                if offset_1 == -1:
                    break

                children_1 = []
                value_6 = Node(None, offset_1, offset_1, column_0, column_0, children_1, None)
                while True: # start capture
                    offset_1, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_item_label(buf, buf_start, buf_eof, offset_1, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                    if offset_1 == -1: break


                    while True: # start choice
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 1
                            # print(count_0, 'indent')
                            def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                                saw_tab, saw_not_tab = False, False
                                start_column, start_offset = column, offset
                                if count < 0: offset = -1
                                while count > 0 and offset < buf_eof:
                                    codepoint = buf[offset];
                                    if codepoint in ' \t':
                                        if not allow_mixed_indent:
                                            if codepoint == '\t': saw_tab = True
                                            else: saw_not_tab = True
                                            if saw_tab and saw_not_tab:
                                                 offset = -1; break
                                        if codepoint != '\t':
                                            column += 1
                                            offset += 1
                                            count -=1
                                        else:
                                            if offset == partial_tab_offset and partial_tab_width > 0:
                                                width = partial_tab_width
                                            else:
                                                width  = (self.tabstop-((column)%self.tabstop));
                                            if width <= count:
                                                column += width
                                                offset += 1
                                                count -= width
                                            else:
                                                partial_tab_offset = offset
                                                partial_tab_width = width-count
                                                column += count
                                                count -= width
                                                break
                                    elif codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        break
                                    elif codepoint in '\r\n':
                                        break
                                    else:
                                        offset = -1
                                        break
                                return offset, column, partial_tab_offset, partial_tab_width
                            prefix_0.append((_indent, self.parse_paragraph_breaks))
                            indent_column_1.append(column_1)
                            while True:
                                count_0 = value_1
                                # print(count_0, 'indent')
                                def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                                    saw_tab, saw_not_tab = False, False
                                    start_column, start_offset = column, offset
                                    if count < 0: offset = -1
                                    while count > 0 and offset < buf_eof:
                                        codepoint = buf[offset];
                                        if codepoint in ' \t':
                                            if not allow_mixed_indent:
                                                if codepoint == '\t': saw_tab = True
                                                else: saw_not_tab = True
                                                if saw_tab and saw_not_tab:
                                                     offset = -1; break
                                            if codepoint != '\t':
                                                column += 1
                                                offset += 1
                                                count -=1
                                            else:
                                                if offset == partial_tab_offset and partial_tab_width > 0:
                                                    width = partial_tab_width
                                                else:
                                                    width  = (self.tabstop-((column)%self.tabstop));
                                                if width <= count:
                                                    column += width
                                                    offset += 1
                                                    count -= width
                                                else:
                                                    partial_tab_offset = offset
                                                    partial_tab_width = width-count
                                                    column += count
                                                    count -= width
                                                    break
                                        elif codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                            break
                                        elif codepoint in '\r\n':
                                            break
                                        else:
                                            offset = -1
                                            break
                                    return offset, column, partial_tab_offset, partial_tab_width
                                prefix_0.append((_indent, self.parse_paragraph_breaks))
                                indent_column_1.append(column_1)
                                while True:
                                    offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_list_item(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                                    if offset_2 == -1: break


                                    break
                                prefix_0.pop()
                                if len(indent_column_1) > 1: indent_column_1.pop()
                                if offset_2 == -1: break

                                break
                            prefix_0.pop()
                            if len(indent_column_1) > 1: indent_column_1.pop()
                            if offset_2 == -1: break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            count_0 = 0
                            while offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_1)%self.tabstop));
                                        count_0 += width
                                        column_1 += width
                                        offset_2 += 1
                                    else:
                                        count_0 += 1
                                        column_1 += 1
                                        offset_2 += 1
                                else:
                                    break

                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break

                            children_3 = []
                            value_7 = Node(None, offset_2, offset_2, column_1, column_1, children_3, None)
                            value_7.name = 'item_spacing'
                            value_7.end = offset_2
                            value_7.end_column = column_1
                            value_7.value = 'tight'
                            children_2.append(value_7)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    break
                if offset_1 == -1:
                    break
                value_6.name = 'remark_item'
                value_6.end = offset_1
                value_6.end_column = column_0
                value_6.value = None
                children_0.append(value_6)

                count_0 = 0
                while True:
                    offset_2 = offset_1
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True:
                        #print('entry rep rule', offset_1, offset_2)
                        if column_1 != 0:
                            offset_2 = -1
                            break
                        # print('start')
                        for indent, dedent in prefix_0:
                            # print(indent, dedent)
                            _children, _prefix = [], []
                            offset_3 = offset_2
                            offset_3, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_3, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                            if _prefix or _children:
                               raise Exception('bar')
                            if offset_3 == -1:
                                offset_2 = -1
                                break
                            offset_2 = offset_3
                            indent_column_1.append(column_1)
                        if offset_2 == -1:
                            break

                        count_1 = 0
                        while count_1 < 1:
                            offset_3 = offset_2
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True:
                                #print('entry rep rule', offset_2, offset_3)
                                count_2 = 0
                                while offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break

                                if offset_3 < buf_eof:
                                    codepoint = buf[offset_3]
                                    if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                        offset_3 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_3 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    else:
                                        offset_3 = -1
                                        break
                                else:
                                    offset_3 = -1
                                    break

                                if column_2 != 0:
                                    offset_3 = -1
                                    break
                                # print('start')
                                for indent, dedent in prefix_0:
                                    # print(indent, dedent)
                                    _children, _prefix = [], []
                                    offset_4 = offset_3
                                    offset_4, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_4, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                    if _prefix or _children:
                                       raise Exception('bar')
                                    if offset_4 == -1:
                                        offset_3 = -1
                                        break
                                    offset_3 = offset_4
                                    indent_column_2.append(column_2)
                                if offset_3 == -1:
                                    break

                                while True: # start lookahed
                                    children_3 = []
                                    offset_4 = offset_3 + 0
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    count_2 = 0
                                    while offset_4 < buf_eof and count_2 < value_2:
                                        codepoint = buf[offset_4]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                    width = partial_tab_width_3
                                                else:
                                                    width  = (self.tabstop-((column_3)%self.tabstop));
                                                if count_2 + width > value_2:
                                                    new_width = value_2 - count_2
                                                    count_2 += new_width
                                                    column_3 += new_width
                                                    partial_tab_offset_3 = offset_4
                                                    partial_tab_width_3 = width - new_width
                                                    break
                                                count_2 += width
                                                column_3 += width
                                                offset_4 += 1
                                            else:
                                                count_2 += 1
                                                column_3 += 1
                                                offset_4 += 1
                                        else:
                                            break
                                    if count_2 < value_2:
                                        offset_4 = -1
                                        break

                                    if buf[offset_4:offset_4+len(value_4)] == value_4:
                                        offset_4 += len(value_4)
                                        column_3 += len(value_4)
                                    else:
                                        offset_4 = -1
                                        break

                                    break
                                if offset_4 == -1:
                                    offset_3 = -1
                                    break

                                value_0 = 'loose'

                                #print('safe exit rep rule', offset_2, offset_3)
                                break
                            #print('exit rep rule', offset_2, offset_3)
                            if offset_3 == -1:
                                break
                            if offset_2 == offset_3: break
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            offset_2 = offset_3
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                            break
                        if offset_2 == -1:
                            break
                        value_9 = count_1

                        count_1 = 0
                        while offset_2 < buf_eof and count_1 < value_2:
                            codepoint = buf[offset_2]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    if count_1 + width > value_2:
                                        new_width = value_2 - count_1
                                        count_1 += new_width
                                        column_1 += new_width
                                        partial_tab_offset_1 = offset_2
                                        partial_tab_width_1 = width - new_width
                                        break
                                    count_1 += width
                                    column_1 += width
                                    offset_2 += 1
                                else:
                                    count_1 += 1
                                    column_1 += 1
                                    offset_2 += 1
                            else:
                                break
                        if count_1 < value_2:
                            offset_2 = -1
                            break

                        if buf[offset_2:offset_2+len(value_4)] == value_4:
                            offset_2 += len(value_4)
                            column_1 += len(value_4)
                        else:
                            offset_2 = -1
                            break

                        while True: # start choice
                            offset_3 = offset_2
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True: # case
                                while True: # start lookahed
                                    children_3 = []
                                    offset_4 = offset_3 + 0
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    count_1 = 0
                                    while offset_4 < buf_eof:
                                        codepoint = buf[offset_4]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_4 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                    width = partial_tab_width_3
                                                else:
                                                    width  = (self.tabstop-((column_3)%self.tabstop));
                                                count_1 += width
                                                column_3 += width
                                                offset_4 += 1
                                            else:
                                                count_1 += 1
                                                column_3 += 1
                                                offset_4 += 1
                                        else:
                                            break

                                    if offset_4 < buf_eof:
                                        codepoint = buf[offset_4]
                                        if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                            offset_4 +=2
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        elif codepoint in '\r\n':
                                            offset_4 +=1
                                            column_3 = 0
                                            indent_column_3[:] = (0, )
                                        else:
                                            offset_4 = -1
                                            break

                                    break
                                if offset_4 == -1:
                                    offset_3 = -1
                                    break


                                break
                            if offset_3 != -1:
                                offset_2 = offset_3
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_2 is not None and children_2 is not None:
                                    children_1.extend(children_2)
                                break
                            # end case
                            offset_3 = offset_2
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_2 = [] if children_1 is not None else None
                            while True: # case
                                count_1 = 0
                                while offset_3 < buf_eof and count_1 < 1:
                                    codepoint = buf[offset_3]
                                    if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                        offset_3 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_3 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_1 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            if count_1 + width > 1:
                                                new_width = 1 - count_1
                                                count_1 += new_width
                                                column_2 += new_width
                                                partial_tab_offset_2 = offset_3
                                                partial_tab_width_2 = width - new_width
                                                break
                                            count_1 += width
                                            column_2 += width
                                            offset_3 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_3 += 1
                                    else:
                                        break
                                if count_1 < 1:
                                    offset_3 = -1
                                    break


                                break
                            if offset_3 != -1:
                                offset_2 = offset_3
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                if children_2 is not None and children_2 is not None:
                                    children_1.extend(children_2)
                                break
                            # end case
                            offset_2 = -1 # no more choices
                            break # end choice
                        if offset_2 == -1:
                            break

                        children_2 = []
                        value_10 = Node(None, offset_2, offset_2, column_1, column_1, children_2, None)
                        while True: # start capture
                            offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_item_label(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                            if offset_2 == -1: break


                            while True: # start choice
                                offset_3 = offset_2
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    count_1 = 1
                                    # print(count_1, 'indent')
                                    def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_1, allow_mixed_indent=self.allow_mixed_indent):
                                        saw_tab, saw_not_tab = False, False
                                        start_column, start_offset = column, offset
                                        if count < 0: offset = -1
                                        while count > 0 and offset < buf_eof:
                                            codepoint = buf[offset];
                                            if codepoint in ' \t':
                                                if not allow_mixed_indent:
                                                    if codepoint == '\t': saw_tab = True
                                                    else: saw_not_tab = True
                                                    if saw_tab and saw_not_tab:
                                                         offset = -1; break
                                                if codepoint != '\t':
                                                    column += 1
                                                    offset += 1
                                                    count -=1
                                                else:
                                                    if offset == partial_tab_offset and partial_tab_width > 0:
                                                        width = partial_tab_width
                                                    else:
                                                        width  = (self.tabstop-((column)%self.tabstop));
                                                    if width <= count:
                                                        column += width
                                                        offset += 1
                                                        count -= width
                                                    else:
                                                        partial_tab_offset = offset
                                                        partial_tab_width = width-count
                                                        column += count
                                                        count -= width
                                                        break
                                            elif codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                break
                                            elif codepoint in '\r\n':
                                                break
                                            else:
                                                offset = -1
                                                break
                                        return offset, column, partial_tab_offset, partial_tab_width
                                    prefix_0.append((_indent, self.parse_paragraph_breaks))
                                    indent_column_2.append(column_2)
                                    while True:
                                        count_1 = value_1
                                        # print(count_1, 'indent')
                                        def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_1, allow_mixed_indent=self.allow_mixed_indent):
                                            saw_tab, saw_not_tab = False, False
                                            start_column, start_offset = column, offset
                                            if count < 0: offset = -1
                                            while count > 0 and offset < buf_eof:
                                                codepoint = buf[offset];
                                                if codepoint in ' \t':
                                                    if not allow_mixed_indent:
                                                        if codepoint == '\t': saw_tab = True
                                                        else: saw_not_tab = True
                                                        if saw_tab and saw_not_tab:
                                                             offset = -1; break
                                                    if codepoint != '\t':
                                                        column += 1
                                                        offset += 1
                                                        count -=1
                                                    else:
                                                        if offset == partial_tab_offset and partial_tab_width > 0:
                                                            width = partial_tab_width
                                                        else:
                                                            width  = (self.tabstop-((column)%self.tabstop));
                                                        if width <= count:
                                                            column += width
                                                            offset += 1
                                                            count -= width
                                                        else:
                                                            partial_tab_offset = offset
                                                            partial_tab_width = width-count
                                                            column += count
                                                            count -= width
                                                            break
                                                elif codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                    break
                                                elif codepoint in '\r\n':
                                                    break
                                                else:
                                                    offset = -1
                                                    break
                                            return offset, column, partial_tab_offset, partial_tab_width
                                        prefix_0.append((_indent, self.parse_paragraph_breaks))
                                        indent_column_2.append(column_2)
                                        while True:
                                            offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_list_item(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                            if offset_3 == -1: break


                                            break
                                        prefix_0.pop()
                                        if len(indent_column_2) > 1: indent_column_2.pop()
                                        if offset_3 == -1: break

                                        break
                                    prefix_0.pop()
                                    if len(indent_column_2) > 1: indent_column_2.pop()
                                    if offset_3 == -1: break


                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_3 = offset_2
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    count_1 = 0
                                    while offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                count_1 += width
                                                column_2 += width
                                                offset_3 += 1
                                            else:
                                                count_1 += 1
                                                column_2 += 1
                                                offset_3 += 1
                                        else:
                                            break

                                    if offset_3 < buf_eof:
                                        codepoint = buf[offset_3]
                                        if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                            offset_3 +=2
                                            column_2 = 0
                                            indent_column_2[:] = (0, )
                                        elif codepoint in '\r\n':
                                            offset_3 +=1
                                            column_2 = 0
                                            indent_column_2[:] = (0, )
                                        else:
                                            offset_3 = -1
                                            break

                                    children_4 = []
                                    value_11 = Node(None, offset_3, offset_3, column_2, column_2, children_4, None)
                                    value_11.name = 'item_spacing'
                                    value_11.end = offset_3
                                    value_11.end_column = column_2
                                    value_11.value = 'tight'
                                    children_3.append(value_11)


                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = -1 # no more choices
                                break # end choice
                            if offset_2 == -1:
                                break

                            break
                        if offset_2 == -1:
                            break
                        value_10.name = 'remark_item'
                        value_10.end = offset_2
                        value_10.end_column = column_1
                        value_10.value = None
                        children_1.append(value_10)

                        #print('safe exit rep rule', offset_1, offset_2)
                        break
                    #print('exit rep rule', offset_1, offset_2)
                    if offset_2 == -1:
                        break
                    if offset_1 == offset_2: break
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    offset_1 = offset_2
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if offset_1 == -1:
                    break
                value_8 = count_0

                break
            if offset_1 == -1:
                offset_0 = -1
                break
            offset_0 = offset_1

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_list_block(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_list(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_list'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_start_table(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            if buf[offset_0:offset_0+1] == '|':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_table_cell(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                while True: # start choice
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        while True: # start lookahed
                            children_3 = []
                            offset_2 = offset_1 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            if buf[offset_2:offset_2+1] == '|':
                                offset_2 += 1
                                column_2 += 1
                            else:
                                offset_2 = -1
                                break

                            break
                        if offset_2 == -1:
                            offset_1 = -1
                            break


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True: # case
                        while True: # start reject
                            children_3 = []
                            offset_2 = offset_1 + 0
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            if buf[offset_2:offset_2+1] == '|':
                                offset_2 += 1
                                column_2 += 1
                            else:
                                offset_2 = -1
                                break

                            break
                        if offset_2 != -1:
                            offset_1 = -1
                            break

                        count_0 = -1
                        # print(count_0, 'indent')
                        def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                            saw_tab, saw_not_tab = False, False
                            start_column, start_offset = column, offset
                            if count < 0: offset = -1
                            while count > 0 and offset < buf_eof:
                                codepoint = buf[offset];
                                if codepoint in ' \t':
                                    if not allow_mixed_indent:
                                        if codepoint == '\t': saw_tab = True
                                        else: saw_not_tab = True
                                        if saw_tab and saw_not_tab:
                                             offset = -1; break
                                    if codepoint != '\t':
                                        column += 1
                                        offset += 1
                                        count -=1
                                    else:
                                        if offset == partial_tab_offset and partial_tab_width > 0:
                                            width = partial_tab_width
                                        else:
                                            width  = (self.tabstop-((column)%self.tabstop));
                                        if width <= count:
                                            column += width
                                            offset += 1
                                            count -= width
                                        else:
                                            partial_tab_offset = offset
                                            partial_tab_width = width-count
                                            column += count
                                            count -= width
                                            break
                                elif codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    break
                                elif codepoint in '\r\n':
                                    break
                                else:
                                    offset = -1
                                    break
                            return offset, column, partial_tab_offset, partial_tab_width
                        prefix_0.append((_indent, None))
                        indent_column_1.append(column_1)
                        while True:
                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_element(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            count_0 = 0
                            while True:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    children_4 = []
                                    value_2 = Node(None, offset_2, offset_2, column_2, column_2, children_4, None)
                                    while True: # start capture
                                        count_1 = 0
                                        while offset_2 < buf_eof:
                                            codepoint = buf[offset_2]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                        width = partial_tab_width_2
                                                    else:
                                                        width  = (self.tabstop-((column_2)%self.tabstop));
                                                    count_1 += width
                                                    column_2 += width
                                                    offset_2 += 1
                                                else:
                                                    count_1 += 1
                                                    column_2 += 1
                                                    offset_2 += 1
                                            else:
                                                break

                                        break
                                    if offset_2 == -1:
                                        break
                                    value_2.name = 'remark_whitespace'
                                    value_2.end = offset_2
                                    value_2.end_column = column_2
                                    value_2.value = None
                                    children_3.append(value_2)

                                    while True: # start reject
                                        children_4 = []
                                        offset_3 = offset_2 + 0
                                        column_3 = column_2
                                        indent_column_3 = list(indent_column_2)
                                        partial_tab_offset_3 = partial_tab_offset_2
                                        partial_tab_width_3 = partial_tab_width_2
                                        if buf[offset_3:offset_3+1] == '|':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        break
                                    if offset_3 != -1:
                                        offset_2 = -1
                                        break

                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_inline_element(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break


                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_0 += 1
                            if offset_1 == -1:
                                break
                            value_1 = count_0

                            break
                        prefix_0.pop()
                        if len(indent_column_1) > 1: indent_column_1.pop()
                        if offset_1 == -1: break


                        break
                    if offset_1 != -1:
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        break
                    # end case
                    offset_0 = -1 # no more choices
                    break # end choice
                if offset_0 == -1:
                    break

                break
            if offset_0 == -1:
                break
            value_0.name = 'table_cell'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_table(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_table(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                break
            if offset_0 == -1:
                break
            value_0.name = 'table'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inner_table(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            count_0 = 0
            while offset_0 < buf_eof and count_0 < 8:
                codepoint = buf[offset_0]
                if codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        if count_0 + width > 8:
                            new_width = 8 - count_0
                            count_0 += new_width
                            column_0 += new_width
                            partial_tab_offset_0 = offset_0
                            partial_tab_width_0 = width - new_width
                            break
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break

            count_0 = column_0 - indent_column_0[len(indent_column_0)-1]
            # print(count_0, 'indent')
            def _indent(buf, buf_start, buf_eof, offset, column, indent_column,  prefix,  children, partial_tab_offset, partial_tab_width, count=count_0, allow_mixed_indent=self.allow_mixed_indent):
                saw_tab, saw_not_tab = False, False
                start_column, start_offset = column, offset
                if count < 0: offset = -1
                while count > 0 and offset < buf_eof:
                    codepoint = buf[offset];
                    if codepoint in ' \t':
                        if not allow_mixed_indent:
                            if codepoint == '\t': saw_tab = True
                            else: saw_not_tab = True
                            if saw_tab and saw_not_tab:
                                 offset = -1; break
                        if codepoint != '\t':
                            column += 1
                            offset += 1
                            count -=1
                        else:
                            if offset == partial_tab_offset and partial_tab_width > 0:
                                width = partial_tab_width
                            else:
                                width  = (self.tabstop-((column)%self.tabstop));
                            if width <= count:
                                column += width
                                offset += 1
                                count -= width
                            else:
                                partial_tab_offset = offset
                                partial_tab_width = width-count
                                column += count
                                count -= width
                                break
                    elif codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        break
                    elif codepoint in '\r\n':
                        break
                    else:
                        offset = -1
                        break
                return offset, column, partial_tab_offset, partial_tab_width
            prefix_0.append((_indent, None))
            indent_column_0.append(column_0)
            while True:
                value_0 = 0
                offset_1 = offset_0
                while True: # start backref
                    children_1 = []
                    value_1 = Node(None, offset_1, offset_1, column_0, column_0, children_1, None)
                    while True: # start capture
                        count_0 = 0
                        while True:
                            offset_2 = offset_1
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_2 = [] if children_1 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == '|':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_table_cell(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                                if offset_2 == -1: break


                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                        if count_0 < 1:
                        #    print('min exit', offset_1)
                            offset_1 = -1
                            break
                        if offset_1 == -1:
                            break
                        value_2 = count_0

                        count_0 = 0
                        while count_0 < 1:
                            offset_2 = offset_1
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_2 = [] if children_1 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == '|':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                            break
                        if offset_1 == -1:
                            break
                        value_3 = count_0

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_0 = 0
                                indent_column_0[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_0 = 0
                                indent_column_0[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_1.name = 'table_header'
                    value_1.end = offset_1
                    value_1.end_column = column_0
                    value_1.value = None
                    children_0.append(value_1)

                    if column_0 != 0:
                        offset_1 = -1
                        break
                    # print('start')
                    for indent, dedent in prefix_0:
                        # print(indent, dedent)
                        _children, _prefix = [], []
                        offset_2 = offset_1
                        offset_2, column_0, partial_tab_offset_0, partial_tab_width_0 = indent(buf, buf_start, buf_eof, offset_2, column_0, indent_column_0, _prefix, _children, partial_tab_offset_0, partial_tab_width_0)
                        if _prefix or _children:
                           raise Exception('bar')
                        if offset_2 == -1:
                            offset_1 = -1
                            break
                        offset_1 = offset_2
                        indent_column_0.append(column_0)
                    if offset_1 == -1:
                        break

                    children_1 = []
                    value_4 = Node(None, offset_1, offset_1, column_0, column_0, children_1, None)
                    while True: # start capture
                        count_0 = 0
                        while count_0 < value_2:
                            offset_2 = offset_1
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_2 = [] if children_1 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == '|':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                children_3 = []
                                value_6 = Node(None, offset_2, offset_2, column_1, column_1, children_3, None)
                                while True: # start capture
                                    _match = regex_14.match(buf, offset_2)
                                    if _match:
                                        _end = _match.end()
                                        column_1 += (_end - offset_2)
                                        offset_2 = _end
                                    else:
                                        offset_2 = -1
                                        break

                                    _match = regex_15.match(buf, offset_2)
                                    if _match:
                                        _end = _match.end()
                                        column_1 += (_end - offset_2)
                                        offset_2 = _end
                                    else:
                                        offset_2 = -1
                                        break

                                    _match = regex_14.match(buf, offset_2)
                                    if _match:
                                        _end = _match.end()
                                        column_1 += (_end - offset_2)
                                        offset_2 = _end
                                    else:
                                        offset_2 = -1
                                        break

                                    break
                                if offset_2 == -1:
                                    break
                                value_6.name = 'column_align'
                                value_6.end = offset_2
                                value_6.end_column = column_1
                                value_6.value = None
                                children_2.append(value_6)

                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                        if count_0 < value_2:
                        #    print('min exit', offset_1)
                            offset_1 = -1
                            break
                        if offset_1 == -1:
                            break
                        value_5 = count_0

                        count_0 = 0
                        while count_0 < 1:
                            offset_2 = offset_1
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_2 = [] if children_1 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == '|':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_1 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                            break
                        if offset_1 == -1:
                            break
                        value_7 = count_0

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_0 = 0
                                indent_column_0[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_0 = 0
                                indent_column_0[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_4.name = 'table_header_rule'
                    value_4.end = offset_1
                    value_4.end_column = column_0
                    value_4.value = None
                    children_0.append(value_4)

                    break
                if offset_1 == -1:
                    offset_0 = -1
                    break
                offset_0 = offset_1

                count_0 = 0
                while True:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_1 = [] if children_0 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        if column_1 != 0:
                            offset_1 = -1
                            break
                        # print('start')
                        for indent, dedent in prefix_0:
                            # print(indent, dedent)
                            _children, _prefix = [], []
                            offset_2 = offset_1
                            offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = indent(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, _prefix, _children, partial_tab_offset_1, partial_tab_width_1)
                            if _prefix or _children:
                               raise Exception('bar')
                            if offset_2 == -1:
                                offset_1 = -1
                                break
                            offset_1 = offset_2
                            indent_column_1.append(column_1)
                        if offset_1 == -1:
                            break

                        children_2 = []
                        value_9 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                        while True: # start capture
                            count_1 = 0
                            while count_1 < value_2:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    if buf[offset_2:offset_2+1] == '|':
                                        offset_2 += 1
                                        column_2 += 1
                                    else:
                                        offset_2 = -1
                                        break

                                    count_2 = 0
                                    while offset_2 < buf_eof:
                                        codepoint = buf[offset_2]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                count_2 += width
                                                column_2 += width
                                                offset_2 += 1
                                            else:
                                                count_2 += 1
                                                column_2 += 1
                                                offset_2 += 1
                                        else:
                                            break

                                    offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_table_cell(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_2 == -1: break


                                    count_2 = 0
                                    while offset_2 < buf_eof:
                                        codepoint = buf[offset_2]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                count_2 += width
                                                column_2 += width
                                                offset_2 += 1
                                            else:
                                                count_2 += 1
                                                column_2 += 1
                                                offset_2 += 1
                                        else:
                                            break

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_1 += 1
                            if count_1 < 1:
                            #    print('min exit', offset_1)
                                offset_1 = -1
                                break
                            if offset_1 == -1:
                                break
                            value_10 = count_1

                            count_1 = 0
                            while count_1 < 1:
                                offset_2 = offset_1
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True:
                                    #print('entry rep rule', offset_1, offset_2)
                                    if buf[offset_2:offset_2+1] == '|':
                                        offset_2 += 1
                                        column_2 += 1
                                    else:
                                        offset_2 = -1
                                        break

                                    count_2 = 0
                                    while offset_2 < buf_eof:
                                        codepoint = buf[offset_2]
                                        if codepoint in ' \t':
                                            if codepoint == '\t':
                                                if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                    width = partial_tab_width_2
                                                else:
                                                    width  = (self.tabstop-((column_2)%self.tabstop));
                                                count_2 += width
                                                column_2 += width
                                                offset_2 += 1
                                            else:
                                                count_2 += 1
                                                column_2 += 1
                                                offset_2 += 1
                                        else:
                                            break

                                    #print('safe exit rep rule', offset_1, offset_2)
                                    break
                                #print('exit rep rule', offset_1, offset_2)
                                if offset_2 == -1:
                                    break
                                if offset_1 == offset_2: break
                                if children_3 is not None and children_3 is not None:
                                    children_2.extend(children_3)
                                offset_1 = offset_2
                                column_1 = column_2
                                indent_column_1 = indent_column_2
                                partial_tab_offset_1 = partial_tab_offset_2
                                partial_tab_width_1 = partial_tab_width_2
                                count_1 += 1
                                break
                            if offset_1 == -1:
                                break
                            value_11 = count_1

                            if offset_1 < buf_eof:
                                codepoint = buf[offset_1]
                                if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                    offset_1 +=2
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_1 +=1
                                    column_1 = 0
                                    indent_column_1[:] = (0, )
                                else:
                                    offset_1 = -1
                                    break
                            else:
                                offset_1 = -1
                                break

                            break
                        if offset_1 == -1:
                            break
                        value_9.name = 'table_row'
                        value_9.end = offset_1
                        value_9.end_column = column_1
                        value_9.value = None
                        children_1.append(value_9)

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if offset_0 == -1:
                    break
                value_8 = count_0

                break
            prefix_0.pop()
            if len(indent_column_0) > 1: indent_column_0.pop()
            if offset_0 == -1: break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inline_element(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    if buf[offset_1:offset_1+1] == '\\':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    children_2 = []
                    value_0 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break
                        if count_0 < 1:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_0.name = 'remark_nbsp'
                    value_0.end = offset_1
                    value_0.end_column = column_1
                    value_0.value = None
                    children_1.append(value_0)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    if buf[offset_1:offset_1+1] == '\\':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    children_2 = []
                    value_1 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        _match = regex_16.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_1.name = 'remark_text'
                    value_1.end = offset_1
                    value_1.end_column = column_1
                    value_1.value = None
                    children_1.append(value_1)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    _match = regex_17.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    _match = regex_18.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    _match = regex_19.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    children_2 = []
                    value_2 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        _match = regex_20.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_2.name = 'remark_hex_codepoint'
                    value_2.end = offset_1
                    value_2.end_column = column_1
                    value_2.value = None
                    children_1.append(value_2)

                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            _match = regex_21.match(buf, offset_2)
                            if _match:
                                _end = _match.end()
                                column_2 += (_end - offset_2)
                                offset_2 = _end
                            else:
                                offset_2 = -1
                                break

                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            while True: # start reject
                                children_3 = []
                                offset_3 = offset_2 + 0
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                _match = regex_0.match(buf, offset_3)
                                if _match:
                                    _end = _match.end()
                                    column_3 += (_end - offset_3)
                                    offset_3 = _end
                                else:
                                    offset_3 = -1
                                    break

                                break
                            if offset_3 != -1:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    _match = regex_17.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    _match = regex_18.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    while True: # start reject
                        children_2 = []
                        offset_2 = offset_1 + 0
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        _match = regex_19.match(buf, offset_2)
                        if _match:
                            _end = _match.end()
                            column_2 += (_end - offset_2)
                            offset_2 = _end
                        else:
                            offset_2 = -1
                            break

                        break
                    if offset_2 != -1:
                        offset_1 = -1
                        break

                    children_2 = []
                    value_3 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        _match = regex_20.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_3.name = 'remark_codepoint'
                    value_3.end = offset_1
                    value_3.end_column = column_1
                    value_3.value = None
                    children_1.append(value_3)

                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            _match = regex_21.match(buf, offset_2)
                            if _match:
                                _end = _match.end()
                                column_2 += (_end - offset_2)
                                offset_2 = _end
                            else:
                                offset_2 = -1
                                break

                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            while True: # start reject
                                children_3 = []
                                offset_3 = offset_2 + 0
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                _match = regex_0.match(buf, offset_3)
                                if _match:
                                    _end = _match.end()
                                    column_3 += (_end - offset_3)
                                    offset_3 = _end
                                else:
                                    offset_3 = -1
                                    break

                                break
                            if offset_3 != -1:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    if buf[offset_1:offset_1+1] == ':':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    children_2 = []
                    value_4 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_remark_identifier(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        break
                    if offset_1 == -1:
                        break
                    value_4.name = 'remark_emoji'
                    value_4.end = offset_1
                    value_4.end_column = column_1
                    value_4.value = None
                    children_1.append(value_4)

                    if buf[offset_1:offset_1+1] == ':':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_raw_inline_directive(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_directive(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_span(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_style(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_code_span(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    children_2 = []
                    value_5 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        _match = regex_22.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        count_0 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                while True: # start choice
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        _match = regex_23.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        _match = regex_24.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            count_1 = 0
                                            while offset_4 < buf_eof:
                                                codepoint = buf[offset_4]
                                                if codepoint == '\r' and offset_4 + 1 < buf_eof and buf[offset_4+1] == '\n':
                                                    offset_4 +=2
                                                    column_4 = 0
                                                    indent_column_4[:] = (0, )
                                                elif codepoint in '\r\n':
                                                    offset_4 +=1
                                                    column_4 = 0
                                                    indent_column_4[:] = (0, )
                                                    count_1 +=1
                                                elif codepoint in ' \t':
                                                    if codepoint == '\t':
                                                        if offset_4 == partial_tab_offset_4 and partial_tab_width_4 > 0:
                                                            width = partial_tab_width_4
                                                        else:
                                                            width  = (self.tabstop-((column_4)%self.tabstop));
                                                        count_1 += width
                                                        column_4 += width
                                                        offset_4 += 1
                                                    else:
                                                        count_1 += 1
                                                        column_4 += 1
                                                        offset_4 += 1
                                                else:
                                                    break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_2 = -1 # no more choices
                                    break # end choice
                                if offset_2 == -1:
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_0 += 1
                        if offset_1 == -1:
                            break
                        value_6 = count_0

                        break
                    if offset_1 == -1:
                        break
                    value_5.name = 'remark_text'
                    value_5.end = offset_1
                    value_5.end_column = column_1
                    value_5.value = None
                    children_1.append(value_5)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inline_span(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_span(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                children_2 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    count_0 = 0
                    while count_0 < 1:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_3 = [] if children_2 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if buf[offset_1:offset_1+1] == '{':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            if buf[offset_1:offset_1+1] == '}':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_3 is not None and children_3 is not None:
                            children_2.extend(children_3)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                        break
                    if offset_0 == -1:
                        break
                    value_2 = count_0

                    break
                if offset_0 == -1:
                    break
                value_1.name = 'directive_args'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_1.append(value_1)

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_inline_span'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inner_span(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_1 = offset_0
            column_1 = column_0
            while True: # start count
                _match = regex_5.match(buf, offset_1)
                if _match:
                    _end = _match.end()
                    column_1 += (_end - offset_1)
                    offset_1 = _end
                else:
                    offset_1 = -1
                    break

                break
            if offset_1 == -1:
                offset_0 = -1; break
            value_0 = column_1 - column_0
            offset_0 = offset_1
            column_0 = column_1

            offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inline_element(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0)
            if offset_0 == -1: break


            count_0 = 0
            while True:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_linebreak(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_2, partial_tab_offset_2, partial_tab_width_2)
                            if offset_2 == -1: break



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_3 = []
                            value_2 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            while True: # start capture
                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_1 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                break
                            if offset_2 == -1:
                                break
                            value_2.name = 'remark_whitespace'
                            value_2.end = offset_2
                            value_2.end_column = column_2
                            value_2.value = None
                            children_2.append(value_2)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    while True: # start reject
                        children_2 = []
                        offset_2 = offset_1 + 0
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        count_1 = 0
                        while count_1 < value_0:
                            offset_3 = offset_2
                            column_3 = column_2
                            indent_column_3 = list(indent_column_2)
                            partial_tab_offset_3 = partial_tab_offset_2
                            partial_tab_width_3 = partial_tab_width_2
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_2, offset_3)
                                if buf[offset_3:offset_3+1] == ']':
                                    offset_3 += 1
                                    column_3 += 1
                                else:
                                    offset_3 = -1
                                    break

                                #print('safe exit rep rule', offset_2, offset_3)
                                break
                            #print('exit rep rule', offset_2, offset_3)
                            if offset_3 == -1:
                                break
                            if offset_2 == offset_3: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_2 = offset_3
                            column_2 = column_3
                            indent_column_2 = indent_column_3
                            partial_tab_offset_2 = partial_tab_offset_3
                            partial_tab_width_2 = partial_tab_width_3
                            count_1 += 1
                        if count_1 < value_0:
                        #    print('min exit', offset_2)
                            offset_2 = -1
                            break
                        if offset_2 == -1:
                            break
                        value_3 = count_1

                        break
                    if offset_2 != -1:
                        offset_1 = -1
                        break

                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_element(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break


                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if offset_0 == -1:
                break
            value_1 = count_0

            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_linebreak(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    children_2 = []
                    value_4 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_0 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_0 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        break
                    if offset_1 == -1:
                        break
                    value_4.name = 'remark_whitespace'
                    value_4.end = offset_1
                    value_4.end_column = column_1
                    value_4.value = None
                    children_1.append(value_4)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            count_0 = 0
            while count_0 < value_0:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    if buf[offset_1:offset_1+1] == ']':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if count_0 < value_0:
            #    print('min exit', offset_0)
                offset_0 = -1
                break
            if offset_0 == -1:
                break
            value_5 = count_0


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inline_style(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            value_0 = ''
            offset_1 = offset_0
            while True: # start backref
                children_1 = []
                value_1 = Node(None, offset_1, offset_1, column_0, column_0, children_1, None)
                while True: # start capture
                    offset_2 = offset_1
                    column_1 = column_0
                    while True: # start count
                        offset_3 = offset_2
                        while True: # start backref
                            _match = regex_25.match(buf, offset_3)
                            if _match:
                                _end = _match.end()
                                column_1 += (_end - offset_3)
                                offset_3 = _end
                            else:
                                offset_3 = -1
                                break

                            break
                        if offset_3 == -1:
                            offset_2 = -1
                            break
                        value_3 = buf[offset_2:offset_3]
                        offset_2 = offset_3

                        count_0 = 0
                        while True:
                            offset_3 = offset_2
                            column_2 = column_1
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_2 = [] if children_1 is not None else None
                            while True:
                                #print('entry rep rule', offset_2, offset_3)
                                if buf[offset_3:offset_3+len(value_3)] == value_3:
                                    offset_3 += len(value_3)
                                    column_2 += len(value_3)
                                else:
                                    offset_3 = -1
                                    break

                                #print('safe exit rep rule', offset_2, offset_3)
                                break
                            #print('exit rep rule', offset_2, offset_3)
                            if offset_3 == -1:
                                break
                            if offset_2 == offset_3: break
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            offset_2 = offset_3
                            column_1 = column_2
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                        if offset_2 == -1:
                            break
                        value_4 = count_0

                        while True: # start reject
                            children_2 = []
                            offset_3 = offset_2 + 0
                            column_2 = column_1
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            count_0 = 0
                            while offset_3 < buf_eof:
                                codepoint = buf[offset_3]
                                if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                    offset_3 +=2
                                    column_2 = 0
                                    indent_column_1[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_3 +=1
                                    column_2 = 0
                                    indent_column_1[:] = (0, )
                                    count_0 +=1
                                elif codepoint in ' \t':
                                    if codepoint == '\t':
                                        if offset_3 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                            width = partial_tab_width_1
                                        else:
                                            width  = (self.tabstop-((column_2)%self.tabstop));
                                        count_0 += width
                                        column_2 += width
                                        offset_3 += 1
                                    else:
                                        count_0 += 1
                                        column_2 += 1
                                        offset_3 += 1
                                else:
                                    break
                            if count_0 < 1:
                                offset_3 = -1
                                break

                            break
                        if offset_3 != -1:
                            offset_2 = -1
                            break

                        value_0 = value_3

                        break
                    if offset_2 == -1:
                        offset_1 = -1; break
                    value_2 = column_1 - column_0
                    offset_1 = offset_2
                    column_0 = column_1

                    offset_1, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inline_element(buf, buf_start, buf_eof, offset_1, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                    if offset_1 == -1: break


                    count_0 = 0
                    while True:
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True:
                            #print('entry rep rule', offset_1, offset_2)
                            while True: # start choice
                                offset_3 = offset_2
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_linebreak(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_3 == -1: break



                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_3 = offset_2
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                children_3 = [] if children_2 is not None else None
                                while True: # case
                                    children_4 = []
                                    value_6 = Node(None, offset_3, offset_3, column_2, column_2, children_4, None)
                                    while True: # start capture
                                        count_1 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                        width = partial_tab_width_2
                                                    else:
                                                        width  = (self.tabstop-((column_2)%self.tabstop));
                                                    count_1 += width
                                                    column_2 += width
                                                    offset_3 += 1
                                                else:
                                                    count_1 += 1
                                                    column_2 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        break
                                    if offset_3 == -1:
                                        break
                                    value_6.name = 'remark_whitespace'
                                    value_6.end = offset_3
                                    value_6.end_column = column_2
                                    value_6.value = None
                                    children_3.append(value_6)


                                    break
                                if offset_3 != -1:
                                    offset_2 = offset_3
                                    column_1 = column_2
                                    indent_column_1 = indent_column_2
                                    partial_tab_offset_1 = partial_tab_offset_2
                                    partial_tab_width_1 = partial_tab_width_2
                                    if children_3 is not None and children_3 is not None:
                                        children_2.extend(children_3)
                                    break
                                # end case
                                offset_2 = -1 # no more choices
                                break # end choice
                            if offset_2 == -1:
                                break

                            while True: # start reject
                                children_3 = []
                                offset_3 = offset_2 + 0
                                column_2 = column_1
                                indent_column_2 = list(indent_column_1)
                                partial_tab_offset_2 = partial_tab_offset_1
                                partial_tab_width_2 = partial_tab_width_1
                                count_1 = 0
                                while count_1 < value_2:
                                    offset_4 = offset_3
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_3, offset_4)
                                        if buf[offset_4:offset_4+len(value_0)] == value_0:
                                            offset_4 += len(value_0)
                                            column_3 += len(value_0)
                                        else:
                                            offset_4 = -1
                                            break

                                        #print('safe exit rep rule', offset_3, offset_4)
                                        break
                                    #print('exit rep rule', offset_3, offset_4)
                                    if offset_4 == -1:
                                        break
                                    if offset_3 == offset_4: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_3 = offset_4
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_1 += 1
                                if count_1 < value_2:
                                #    print('min exit', offset_3)
                                    offset_3 = -1
                                    break
                                if offset_3 == -1:
                                    break
                                value_7 = count_1

                                break
                            if offset_3 != -1:
                                offset_2 = -1
                                break

                            offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_element(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                            if offset_2 == -1: break


                            #print('safe exit rep rule', offset_1, offset_2)
                            break
                        #print('exit rep rule', offset_1, offset_2)
                        if offset_2 == -1:
                            break
                        if offset_1 == offset_2: break
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                    if offset_1 == -1:
                        break
                    value_5 = count_0

                    while True: # start choice
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_linebreak(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                            if offset_2 == -1: break



                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_3 = []
                            value_8 = Node(None, offset_2, offset_2, column_1, column_1, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                                width = partial_tab_width_1
                                            else:
                                                width  = (self.tabstop-((column_1)%self.tabstop));
                                            count_0 += width
                                            column_1 += width
                                            offset_2 += 1
                                        else:
                                            count_0 += 1
                                            column_1 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                break
                            if offset_2 == -1:
                                break
                            value_8.name = 'remark_whitespace'
                            value_8.end = offset_2
                            value_8.end_column = column_1
                            value_8.value = None
                            children_2.append(value_8)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    count_0 = 0
                    while count_0 < value_2:
                        offset_2 = offset_1
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_2 = [] if children_1 is not None else None
                        while True:
                            #print('entry rep rule', offset_1, offset_2)
                            if buf[offset_2:offset_2+len(value_0)] == value_0:
                                offset_2 += len(value_0)
                                column_1 += len(value_0)
                            else:
                                offset_2 = -1
                                break

                            #print('safe exit rep rule', offset_1, offset_2)
                            break
                        #print('exit rep rule', offset_1, offset_2)
                        if offset_2 == -1:
                            break
                        if offset_1 == offset_2: break
                        if children_2 is not None and children_2 is not None:
                            children_1.extend(children_2)
                        offset_1 = offset_2
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                    if count_0 < value_2:
                    #    print('min exit', offset_1)
                        offset_1 = -1
                        break
                    if offset_1 == -1:
                        break
                    value_9 = count_0

                    children_2 = []
                    value_10 = Node(None, offset_1, offset_1, column_0, column_0, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while count_0 < 1:
                            offset_2 = offset_1
                            column_1 = column_0
                            indent_column_1 = list(indent_column_0)
                            partial_tab_offset_1 = partial_tab_offset_0
                            partial_tab_width_1 = partial_tab_width_0
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == '{':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                offset_2, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_2, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                                if offset_2 == -1: break


                                if buf[offset_2:offset_2+1] == '}':
                                    offset_2 += 1
                                    column_1 += 1
                                else:
                                    offset_2 = -1
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_0 = column_1
                            indent_column_0 = indent_column_1
                            partial_tab_offset_0 = partial_tab_offset_1
                            partial_tab_width_0 = partial_tab_width_1
                            count_0 += 1
                            break
                        if offset_1 == -1:
                            break
                        value_11 = count_0

                        break
                    if offset_1 == -1:
                        break
                    value_10.name = 'directive_args'
                    value_10.end = offset_1
                    value_10.end_column = column_0
                    value_10.value = None
                    children_1.append(value_10)

                    break
                if offset_1 == -1:
                    break
                value_1.name = 'remark_paragraph_span'
                value_1.end = offset_1
                value_1.end_column = column_0
                value_1.value = value_0
                children_0.append(value_1)

                break
            if offset_1 == -1:
                offset_0 = -1
                break
            offset_0 = offset_1

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_inner_code_span(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            offset_1 = offset_0
            column_1 = column_0
            while True: # start count
                _match = regex_26.match(buf, offset_1)
                if _match:
                    _end = _match.end()
                    column_1 += (_end - offset_1)
                    offset_1 = _end
                else:
                    offset_1 = -1
                    break

                break
            if offset_1 == -1:
                offset_0 = -1; break
            value_0 = buf[offset_0:offset_1].count('`')
            offset_0 = offset_1
            column_0 = column_1

            while True: # start reject
                children_1 = []
                offset_1 = offset_0 + 0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                count_0 = 0
                while offset_1 < buf_eof:
                    codepoint = buf[offset_1]
                    if codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                width = partial_tab_width_1
                            else:
                                width  = (self.tabstop-((column_1)%self.tabstop));
                            count_0 += width
                            column_1 += width
                            offset_1 += 1
                        else:
                            count_0 += 1
                            column_1 += 1
                            offset_1 += 1
                    else:
                        break

                if offset_1 < buf_eof:
                    codepoint = buf[offset_1]
                    if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                        offset_1 +=2
                        column_1 = 0
                        indent_column_1[:] = (0, )
                    elif codepoint in '\r\n':
                        offset_1 +=1
                        column_1 = 0
                        indent_column_1[:] = (0, )
                    else:
                        offset_1 = -1
                        break
                else:
                    offset_1 = -1
                    break

                break
            if offset_1 != -1:
                offset_0 = -1
                break

            count_0 = 0
            while True:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_3 = []
                            value_2 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            while True: # start capture
                                count_1 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_1 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_1 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break
                                if count_1 < 1:
                                    offset_2 = -1
                                    break

                                break
                            if offset_2 == -1:
                                break
                            value_2.name = 'code_whitespace'
                            value_2.end = offset_2
                            value_2.end_column = column_2
                            value_2.value = None
                            children_2.append(value_2)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            children_3 = []
                            value_3 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            while True: # start capture
                                _match = regex_27.match(buf, offset_2)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_2)
                                    offset_2 = _end
                                else:
                                    offset_2 = -1
                                    break

                                _match = regex_28.match(buf, offset_2)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_2)
                                    offset_2 = _end
                                else:
                                    offset_2 = -1
                                    break

                                break
                            if offset_2 == -1:
                                break
                            value_3.name = 'code_text'
                            value_3.end = offset_2
                            value_3.end_column = column_2
                            value_3.value = None
                            children_2.append(value_3)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            if offset_2 < buf_eof:
                                codepoint = buf[offset_2]
                                if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                    offset_2 +=2
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                elif codepoint in '\r\n':
                                    offset_2 +=1
                                    column_2 = 0
                                    indent_column_2[:] = (0, )
                                else:
                                    offset_2 = -1
                                    break
                            else:
                                offset_2 = -1
                                break

                            if column_2 != 0:
                                offset_2 = -1
                                break
                            # print('start')
                            for indent, dedent in prefix_0:
                                # print(indent, dedent)
                                _children, _prefix = [], []
                                offset_3 = offset_2
                                offset_3, column_2, partial_tab_offset_2, partial_tab_width_2 = indent(buf, buf_start, buf_eof, offset_3, column_2, indent_column_2, _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                if _prefix or _children:
                                   raise Exception('bar')
                                if offset_3 == -1:
                                    if dedent is None:
                                        offset_2 = -1
                                        break
                                    _children, _prefix = [], []
                                    offset_3 = offset_2
                                    offset_3, _column, _partial_tab_offset, _partial_tab_width = dedent(buf, buf_start, buf_eof, offset_3, column_2, list(indent_column_2), _prefix, _children, partial_tab_offset_2, partial_tab_width_2)
                                    if offset_3 != -1:
                                        offset_2 = -1
                                        break
                                    else:
                                        offset_3 = offset_2
                                offset_2 = offset_3
                                indent_column_2.append(column_2)
                            if offset_2 == -1:
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            while True: # start reject
                                children_3 = []
                                offset_3 = offset_2 + 0
                                column_3 = column_2
                                indent_column_3 = list(indent_column_2)
                                partial_tab_offset_3 = partial_tab_offset_2
                                partial_tab_width_3 = partial_tab_width_2
                                count_1 = 0
                                while count_1 < value_0:
                                    offset_4 = offset_3
                                    column_4 = column_3
                                    indent_column_4 = list(indent_column_3)
                                    partial_tab_offset_4 = partial_tab_offset_3
                                    partial_tab_width_4 = partial_tab_width_3
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_3, offset_4)
                                        if buf[offset_4:offset_4+1] == '`':
                                            offset_4 += 1
                                            column_4 += 1
                                        else:
                                            offset_4 = -1
                                            break

                                        #print('safe exit rep rule', offset_3, offset_4)
                                        break
                                    #print('exit rep rule', offset_3, offset_4)
                                    if offset_4 == -1:
                                        break
                                    if offset_3 == offset_4: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_3 = offset_4
                                    column_3 = column_4
                                    indent_column_3 = indent_column_4
                                    partial_tab_offset_3 = partial_tab_offset_4
                                    partial_tab_width_3 = partial_tab_width_4
                                    count_1 += 1
                                if count_1 < value_0:
                                #    print('min exit', offset_3)
                                    offset_3 = -1
                                    break
                                if offset_3 == -1:
                                    break
                                value_4 = count_1

                                while True: # start choice
                                    offset_4 = offset_3
                                    column_4 = column_3
                                    indent_column_4 = list(indent_column_3)
                                    partial_tab_offset_4 = partial_tab_offset_3
                                    partial_tab_width_4 = partial_tab_width_3
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        _match = regex_29.match(buf, offset_4)
                                        if _match:
                                            _end = _match.end()
                                            column_4 += (_end - offset_4)
                                            offset_4 = _end
                                        else:
                                            offset_4 = -1
                                            break

                                        break
                                    if offset_4 != -1:
                                        offset_3 = offset_4
                                        column_3 = column_4
                                        indent_column_3 = indent_column_4
                                        partial_tab_offset_3 = partial_tab_offset_4
                                        partial_tab_width_3 = partial_tab_width_4
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_4 = offset_3
                                    column_4 = column_3
                                    indent_column_4 = list(indent_column_3)
                                    partial_tab_offset_4 = partial_tab_offset_3
                                    partial_tab_width_4 = partial_tab_width_3
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        if offset_4 != buf_eof:
                                            offset_4 = -1
                                            break


                                        break
                                    if offset_4 != -1:
                                        offset_3 = offset_4
                                        column_3 = column_4
                                        indent_column_3 = indent_column_4
                                        partial_tab_offset_3 = partial_tab_offset_4
                                        partial_tab_width_3 = partial_tab_width_4
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = -1 # no more choices
                                    break # end choice
                                if offset_3 == -1:
                                    break

                                break
                            if offset_3 != -1:
                                offset_2 = -1
                                break

                            children_3 = []
                            value_5 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            while True: # start capture
                                _match = regex_30.match(buf, offset_2)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_2)
                                    offset_2 = _end
                                else:
                                    offset_2 = -1
                                    break

                                break
                            if offset_2 == -1:
                                break
                            value_5.name = 'code_text'
                            value_5.end = offset_2
                            value_5.end_column = column_2
                            value_5.value = None
                            children_2.append(value_5)


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if count_0 < 1:
            #    print('min exit', offset_0)
                offset_0 = -1
                break
            if offset_0 == -1:
                break
            value_1 = count_0

            count_0 = 0
            while count_0 < value_0:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    if buf[offset_1:offset_1+1] == '`':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if count_0 < value_0:
            #    print('min exit', offset_0)
                offset_0 = -1
                break
            if offset_0 == -1:
                break
            value_6 = count_0

            while True: # start reject
                children_1 = []
                offset_1 = offset_0 + 0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                if buf[offset_1:offset_1+1] == '`':
                    offset_1 += 1
                    column_1 += 1
                else:
                    offset_1 = -1
                    break

                break
            if offset_1 != -1:
                offset_0 = -1
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_code_span(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_inner_code_span(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                children_2 = []
                value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_2, None)
                while True: # start capture
                    count_0 = 0
                    while count_0 < 1:
                        offset_1 = offset_0
                        column_1 = column_0
                        indent_column_1 = list(indent_column_0)
                        partial_tab_offset_1 = partial_tab_offset_0
                        partial_tab_width_1 = partial_tab_width_0
                        children_3 = [] if children_2 is not None else None
                        while True:
                            #print('entry rep rule', offset_0, offset_1)
                            if buf[offset_1:offset_1+1] == '{':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_directive_args(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_3, partial_tab_offset_1, partial_tab_width_1)
                            if offset_1 == -1: break


                            if buf[offset_1:offset_1+1] == '}':
                                offset_1 += 1
                                column_1 += 1
                            else:
                                offset_1 = -1
                                break

                            #print('safe exit rep rule', offset_0, offset_1)
                            break
                        #print('exit rep rule', offset_0, offset_1)
                        if offset_1 == -1:
                            break
                        if offset_0 == offset_1: break
                        if children_3 is not None and children_3 is not None:
                            children_2.extend(children_3)
                        offset_0 = offset_1
                        column_0 = column_1
                        indent_column_0 = indent_column_1
                        partial_tab_offset_0 = partial_tab_offset_1
                        partial_tab_width_0 = partial_tab_width_1
                        count_0 += 1
                        break
                    if offset_0 == -1:
                        break
                    value_2 = count_0

                    break
                if offset_0 == -1:
                    break
                value_1.name = 'directive_args'
                value_1.end = offset_0
                value_1.end_column = column_0
                value_1.value = None
                children_1.append(value_1)

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_code_span'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_identifier(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = None
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                _match = regex_31.match(buf, offset_0)
                if _match:
                    _end = _match.end()
                    column_0 += (_end - offset_0)
                    offset_0 = _end
                else:
                    offset_0 = -1
                    break

                _match = regex_32.match(buf, offset_0)
                if _match:
                    _end = _match.end()
                    column_0 += (_end - offset_0)
                    offset_0 = _end
                else:
                    offset_0 = -1
                    break

                break
            if offset_0 == -1:
                break
            value_0.name = 'remark_identifier'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_value(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    children_2 = []
                    value_0 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        if buf[offset_1:offset_1+1] == '@':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_identifier(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        if buf[offset_1:offset_1+1] == ' ':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_literal(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        break
                    if offset_1 == -1:
                        break
                    value_0.name = 'rson_tagged'
                    value_0.end = offset_1
                    value_0.end_column = column_1
                    value_0.value = None
                    children_1.append(value_0)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_literal(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_literal(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_list(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_object(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    while True: # start choice
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            if buf[offset_2:offset_2+1] == '"':
                                offset_2 += 1
                                column_2 += 1
                            else:
                                offset_2 = -1
                                break

                            children_3 = None
                            value_0 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        while True: # start choice
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                _match = regex_33.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                if buf[offset_4:offset_4+2] == '\\x':
                                                    offset_4 += 2
                                                    column_4 += 2
                                                else:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    _match = regex_34.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break


                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                if buf[offset_4:offset_4+2] == '\\u':
                                                    offset_4 += 2
                                                    column_4 += 2
                                                else:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    if buf[offset_5:offset_5+3] == '000':
                                                        offset_5 += 3
                                                        column_5 += 3
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_34.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    _match = regex_36.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_37.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break


                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                if buf[offset_4:offset_4+2] == '\\U':
                                                    offset_4 += 2
                                                    column_4 += 2
                                                else:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    if buf[offset_5:offset_5+7] == '0000000':
                                                        offset_5 += 7
                                                        column_5 += 7
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_34.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    if buf[offset_5:offset_5+4] == '0000':
                                                        offset_5 += 4
                                                        column_5 += 4
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_36.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_37.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break


                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                _match = regex_38.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_3 = -1 # no more choices
                                            break # end choice
                                        if offset_3 == -1:
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_0 += 1
                                if offset_2 == -1:
                                    break
                                value_1 = count_0

                                break
                            if offset_2 == -1:
                                break
                            value_0.name = 'rson_string'
                            value_0.end = offset_2
                            value_0.end_column = column_2
                            value_0.value = None
                            children_2.append(value_0)

                            if buf[offset_2:offset_2+1] == '"':
                                offset_2 += 1
                                column_2 += 1
                            else:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_2 = offset_1
                        column_2 = column_1
                        indent_column_2 = list(indent_column_1)
                        partial_tab_offset_2 = partial_tab_offset_1
                        partial_tab_width_2 = partial_tab_width_1
                        children_2 = [] if children_1 is not None else None
                        while True: # case
                            if buf[offset_2:offset_2+1] == "'":
                                offset_2 += 1
                                column_2 += 1
                            else:
                                offset_2 = -1
                                break

                            children_3 = None
                            value_2 = Node(None, offset_2, offset_2, column_2, column_2, children_3, None)
                            while True: # start capture
                                count_0 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        while True: # start choice
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                _match = regex_39.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                if buf[offset_4:offset_4+2] == '\\x':
                                                    offset_4 += 2
                                                    column_4 += 2
                                                else:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    _match = regex_34.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break


                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                if buf[offset_4:offset_4+2] == '\\u':
                                                    offset_4 += 2
                                                    column_4 += 2
                                                else:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    if buf[offset_5:offset_5+2] == '00':
                                                        offset_5 += 2
                                                        column_5 += 2
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_34.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    _match = regex_36.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_37.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break


                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                if buf[offset_4:offset_4+2] == '\\U':
                                                    offset_4 += 2
                                                    column_4 += 2
                                                else:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    if buf[offset_5:offset_5+6] == '000000':
                                                        offset_5 += 6
                                                        column_5 += 6
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_34.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                while True: # start reject
                                                    children_6 = []
                                                    offset_5 = offset_4 + 0
                                                    column_5 = column_4
                                                    indent_column_5 = list(indent_column_4)
                                                    partial_tab_offset_5 = partial_tab_offset_4
                                                    partial_tab_width_5 = partial_tab_width_4
                                                    if buf[offset_5:offset_5+4] == '0000':
                                                        offset_5 += 4
                                                        column_5 += 4
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_36.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    _match = regex_37.match(buf, offset_5)
                                                    if _match:
                                                        _end = _match.end()
                                                        column_5 += (_end - offset_5)
                                                        offset_5 = _end
                                                    else:
                                                        offset_5 = -1
                                                        break

                                                    break
                                                if offset_5 != -1:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                _match = regex_35.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break


                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_4 = offset_3
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            children_5 = [] if children_4 is not None else None
                                            while True: # case
                                                _match = regex_38.match(buf, offset_4)
                                                if _match:
                                                    _end = _match.end()
                                                    column_4 += (_end - offset_4)
                                                    offset_4 = _end
                                                else:
                                                    offset_4 = -1
                                                    break

                                                break
                                            if offset_4 != -1:
                                                offset_3 = offset_4
                                                column_3 = column_4
                                                indent_column_3 = indent_column_4
                                                partial_tab_offset_3 = partial_tab_offset_4
                                                partial_tab_width_3 = partial_tab_width_4
                                                if children_5 is not None and children_5 is not None:
                                                    children_4.extend(children_5)
                                                break
                                            # end case
                                            offset_3 = -1 # no more choices
                                            break # end choice
                                        if offset_3 == -1:
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_0 += 1
                                if offset_2 == -1:
                                    break
                                value_3 = count_0

                                break
                            if offset_2 == -1:
                                break
                            value_2.name = 'rson_string'
                            value_2.end = offset_2
                            value_2.end_column = column_2
                            value_2.value = None
                            children_2.append(value_2)

                            if buf[offset_2:offset_2+1] == "'":
                                offset_2 += 1
                                column_2 += 1
                            else:
                                offset_2 = -1
                                break


                            break
                        if offset_2 != -1:
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            if children_2 is not None and children_2 is not None:
                                children_1.extend(children_2)
                            break
                        # end case
                        offset_1 = -1 # no more choices
                        break # end choice
                    if offset_1 == -1:
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    children_2 = None
                    value_4 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        _match = regex_40.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_4.name = 'rson_number'
                    value_4.end = offset_1
                    value_4.end_column = column_1
                    value_4.value = None
                    children_1.append(value_4)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    children_2 = []
                    value_5 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        if buf[offset_1:offset_1+4] == 'true':
                            offset_1 += 4
                            column_1 += 4
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_5.name = 'rson_bool'
                    value_5.end = offset_1
                    value_5.end_column = column_1
                    value_5.value = None
                    children_1.append(value_5)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    children_2 = []
                    value_6 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        if buf[offset_1:offset_1+5] == 'false':
                            offset_1 += 5
                            column_1 += 5
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_6.name = 'rson_bool'
                    value_6.end = offset_1
                    value_6.end_column = column_1
                    value_6.value = None
                    children_1.append(value_6)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    children_2 = []
                    value_7 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        if buf[offset_1:offset_1+4] == 'null':
                            offset_1 += 4
                            column_1 += 4
                        else:
                            offset_1 = -1
                            break

                        break
                    if offset_1 == -1:
                        break
                    value_7.name = 'rson_null'
                    value_7.end = offset_1
                    value_7.end_column = column_1
                    value_7.value = None
                    children_1.append(value_7)


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_inline_directive(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_list(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            if buf[offset_0:offset_0+1] == '[':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break

            count_0 = 0
            while True:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    count_1 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_1 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_1 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    if buf[offset_1:offset_1+1] == '#':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    _match = regex_41.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    if offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                            offset_1 +=2
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_1 +=1
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        else:
                            offset_1 = -1
                            break
                    else:
                        offset_1 = -1
                        break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if offset_0 == -1:
                break
            value_0 = count_0

            count_0 = 0
            while offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                    offset_0 +=2
                    column_0 = 0
                    indent_column_0[:] = (0, )
                elif codepoint in '\r\n':
                    offset_0 +=1
                    column_0 = 0
                    indent_column_0[:] = (0, )
                    count_0 +=1
                elif codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break


            children_1 = []
            value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                count_0 = 0
                while count_0 < 1:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_value(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        count_1 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                count_2 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        count_3 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_3 += width
                                                    column_3 += width
                                                    offset_3 += 1
                                                else:
                                                    count_3 += 1
                                                    column_3 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        if buf[offset_3:offset_3+1] == '#':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_41.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        if offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                offset_3 +=2
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_3 +=1
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            else:
                                                offset_3 = -1
                                                break
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_2 += 1
                                if offset_2 == -1:
                                    break
                                value_4 = count_2

                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_2 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break


                                if buf[offset_2:offset_2+1] == ',':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_2 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        count_3 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_3 += width
                                                    column_3 += width
                                                    offset_3 += 1
                                                else:
                                                    count_3 += 1
                                                    column_3 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        if buf[offset_3:offset_3+1] == '#':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_41.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        if offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                offset_3 +=2
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_3 +=1
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            else:
                                                offset_3 = -1
                                                break
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_2 += 1
                                if offset_2 == -1:
                                    break
                                value_5 = count_2

                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_2 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break


                                offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_rson_value(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                if offset_2 == -1: break


                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                        if offset_1 == -1:
                            break
                        value_3 = count_1

                        count_1 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                if buf[offset_2:offset_2+1] == '#':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                _match = regex_41.match(buf, offset_2)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_2)
                                    offset_2 = _end
                                else:
                                    offset_2 = -1
                                    break

                                if offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    else:
                                        offset_2 = -1
                                        break
                                else:
                                    offset_2 = -1
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                        if offset_1 == -1:
                            break
                        value_6 = count_1

                        count_1 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                                count_1 +=1
                            elif codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_1 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_1 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break


                        count_1 = 0
                        while count_1 < 1:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == ',':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_2 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        count_3 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_3 += width
                                                    column_3 += width
                                                    offset_3 += 1
                                                else:
                                                    count_3 += 1
                                                    column_3 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        if buf[offset_3:offset_3+1] == '#':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_41.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        if offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                offset_3 +=2
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_3 +=1
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            else:
                                                offset_3 = -1
                                                break
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_2 += 1
                                if offset_2 == -1:
                                    break
                                value_8 = count_2

                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_2 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break


                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                            break
                        if offset_1 == -1:
                            break
                        value_7 = count_1

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                    break
                if offset_0 == -1:
                    break
                value_2 = count_0

                break
            if offset_0 == -1:
                break
            value_1.name = 'rson_list'
            value_1.end = offset_0
            value_1.end_column = column_0
            value_1.value = None
            children_0.append(value_1)

            if buf[offset_0:offset_0+1] == ']':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_key(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_string(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_remark_identifier(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_1, partial_tab_offset_1, partial_tab_width_1)
                    if offset_1 == -1: break



                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_pair(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            children_1 = []
            value_0 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_rson_key(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                count_0 = 0
                while True:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        count_1 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_1 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_1 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if buf[offset_1:offset_1+1] == '#':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        _match = regex_41.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if offset_0 == -1:
                    break
                value_1 = count_0

                count_0 = 0
                while offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        offset_0 +=2
                        column_0 = 0
                        indent_column_0[:] = (0, )
                    elif codepoint in '\r\n':
                        offset_0 +=1
                        column_0 = 0
                        indent_column_0[:] = (0, )
                        count_0 +=1
                    elif codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_0)%self.tabstop));
                            count_0 += width
                            column_0 += width
                            offset_0 += 1
                        else:
                            count_0 += 1
                            column_0 += 1
                            offset_0 += 1
                    else:
                        break


                if buf[offset_0:offset_0+1] == ':':
                    offset_0 += 1
                    column_0 += 1
                else:
                    offset_0 = -1
                    break

                count_0 = 0
                while True:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        count_1 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_1 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_1 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break

                        if buf[offset_1:offset_1+1] == '#':
                            offset_1 += 1
                            column_1 += 1
                        else:
                            offset_1 = -1
                            break

                        _match = regex_41.match(buf, offset_1)
                        if _match:
                            _end = _match.end()
                            column_1 += (_end - offset_1)
                            offset_1 = _end
                        else:
                            offset_1 = -1
                            break

                        if offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            else:
                                offset_1 = -1
                                break
                        else:
                            offset_1 = -1
                            break

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                if offset_0 == -1:
                    break
                value_2 = count_0

                count_0 = 0
                while offset_0 < buf_eof:
                    codepoint = buf[offset_0]
                    if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                        offset_0 +=2
                        column_0 = 0
                        indent_column_0[:] = (0, )
                    elif codepoint in '\r\n':
                        offset_0 +=1
                        column_0 = 0
                        indent_column_0[:] = (0, )
                        count_0 +=1
                    elif codepoint in ' \t':
                        if codepoint == '\t':
                            if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                                width = partial_tab_width_0
                            else:
                                width  = (self.tabstop-((column_0)%self.tabstop));
                            count_0 += width
                            column_0 += width
                            offset_0 += 1
                        else:
                            count_0 += 1
                            column_0 += 1
                            offset_0 += 1
                    else:
                        break


                offset_0, column_0, partial_tab_offset_0, partial_tab_width_0 = self.parse_rson_value(buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_1, partial_tab_offset_0, partial_tab_width_0)
                if offset_0 == -1: break


                break
            if offset_0 == -1:
                break
            value_0.name = 'rson_pair'
            value_0.end = offset_0
            value_0.end_column = column_0
            value_0.value = None
            children_0.append(value_0)

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_object(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            if buf[offset_0:offset_0+1] == '{':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break

            count_0 = 0
            while True:
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True:
                    #print('entry rep rule', offset_0, offset_1)
                    count_1 = 0
                    while offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint in ' \t':
                            if codepoint == '\t':
                                if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                    width = partial_tab_width_1
                                else:
                                    width  = (self.tabstop-((column_1)%self.tabstop));
                                count_1 += width
                                column_1 += width
                                offset_1 += 1
                            else:
                                count_1 += 1
                                column_1 += 1
                                offset_1 += 1
                        else:
                            break

                    if buf[offset_1:offset_1+1] == '#':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    _match = regex_41.match(buf, offset_1)
                    if _match:
                        _end = _match.end()
                        column_1 += (_end - offset_1)
                        offset_1 = _end
                    else:
                        offset_1 = -1
                        break

                    if offset_1 < buf_eof:
                        codepoint = buf[offset_1]
                        if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                            offset_1 +=2
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        elif codepoint in '\r\n':
                            offset_1 +=1
                            column_1 = 0
                            indent_column_1[:] = (0, )
                        else:
                            offset_1 = -1
                            break
                    else:
                        offset_1 = -1
                        break

                    #print('safe exit rep rule', offset_0, offset_1)
                    break
                #print('exit rep rule', offset_0, offset_1)
                if offset_1 == -1:
                    break
                if offset_0 == offset_1: break
                if children_1 is not None and children_1 is not None:
                    children_0.extend(children_1)
                offset_0 = offset_1
                column_0 = column_1
                indent_column_0 = indent_column_1
                partial_tab_offset_0 = partial_tab_offset_1
                partial_tab_width_0 = partial_tab_width_1
                count_0 += 1
            if offset_0 == -1:
                break
            value_0 = count_0

            count_0 = 0
            while offset_0 < buf_eof:
                codepoint = buf[offset_0]
                if codepoint == '\r' and offset_0 + 1 < buf_eof and buf[offset_0+1] == '\n':
                    offset_0 +=2
                    column_0 = 0
                    indent_column_0[:] = (0, )
                elif codepoint in '\r\n':
                    offset_0 +=1
                    column_0 = 0
                    indent_column_0[:] = (0, )
                    count_0 +=1
                elif codepoint in ' \t':
                    if codepoint == '\t':
                        if offset_0 == partial_tab_offset_0 and partial_tab_width_0 > 0:
                            width = partial_tab_width_0
                        else:
                            width  = (self.tabstop-((column_0)%self.tabstop));
                        count_0 += width
                        column_0 += width
                        offset_0 += 1
                    else:
                        count_0 += 1
                        column_0 += 1
                        offset_0 += 1
                else:
                    break


            children_1 = []
            value_1 = Node(None, offset_0, offset_0, column_0, column_0, children_1, None)
            while True: # start capture
                count_0 = 0
                while count_0 < 1:
                    offset_1 = offset_0
                    column_1 = column_0
                    indent_column_1 = list(indent_column_0)
                    partial_tab_offset_1 = partial_tab_offset_0
                    partial_tab_width_1 = partial_tab_width_0
                    children_2 = [] if children_1 is not None else None
                    while True:
                        #print('entry rep rule', offset_0, offset_1)
                        offset_1, column_1, partial_tab_offset_1, partial_tab_width_1 = self.parse_rson_pair(buf, buf_start, buf_eof, offset_1, column_1, indent_column_1, prefix_0, children_2, partial_tab_offset_1, partial_tab_width_1)
                        if offset_1 == -1: break


                        count_1 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break

                                if buf[offset_2:offset_2+1] == '#':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                _match = regex_41.match(buf, offset_2)
                                if _match:
                                    _end = _match.end()
                                    column_2 += (_end - offset_2)
                                    offset_2 = _end
                                else:
                                    offset_2 = -1
                                    break

                                if offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    else:
                                        offset_2 = -1
                                        break
                                else:
                                    offset_2 = -1
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                        if offset_1 == -1:
                            break
                        value_3 = count_1

                        count_1 = 0
                        while offset_1 < buf_eof:
                            codepoint = buf[offset_1]
                            if codepoint == '\r' and offset_1 + 1 < buf_eof and buf[offset_1+1] == '\n':
                                offset_1 +=2
                                column_1 = 0
                                indent_column_1[:] = (0, )
                            elif codepoint in '\r\n':
                                offset_1 +=1
                                column_1 = 0
                                indent_column_1[:] = (0, )
                                count_1 +=1
                            elif codepoint in ' \t':
                                if codepoint == '\t':
                                    if offset_1 == partial_tab_offset_1 and partial_tab_width_1 > 0:
                                        width = partial_tab_width_1
                                    else:
                                        width  = (self.tabstop-((column_1)%self.tabstop));
                                    count_1 += width
                                    column_1 += width
                                    offset_1 += 1
                                else:
                                    count_1 += 1
                                    column_1 += 1
                                    offset_1 += 1
                            else:
                                break


                        count_1 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == ',':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_2 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        count_3 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_3 += width
                                                    column_3 += width
                                                    offset_3 += 1
                                                else:
                                                    count_3 += 1
                                                    column_3 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        if buf[offset_3:offset_3+1] == '#':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_41.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        if offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                offset_3 +=2
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_3 +=1
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            else:
                                                offset_3 = -1
                                                break
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_2 += 1
                                if offset_2 == -1:
                                    break
                                value_5 = count_2

                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_2 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break


                                offset_2, column_2, partial_tab_offset_2, partial_tab_width_2 = self.parse_rson_pair(buf, buf_start, buf_eof, offset_2, column_2, indent_column_2, prefix_0, children_3, partial_tab_offset_2, partial_tab_width_2)
                                if offset_2 == -1: break


                                count_2 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        count_3 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_3 += width
                                                    column_3 += width
                                                    offset_3 += 1
                                                else:
                                                    count_3 += 1
                                                    column_3 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        if buf[offset_3:offset_3+1] == '#':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_41.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        if offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                offset_3 +=2
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_3 +=1
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            else:
                                                offset_3 = -1
                                                break
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_2 += 1
                                if offset_2 == -1:
                                    break
                                value_6 = count_2

                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_2 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break


                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                        if offset_1 == -1:
                            break
                        value_4 = count_1

                        count_1 = 0
                        while count_1 < 1:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                if buf[offset_2:offset_2+1] == ',':
                                    offset_2 += 1
                                    column_2 += 1
                                else:
                                    offset_2 = -1
                                    break

                                count_2 = 0
                                while True:
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True:
                                        #print('entry rep rule', offset_2, offset_3)
                                        count_3 = 0
                                        while offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint in ' \t':
                                                if codepoint == '\t':
                                                    if offset_3 == partial_tab_offset_3 and partial_tab_width_3 > 0:
                                                        width = partial_tab_width_3
                                                    else:
                                                        width  = (self.tabstop-((column_3)%self.tabstop));
                                                    count_3 += width
                                                    column_3 += width
                                                    offset_3 += 1
                                                else:
                                                    count_3 += 1
                                                    column_3 += 1
                                                    offset_3 += 1
                                            else:
                                                break

                                        if buf[offset_3:offset_3+1] == '#':
                                            offset_3 += 1
                                            column_3 += 1
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_41.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        if offset_3 < buf_eof:
                                            codepoint = buf[offset_3]
                                            if codepoint == '\r' and offset_3 + 1 < buf_eof and buf[offset_3+1] == '\n':
                                                offset_3 +=2
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            elif codepoint in '\r\n':
                                                offset_3 +=1
                                                column_3 = 0
                                                indent_column_3[:] = (0, )
                                            else:
                                                offset_3 = -1
                                                break
                                        else:
                                            offset_3 = -1
                                            break

                                        #print('safe exit rep rule', offset_2, offset_3)
                                        break
                                    #print('exit rep rule', offset_2, offset_3)
                                    if offset_3 == -1:
                                        break
                                    if offset_2 == offset_3: break
                                    if children_4 is not None and children_4 is not None:
                                        children_3.extend(children_4)
                                    offset_2 = offset_3
                                    column_2 = column_3
                                    indent_column_2 = indent_column_3
                                    partial_tab_offset_2 = partial_tab_offset_3
                                    partial_tab_width_2 = partial_tab_width_3
                                    count_2 += 1
                                if offset_2 == -1:
                                    break
                                value_8 = count_2

                                count_2 = 0
                                while offset_2 < buf_eof:
                                    codepoint = buf[offset_2]
                                    if codepoint == '\r' and offset_2 + 1 < buf_eof and buf[offset_2+1] == '\n':
                                        offset_2 +=2
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                    elif codepoint in '\r\n':
                                        offset_2 +=1
                                        column_2 = 0
                                        indent_column_2[:] = (0, )
                                        count_2 +=1
                                    elif codepoint in ' \t':
                                        if codepoint == '\t':
                                            if offset_2 == partial_tab_offset_2 and partial_tab_width_2 > 0:
                                                width = partial_tab_width_2
                                            else:
                                                width  = (self.tabstop-((column_2)%self.tabstop));
                                            count_2 += width
                                            column_2 += width
                                            offset_2 += 1
                                        else:
                                            count_2 += 1
                                            column_2 += 1
                                            offset_2 += 1
                                    else:
                                        break


                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_1 += 1
                            break
                        if offset_1 == -1:
                            break
                        value_7 = count_1

                        #print('safe exit rep rule', offset_0, offset_1)
                        break
                    #print('exit rep rule', offset_0, offset_1)
                    if offset_1 == -1:
                        break
                    if offset_0 == offset_1: break
                    if children_2 is not None and children_2 is not None:
                        children_1.extend(children_2)
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    count_0 += 1
                    break
                if offset_0 == -1:
                    break
                value_2 = count_0

                break
            if offset_0 == -1:
                break
            value_1.name = 'rson_object'
            value_1.end = offset_0
            value_1.end_column = column_0
            value_1.value = None
            children_0.append(value_1)

            if buf[offset_0:offset_0+1] == '}':
                offset_0 += 1
                column_0 += 1
            else:
                offset_0 = -1
                break


            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0

    def parse_rson_string(self, buf, buf_start, buf_eof, offset_0, column_0, indent_column_0, prefix_0, children_0, partial_tab_offset_0, partial_tab_width_0):
        while True: # note: return at end of loop
            while True: # start choice
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    if buf[offset_1:offset_1+1] == '"':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    children_2 = None
                    value_0 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                while True: # start choice
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        _match = regex_33.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        if buf[offset_3:offset_3+2] == '\\x':
                                            offset_3 += 2
                                            column_3 += 2
                                        else:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            _match = regex_34.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        if buf[offset_3:offset_3+2] == '\\u':
                                            offset_3 += 2
                                            column_3 += 2
                                        else:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            if buf[offset_4:offset_4+3] == '000':
                                                offset_4 += 3
                                                column_4 += 3
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_34.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            _match = regex_36.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_37.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        if buf[offset_3:offset_3+2] == '\\U':
                                            offset_3 += 2
                                            column_3 += 2
                                        else:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            if buf[offset_4:offset_4+7] == '0000000':
                                                offset_4 += 7
                                                column_4 += 7
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_34.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            if buf[offset_4:offset_4+4] == '0000':
                                                offset_4 += 4
                                                column_4 += 4
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_36.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_37.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        _match = regex_38.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_2 = -1 # no more choices
                                    break # end choice
                                if offset_2 == -1:
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_0 += 1
                        if offset_1 == -1:
                            break
                        value_1 = count_0

                        break
                    if offset_1 == -1:
                        break
                    value_0.name = 'rson_string'
                    value_0.end = offset_1
                    value_0.end_column = column_1
                    value_0.value = None
                    children_1.append(value_0)

                    if buf[offset_1:offset_1+1] == '"':
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_1 = offset_0
                column_1 = column_0
                indent_column_1 = list(indent_column_0)
                partial_tab_offset_1 = partial_tab_offset_0
                partial_tab_width_1 = partial_tab_width_0
                children_1 = [] if children_0 is not None else None
                while True: # case
                    if buf[offset_1:offset_1+1] == "'":
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break

                    children_2 = None
                    value_2 = Node(None, offset_1, offset_1, column_1, column_1, children_2, None)
                    while True: # start capture
                        count_0 = 0
                        while True:
                            offset_2 = offset_1
                            column_2 = column_1
                            indent_column_2 = list(indent_column_1)
                            partial_tab_offset_2 = partial_tab_offset_1
                            partial_tab_width_2 = partial_tab_width_1
                            children_3 = [] if children_2 is not None else None
                            while True:
                                #print('entry rep rule', offset_1, offset_2)
                                while True: # start choice
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        _match = regex_39.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        if buf[offset_3:offset_3+2] == '\\x':
                                            offset_3 += 2
                                            column_3 += 2
                                        else:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            _match = regex_34.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        if buf[offset_3:offset_3+2] == '\\u':
                                            offset_3 += 2
                                            column_3 += 2
                                        else:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            if buf[offset_4:offset_4+2] == '00':
                                                offset_4 += 2
                                                column_4 += 2
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_34.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            _match = regex_36.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_37.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        if buf[offset_3:offset_3+2] == '\\U':
                                            offset_3 += 2
                                            column_3 += 2
                                        else:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            if buf[offset_4:offset_4+6] == '000000':
                                                offset_4 += 6
                                                column_4 += 6
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_34.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        while True: # start reject
                                            children_5 = []
                                            offset_4 = offset_3 + 0
                                            column_4 = column_3
                                            indent_column_4 = list(indent_column_3)
                                            partial_tab_offset_4 = partial_tab_offset_3
                                            partial_tab_width_4 = partial_tab_width_3
                                            if buf[offset_4:offset_4+4] == '0000':
                                                offset_4 += 4
                                                column_4 += 4
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_36.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            _match = regex_37.match(buf, offset_4)
                                            if _match:
                                                _end = _match.end()
                                                column_4 += (_end - offset_4)
                                                offset_4 = _end
                                            else:
                                                offset_4 = -1
                                                break

                                            break
                                        if offset_4 != -1:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        _match = regex_35.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break


                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_3 = offset_2
                                    column_3 = column_2
                                    indent_column_3 = list(indent_column_2)
                                    partial_tab_offset_3 = partial_tab_offset_2
                                    partial_tab_width_3 = partial_tab_width_2
                                    children_4 = [] if children_3 is not None else None
                                    while True: # case
                                        _match = regex_38.match(buf, offset_3)
                                        if _match:
                                            _end = _match.end()
                                            column_3 += (_end - offset_3)
                                            offset_3 = _end
                                        else:
                                            offset_3 = -1
                                            break

                                        break
                                    if offset_3 != -1:
                                        offset_2 = offset_3
                                        column_2 = column_3
                                        indent_column_2 = indent_column_3
                                        partial_tab_offset_2 = partial_tab_offset_3
                                        partial_tab_width_2 = partial_tab_width_3
                                        if children_4 is not None and children_4 is not None:
                                            children_3.extend(children_4)
                                        break
                                    # end case
                                    offset_2 = -1 # no more choices
                                    break # end choice
                                if offset_2 == -1:
                                    break

                                #print('safe exit rep rule', offset_1, offset_2)
                                break
                            #print('exit rep rule', offset_1, offset_2)
                            if offset_2 == -1:
                                break
                            if offset_1 == offset_2: break
                            if children_3 is not None and children_3 is not None:
                                children_2.extend(children_3)
                            offset_1 = offset_2
                            column_1 = column_2
                            indent_column_1 = indent_column_2
                            partial_tab_offset_1 = partial_tab_offset_2
                            partial_tab_width_1 = partial_tab_width_2
                            count_0 += 1
                        if offset_1 == -1:
                            break
                        value_3 = count_0

                        break
                    if offset_1 == -1:
                        break
                    value_2.name = 'rson_string'
                    value_2.end = offset_1
                    value_2.end_column = column_1
                    value_2.value = None
                    children_1.append(value_2)

                    if buf[offset_1:offset_1+1] == "'":
                        offset_1 += 1
                        column_1 += 1
                    else:
                        offset_1 = -1
                        break


                    break
                if offset_1 != -1:
                    offset_0 = offset_1
                    column_0 = column_1
                    indent_column_0 = indent_column_1
                    partial_tab_offset_0 = partial_tab_offset_1
                    partial_tab_width_0 = partial_tab_width_1
                    if children_1 is not None and children_1 is not None:
                        children_0.extend(children_1)
                    break
                # end case
                offset_0 = -1 # no more choices
                break # end choice
            if offset_0 == -1:
                break

            break
        return offset_0, column_0, partial_tab_offset_0, partial_tab_width_0
