# Remark Document Language Specification

@Metadata {
   	version: "2019-11-0",
	title: "Remark Document Language Specification", 
}

&TestReport

&begin::section intro

> I also dream about a modern replacement for LaTeX
> designed from the ground up to target multiple output formats
> (at least PDF, HTML, EPUB).
> &em{John MacFarlane, author of Pandoc, editor of CommonMark.}

	`````remark
	# A Remarkable Example Document

	Remarkable is a CommonMark-alike markup language designed
	for writing larger technical documents.

	- It has lists
	- It has *bold*, _italic_, and ~strikethrough~ text
	- It even has `inline code` fragments

	Unlike CommonMark, there's a standard long form for
	annotating text: `&directive_name[args]{text}` 

	```
	&list:
		&item: It has Lists
		&item: It has &strong{bold}, &emph{italic},
		   and &strike{strikethrough} text
		&item: It even has &code`inline code` fragments
	```

	`````

&end::section 

&begin::section toc

# Table of Contents

- Remark(able), a restructured markup format.
	- Why Remark?
	- A Tour of the Syntax
	
- Documents
	- Fragments, Document, Document Set
	- Metadata
	- Examples
- Inlines
	- Words, Whitespace, Breaks
	- Escaping, Entities
	- Inline styling
	- Inline Code, Emojis, Raw Spans
- Blocks
	- Paragraphs
	- Headers
	- Prose Blocks
	- Code Blocks
	- Blockquotes
	- Horizontal Rules
	- Lists
	- Tables
- Directives
	- Entities
	- Inline Directives, Inline Code Directives 
	- Paragraph Directives
	- Block Directives
		- Indented Block Directives
		- Delimited Directives
		- List, Blockquote, Prose, Table Directives
- Document Object Model
	- Types
	- Grammar
	- RSON
- HTML5 Output 
- Index, Reference

&end

&begin::section overview

# Remark(able), a restructured markup format.

## Why Remark?

Markdown is great for small comments or blog posts. LaTeX is good for writing
a book on Mathematics. RST is good for technical documentation, and HTML is good
for webpages. So why Remark?

- A consistent way to escape text 
- CommonMark like shortcuts (`---` for a horizontal rule)
- LaTeX/HTML like named Directives (`&hr`)
- An internal document object model
- Standard ways to embed structured data
- Not just HTML output, too

The biggest difference might be that Remark has a Grammar.

Unlike LaTeX, unlike Markdown, and unlike RST, Remark is canonically implemented in terms of a parsing evaluation grammar. 


## A Tour of The Syntax

&TestCase:
	```remark
	\* \` \> \# \\ \& \- \_ \: \@ \[ \]
	```
	@Fragment {text: [ @Paragraph { text : [
	"*", " ", "`", " ", ">", " ", "#", " ", "\\",
	" " , "&", " ", "-", " " , "_", " ", ":", " ",
	"@", " ", "[", " ", "]",
	
	]} ]}
	
	You can use &code{\\} to escape any punctuation

&TestCase:
	```remark
	*text* **text** ***text***
	```
	@Fragment {text: [ @Paragraph { text : [
		@Strong {text: ["text"]}, " ",
		@Strong {text: ["text"]}, " ",
		@Strong {text: ["text"]}, 
	]} ]}
	
	You can use `*` to embolden text. Unlike Markdown, doubling or 
	tripling the markers does not change their semantic meaning.

&TestCase:
	```remark
	_italic_ ~~~strike~~~ ``code``

	```
	@Fragment {text: [ @Paragraph { text : [
		@Emphasis {text: ["italic"]}, " ",
		@Strikethrough {text: ["strike"]}, " ",
		@CodeSpan {text: ["code"]}, 
	]} ]}
	
	Like CommonMark, you can use `_` for emphasised text. Unlike
	GitHub\ Flavoured\ Markdown (GFM), `~`, `~~`, and `~~~` work
	for strikethrough text. 

	Like for `*`, doubling or tripling \code{\`}, `_`, and `~` 
	also work, and do not change meaning

&TestCase:
	```remark
	Example :emoji:
	---
	```
	@Fragment {text: [ 
		@Paragraph { text : [
			"Example", " ", 
			@Emoji {name: "emoji"},
		]},
		@HorizontalRule {},
	 ]}
	
	There's also shorthand for `:emoji:`.

&TestCase:
	```remark
	An  Example  Non\ Breaking  space,  and\
	a  hard  break.
	```
	@Fragment {text: [ @Paragraph { text : [
	"An", " ", "Example", " ",  "Non", @Nbsp {text:[" "]}, "Breaking", " ",
	"space,", " ", "and", @Hardbreak {text: ["\n"]}, "a", " ", "hard"," ",
	"break.",
	]} ]}
	
	Like how `\` can be used to escape punctuation, it can also
	be used to preserve newlines and spaces.

&TestCase:
	```remark
	# Example
	# Heading
	```
	@Fragment {text: [
		@Heading { level: 1,  text : [
			"Example", 
			@Softbreak {"text": ["\n"]},
			"Heading",
		]}
	]}
	
	There is \q{atx-style} headings, which can span multiple
	lines.

&TestCase:
	```remark
	> Example
	> Blockquote

	> > Another Example
	```
	@Fragment {text: [
		@Blockquote { text: [ @Paragraph { text: [
			"Example", 
			@Softbreak {"text": ["\n"]},
			"Blockquote",
		]} ]},
		@Blockquote { text : [
			@Blockquote { text: [ @Paragraph { text: [
				"Another", " " , "Example", 
			]} ]},
		]},
	]}
	
	Like Markdown, `>` can be used to mark out blockquotes. Unlike
	Markdown, or CommonMark, the `>` cannot be omitted.

	Additionally, An empty line ends a blockquote.
	Blockquotes

&TestCase:
	```remark
	- 1
	- 2


	- 3
	- 4
	```
	@Fragment { text: [
		@BulletList { text: [
			@ItemSpan { text: ["1"] },
			@ItemSpan { text: ["2"] },
		] },
		@BulletList { text: [
			@ItemSpan { text: ["3"] },
			@ItemSpan { text: ["4"] },
		] },
	] }
	
	Bulleted lists can be specified with `-`. There has to be
	whitespace after the `-` (or a newline)

	There can be at most one blank line between lists

&TestCase:
	```remark
	&list[start:1]:
	- 1
	- 2
	- 3
	- 4
	```
	@Fragment { text: [
		@NumberedList { start: 1, text: [
			@ItemSpan { text: ["1"] },
			@ItemSpan { text: ["2"] },
			@ItemSpan { text: ["3"] },
			@ItemSpan { text: ["4"] },
		] },
	] }
	
	Numbered lists are also specified with `-`, but inside
	a block directive `&list[start: 1]:`

&TestCase:
	```remark
	| Prose blocks are special
	|   line breaks and whitespace preserved
	|      like foot prints in snow
	```
	@Fragment {"text": [
		@Prose {"text": [
			"Prose", " ", "blocks", " ", "are",
			 " ", "special", @Hardbreak {"text": ["\n"]}, 
			@Whitespace {"text": ["  "]}, "line", " ", "breaks",
			 " ", "and", " ", "whitespace", " ", "preserved",
			 @Hardbreak {"text": ["\n"]}, 
			@Whitespace {"text": ["     "]}, "like", " ", "foot",
			 " ", "prints", " ", "in", " ", "snow"
		]}
	]}

	Prose Blocks preserve whitespace within a single paragraph.
	The `|` must be on every line.

&TestCase:
	````remark
	```
	1 + 2
	```
	````
	@Fragment {"text": [@CodeBlock {"text": ["1 + 2", "\n"]}]}

	Code Blocks work similarly to Markdown.

&TestCase:
	```remark
	| header 1 | header 2 |
	| :------: | :------: |
	| cell 1   | cell 2   |
	```
	@Fragment { "text": [
		@TableBlock { "column_align": ["center", "center"], "text": [
			@TableHeader {"text": [
				@TableCellSpan {"text": ["header", " ", "1"]}, 
				@TableCellSpan {"text": ["header", " ", "2"]}
			]},
			@TableRow {"text": [
				@TableCellSpan {"text": ["cell", " ", "1"]},
				@TableCellSpan {"text": ["cell", " ", "2"]}
			]}
		]}
	]}
	Tables work like GFM.

&TestCase:
	```remark
	@Paragraph { text: ["Raw", " ", "Text!"] }
	```
	@Fragment { text: [ @Paragraph { text: ["Raw", " ", "Text!"] } ]}
	
	You can embed raw dom nodes inside a remakable document, too!


&end

&begin::section document

# Documents and Fragments

A `Fragment` is a document that carries no metadata. An empty file is always 
a `Fragment`.

@TestCase {
	input_text: "",
	output_dom: @Fragment {},
}

If metadata is provided, a `Document` is returned instead.

&TestCase:
	```remark
	&metadata[title: "Example"]

	```
	@Document {title: "Example", text: []}

Alternatively, a `Document` can be created explicitly, using a directive:

&TestCase:
	```remark
	&begin::document
	&end
	```
	@Document {}

A document can also be specified using data structures, rather than directives:

@TestCase {
	input_text: "@Document {}",
	output_dom: @Document {},
}

If the only content in the document is a data structure, that is returned instead
of a `Fragment` or a `Document`.

@TestCase {
	input_text: "@UnknownExample {}",
	output_dom: @UnknownExample {},
}

@TestCase {
	input_text: "@DocumentSet {}",
	output_dom: @DocumentSet {},
}

Fragments can be specified with directives, or data structures too:

@TestCase {
	input_text: "@Fragment {}",
	output_dom: @Fragment {},
}

&TestCase:
	```remark
	&begin::fragment
        &end
	```
	@Fragment {}

# Metadata


&TestCase:
	```remark
	&metadata
	```
	@Document {}

&TestCase:
	```remark
	&metadata
	```
	@Document {}

&TestCase:
	```remark
	&metadata[]
	```
	@Document {}

&TestCase:
	```remark
	@Metadata {}
	```
	@Document {}

	
&TestCase:
	```remark
	@metadata {}
	```

	@metadata {}
		
	If mispelled, and the solitary item, no `Document` or `Fragment`
	is returned

# BOM

Byte order mark is ignored at start of file.

&end::section document

&begin::section inlines

@TestCase {
	input_text: "Example text.",
	output_dom: @Fragment {text: [@Paragraph {text: ["Example", " ", "text."]}] },
}


@TestCase {
	input_text: "&paragraph: Hi",
	output_dom: @Fragment {text: [@Paragraph {text: ["Hi"]}] },
}

&end::section inlines

&begin::section blocks

# Blocks

## Paragraph

## Header

## Code Blocks


&TestCase:
	````remark
		```
 	    	1 + 2
		```
	````
	@Fragment {"text": [@CodeBlock {"text": ["1 + 2", "\n"]}]}

	Code Blocks work similarly to Markdown.
	

&end::section blocks

&begin::section directives

# Directives

## Entities

&TestCase:
	```remark
	&65;
	```
	@Fragment {
		text: [
			@Paragraph { text: [@Codepoint {n: 65}]},
		]
	}
&TestCase:
	```remark
	&0x41;
	```
	@Fragment {
		text: [
			@Paragraph { text: [@Codepoint {n: 0x41}]},
		]
	}
&TestCase:
	```remark
	&#64;&#0x41 &#x42&x43
	```
	@Fragment { text: [ @Paragraph { text: [
		@Codepoint {n: 0x40}, 
		@Codepoint {n: 0x41}, 
		" ", 
		@Codepoint {n: 0x42},  
		@Codepoint {n: 0x43}, 
	]}, ] }



## Begin-End Directive

- `&begin::name` and optionally, `&end`
- end of file collapses all open blocks
- `&end` collapses current open block
- `&end::name` collapses all blocks until name matches
- Optionally specify an identifier, `&begin::name identifier`
- `&end::name identifier` closes all blocks until name and identifier matches

&TestCase:
	```remark
	&begin::fragment
	  &begin::blockquote
	&end::fragment
	```
	@Fragment {text: [@Blockquote {}]}

&TestCase:
	```remark
	&begin::blockquote outer
	    &begin::blockquote
	&end::blockquote outer
	```
	@Fragment {text: [ @Blockquote {text: [ @Blockquote {text: []} ]} ]}

&TestCase:
	```remark
	&begin::fragment
	&begin::blockquote
	```
	@Fragment {text: [@Blockquote {}]}

&end::section directives

&begin::section dom

&end::section dom

