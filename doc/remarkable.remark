# Remark Document Language Specification

@metadata {
   	version: "2022.01.r0",
	title: "Remark Document Language Specification", 
}

@TestReport

@begin::section intro

	`````remark
	# A Remarkable Example Document

	Remarkable is a CommonMark-alike markup language designed
	for writing larger technical documents.

	- It has *bold*, _italic_, and ~strikethrough~ text
	- It has lists, blockquotes, tables, and prose sections
	- It even has `inline code` fragments

	Unlike CommonMark, there's a standard long form for
	annotating text, `@block_directive` and `$inline_directive[text]{args}`

	```
	@begin:list
		@item It has Lists
		@item It has $strong[bold], $emph[italic],
		   and $strike[strikethrough] text
		@item It even has $code`inline code` fragments
	@end:list
	```

	`````

@end::section 

@begin::section toc

# Table of Contents

- Remark(able), a restructured markup format.
	- Why Remark?
	- A Tour of the Syntax
- Documents
	- Fragments, Document, Document Set
	- Metadata
	- Examples
- Inlines
	- Words, Whitespace, Breaks
	- Escaping, Entities
	- Inline styling
	- Inline Code, Emojis, Raw Spans
- Blocks
	- Paragraphs
	- Headers
	- Prose Blocks
	- Code Blocks
	- Blockquotes
	- Horizontal Rules
	- Lists
	- Tables
- Directives
	- Entities
	- Inline Directives, Inline Code Directives 
	- Paragraph Directives
	- Delimited Block Directives
	- List, Blockquote, Prose, Table Directives
- Document Object Model
	- Types
	- Grammar
	- RSON
- HTML5 Output 
- Index, Reference

@end

@begin::section overview

# Remark(able), a restructured markup format.

> I dream about a modern replacement for LaTeX, designed from the ground up to target multiple output formats.
> &em[John MacFarlane, author of Pandoc, editor of CommonMark.]


## Why Remark?

Markdown is great for small comments or blog posts. LaTeX is good for writing
a book on Mathematics. RST is good for technical documentation, and HTML is good
for webpages. So why Remark?

- A consistent way to escape text 
- CommonMark alike shortcuts and markup
- Named Directives for inline and blocks
- An internal document object model
- Standard ways to embed structured data
- Not just HTML output, too

Unlike LaTeX, unlike Markdown, and unlike RST, Remark is canonically implemented in terms of a parsing evaluation grammar. 


## A Tour of The Syntax

@TestCase
      - [input_text]
	```remark
	\* \` \> \# \\ \& \- \_ \: \@ \[ \]
	```
      - [output_dom]
	```rson
	@Fragment {"text": [ @Paragraph { "text": [
	"*", " ", "`", " ", ">", " ", "#", " ", "\\",
	" " , "&", " ", "-", " " , "_", " ", ":", " ",
	"@", " ", "[", " ", "]",
	]} ]}
	```
      - [description]
	You can use $code[\\] to escape any punctuation

@TestCase
      - [input_text]
	```remark
	*text* **text** ***text***
	```
      - [output_dom]
	```rson
	@Fragment {"text": [ @Paragraph { "text": [
		@Strong {"text": ["text"]}, " ",
		@Strong {"text": ["text"]}, " ",
		@Strong {"text": ["text"]}, 
	]} ]}
	```
      - [description]
	You can use `*` for bold text. Unlike Markdown, doubling or 
	tripling the markers does not change their semantic meaning.

@TestCase
      - [input_text]
	```remark
	_italic_ ~~~strike~~~ ``code``

	```

      - [output_dom]
	```rson
	@Fragment {"text": [ @Paragraph { "text": [
		@Emphasis {"text": ["italic"]}, " ",
		@Strikethrough {"text": ["strike"]}, " ",
		@CodeSpan {"text": ["code"]}, 
	]} ]}
	```

      - [description]
	Like CommonMark, you can use `_` for emphasised text. Unlike
	GitHub\ Flavoured\ Markdown (GFM), `~`, `~~`, and `~~~` work
	for strikethrough text. 

	Like for `*`, doubling or tripling \code[\`], `_`, and `~` 
	also work, and do not change meaning

@TestCase
      - [input_text]
	```remark
	Example :emoji:
	---
	```
      - [output_dom]
	```rson
	@Fragment {"text": [ 
		@Paragraph { "text": [
			"Example", " ", 
			@Emoji {"name": "emoji"},
		]},
		@HorizontalRule {},
	 ]}
	```
	
      - [description]
	There's also shorthand for `:emoji:`.

@TestCase
      - [input_text]
	```remark
	An  Example  Non\ Breaking  space,  and\
	a  hard  break.
	```
      - [output_dom]
	```rson
	@Fragment {"text": [ @Paragraph { "text": [
	"An", " ", "Example", " ",  "Non", @Nbsp {"text":[" "]}, "Breaking", " ",
	"space,", " ", "and", @Hardbreak {"text": ["\n"]}, "a", " ", "hard"," ",
	"break.",
	]} ]}
	```
	
      - [description]
	Like how `\` can be used to escape punctuation, it can also
	be used to preserve newlines and spaces.

@TestCase
      - [input_text]
	```remark
	# Example
	# Heading
	```
      - [output_dom]
	```rson
	@Fragment {"text": [
		@Heading { "level": 1,  "text": [
			"Example", 
			@Softbreak {"text": ["\n"]},
			"Heading",
		]}
	]}
	```

      - [description]
	There are $q[atx-style] headings, a `# ` at the start
	of a line indicates a level-1 heading. A `## ` indicates
	a level-2 heading.

	Continuation lines have to have a `# ` prefix, but the
	number of `#`'s does not have to match.

@TestCase
      - [input_text]
	```remark
	> Example
	> Blockquote

	> > Another Example
	```
      - [output_dom]
	```rson
	@Fragment {"text": [
		@Blockquote { "text": [ @Paragraph { "text": [
			"Example", 
			@Softbreak {"text": ["\n"]},
			"Blockquote",
		]} ]},
		@Blockquote { "text": [
			@Blockquote { "text": [ @Paragraph { "text": [
				"Another", " " , "Example", 
			]} ]},
		]},
	]}
	```
	
      - [description]
	Like Markdown, `>` can be used to mark out blockquotes. Unlike
	Markdown, or CommonMark, the `>` cannot be omitted.

@TestCase
      - [input_text]
	```remark
	- 1
	- 2


	- 3
	- 4
	```
      - [output_dom]
	```rson
	@Fragment { "text": [
		@BulletList { "text": [
			@ItemSpan { "text": ["1"], "label": [] },
			@ItemSpan { "text": ["2"], "label": [] },
		] },
		@BulletList { "text": [
			@ItemSpan { "text": ["3"], "label": [] },
			@ItemSpan { "text": ["4"], "label": [] },
		] },
	] }
	```
	
      - [description]
	Bulleted lists can be specified with `-`. There has to be
	whitespace after the `-` (or a newline)

	There can be at most one blank line between lists

@TestCase
      - [input_text]
	```remark
	@list{start:1}
	- 1
	- 2
	- 3
	- 4
	```
      - [output_dom]
	```rson
	@Fragment { "text": [
		@NumberedList { "start": 1, "text": [
			@ItemSpan { "text": ["1"], "label": [] },
			@ItemSpan { "text": ["2"], "label": [] },
			@ItemSpan { "text": ["3"], "label": [] },
			@ItemSpan { "text": ["4"], "label": [] },
		] },
	] }
	```
	
      - [description]
	Numbered lists use a block directive `@list{start: 1}`

@TestCase
      - [input_text]
	```remark
	| Prose blocks are special
	|   line breaks and whitespace preserved
	|      like foot prints in snow
	```
      - [output_dom]
	```rson
	@Fragment {"text": [
		@Prose {"text": [
			"Prose", " ", "blocks", " ", "are",
			 " ", "special", @Hardbreak {"text": ["\n"]}, 
			@Whitespace {"text": ["  "]}, "line", " ", "breaks",
			 " ", "and", " ", "whitespace", " ", "preserved",
			 @Hardbreak {"text": ["\n"]}, 
			@Whitespace {"text": ["     "]}, "like", " ", "foot",
			 " ", "prints", " ", "in", " ", "snow"
		]}
	]}
	```

      - [description]
	Prose Blocks preserve whitespace within a single paragraph.
	The `|` must be on every line.

@TestCase
      - [input_text]
	````remark
	```
	1 + 2
	```
	````

      - [output_dom]
	```rson
	@Fragment {"text": [@CodeBlock {"text": ["1", " ", "+", " ", "2", "\n"]}]}
	```

      - [description]
	Code Blocks work similarly to Markdown.


@TestCase
      - [input_text]
	```remark
	| header 1 | header 2 |
	| :------: | :------: |
	| cell 1   | cell 2   |
	```
      - [output_dom]
	```rson
	@Fragment { "text": [
		@TableBlock { "column_align": ["center", "center"], "text": [
			@TableHeader {"text": [
				@TableCellSpan {"text": ["header", " ", "1"]}, 
				@TableCellSpan {"text": ["header", " ", "2"]}
			]},
			@TableRow {"text": [
				@TableCellSpan {"text": ["cell", " ", "1"]},
				@TableCellSpan {"text": ["cell", " ", "2"]}
			]}
		]}
	]}
	```
      - [description]
	Tables work like GFM.


@end

@begin::section document

# Documents and Fragments

A `Fragment` is a document that carries no metadata. An empty file is always 
a `Fragment`.

@TestCase {
	input_text: "",
	output_dom: '@Fragment {}',
	description: [@Paragraph {text: ["An", " ", "empty", " ", "document"]}],
}

If metadata is provided, a `Document` is returned instead.

@TestCase
      - [input_text]
	```remark
	@metadata{title: "Example"}

	```
	
      - [output_dom]
	```rson
	@Document {"title": "Example", "text": []}
	```

      - [description]
	Alternatively, a `Document` can be created explicitly, using a directive:

@TestCase
      - [input_text]
	```remark
	@metadata
	- [title] Example

	```
	
      - [output_dom]
	```rson
	@Document {"title": "Example", "text": []}
	```

      - [description]
	Metadata can be specified using a labeled list

@TestCase
      - [input_text]
	```remark
	@begin::document
	@end
	```
      - [output_dom]
	```rson
	@Document {}
	```

      - [description]
	A document can also be specified using data structures, rather than directives:

@TestCase {
	input_text: "@document {}",
	output_dom: '@Document {}',
}

If the only content in the document is a data structure, that is returned instead
of a `Fragment` or a `Document`.

@TestCase {
	input_text: "@UnknownExample {}",
	output_dom: '@Fragment {"text": [@BlockDirective {"name": "UnknownExample"}]}'
}

@TestCase {
	input_text: "@documentset {}",
	output_dom: '@DocumentSet {}',
}

Fragments can be specified with directives, or data structures too:

@TestCase {
	input_text: "@fragment {}",
	output_dom: '@Fragment {}',
}

@TestCase
      - [input_text]
	```remark
	@begin::fragment
        @end
	```
      - [output_dom]
	```rson
	@Fragment {}
	```
      - [description]

# Metadata


@TestCase
      - [input_text]
	```remark
	@metadata
	```
      - [output_dom]
	```rson
	@Document {}
	```
      - [description]

@TestCase
      - [input_text]
	```remark
	@metadata
	```

      - [output_dom]
	```rson
	@Document {}
	```
      - [description]

@TestCase
      - [input_text]
	```remark
	@metadata{}
	```

      - [output_dom]
	```rson
	@Document {}
	```
      - [description]

@TestCase
      - [input_text]
	```remark
	@metadata {}
	```
      - [output_dom]
	```rson
	@Document {}
	```
      - [description]
	
## BOM

@TestCase{
	input_text: "\uFEFF",
	output_dom: "@Fragment {}",
}
      - [description]
	Byte order mark is ignored at start of file.

@end::section document

@begin::section inlines

# Inlines

## Words, Tabs, Whitespace, Breaks

@TestCase{
	input_text: "Example text.",
	output_dom: '@Fragment {"text": [@Paragraph {"text": ["Example", " ", "text."]}] }',
}
      - [description]
	Whitespaces separate words. Multiple spaces are treated as a single space.

@TestCase{
	input_text: "  Example  text.  ",
	output_dom: '@Fragment {"text": [@Paragraph {"text": ["Example", " ", "text."]}] }',
}
      - [description]
	Leading, trailing whitespace is ignored within a paragraph.

@TestCase{
	input_text: "| Example  text.",
	output_dom: '@Fragment {"text": [@Prose {"text": ["Example", @Whitespace {"text":["  "]}, "text."]}] }',
} 
      - [description]
	Normally, whitespace is treated as a single ` `, but this can vary. 

@TestCase{
	input_text: " \tExample\ttext.\t",
	output_dom: '@Fragment {"text": [@Paragraph {"text": ["Example", " ", "text.",]}] }',
}
      - [description]
	Tabs are treated as whitespace
@TestCase{
	input_text: "|\tExample\ttext.\t",
	output_dom: '@Fragment {"text": [@Prose {"text": [@Whitespace {"text": ["      "]}, "Example", @Whitespace {"text": [" "]}, "text.", @Whitespace {"text": ["   "]}] }]}',
}
      - [description]
	Tabs are treated as whitespace, and are converted to spaces. The `| ` prefix is not included, and six
	spaces are left over.

@TestCase{
	input_text: "      |\tExample\ttext.\t",
	output_dom: '@Fragment {"text": [@Prose {"text": ["Example", @Whitespace {"text": [" "]}, "text.", @Whitespace {"text": ["   "]}] }]}',
 	
}
      - [description]
	Tabstop is 8, so a tab at column 8 has width 1, so there is nothing after the `| ` prefix.

@TestCase {
	input_text: "Example text.",
	output_dom: '@Fragment {"text": [@Paragraph {"text": ["Example", " ", "text."]}] }',
}
      - [description]

## Escaping, Entities

## Inline styling

## Inline Code, Emojis, Raw Spans
@TestCase {
	input_text: "Example [text].",
	output_dom: '@Fragment {"text": [@Paragraph {"text": ["Example", " ", @Span {"text":["text"]}, "."]}] }',
}
      - [description]


@end::section inlines

@begin::section blocks

# Blocks

## Paragraphs

@TestCase {
	input_text: "@paragraph Hi",
	output_dom: '@Fragment {"text": [@Paragraph {"text": ["Hi"]}] }',
}
      - [description]

## Headers

## Prose Blocks

## Code Blocks

@TestCase
      - [input_text]
	````remark
		```
 	    	1 + 2
		```
	````
      - [output_dom]
	```rson
	@Fragment {"text": [@CodeBlock {"text": ["1", " ", "+", " ", "2", "\n"]}]}
	```

      - [description]
	Code Blocks work similarly to Markdown.
	
## Blockquotes

## Horizontal Rules

## Lists

## Definition Lists

## Tables

@TestCase
      - [input_text]
	```remark
	| header 1 | header 2 |
	| :------: | :------: |
	| cell 1   | cell 2   |
	```
      - [output_dom]
	```rson
	@Fragment { "text": [
		@TableBlock { "column_align": ["center", "center"], "text": [
			@TableHeader {"text": [
				@TableCellSpan {"text": ["header", " ", "1"]}, 
				@TableCellSpan {"text": ["header", " ", "2"]}
			]},
			@TableRow {"text": [
				@TableCellSpan {"text": ["cell", " ", "1"]},
				@TableCellSpan {"text": ["cell", " ", "2"]}
			]}
		]}
	]}
	```
      - [description]
	Tables work like GFM.

@end::section blocks

@begin::section directives

# Directives

## Entities

@TestCase
      - [input_text]
	```remark
	&65;
	```
      - [output_dom]
	```rson
	@Fragment {
		"text": [
			@Paragraph { "text": [@Codepoint {"n": 65}]},
		]
	}
	```
      - [description]

@TestCase
      - [input_text]
	```remark
	&0x41;
	```
      - [output_dom]
	```rson
	@Fragment {
		"text": [
			@Paragraph { "text": [@Codepoint {"n": 0x41}]},
		]
	}
	```
      - [description]

@TestCase
      - [input_text]
	```remark
	&#64;&#0x41 &#x42&x43
	```
      - [output_dom]
	```rson
	@Fragment { "text": [ @Paragraph { "text": [
		@Codepoint {"n": 0x40}, 
		@Codepoint {"n": 0x41}, 
		" ", 
		@Codepoint {"n": 0x42},  
		@Codepoint {"n": 0x43}, 
	]}, ] }
	```
      - [description]



## Begin-End Directive

- `@begin::name` and optionally, `@end`
- end of file collapses all open blocks
- `@end` collapses current open block
- `@end::name` collapses all blocks until name matches
- Optionally specify an identifier, `@begin::name identifier`
- `@end::name identifier` closes all blocks until name and identifier matches

@TestCase
      - [input_text]
	```remark
	@begin::fragment
	  @begin::blockquote
	@end::fragment
	```
      - [output_dom]
	```rson
	@Fragment {"text": [@Blockquote {}]}
	```
      - [description]

@TestCase
      - [input_text]
	```remark
	@begin::blockquote outer
	    @begin::blockquote
	@end::blockquote outer
	```
      - [output_dom]
	```rson
	@Fragment {"text": [ @Blockquote {"text": [ @Blockquote {"text": []} ]} ]}
	```
      - [description]

@TestCase
      - [input_text]
	```remark
	@begin::fragment
	@begin::blockquote
	```
      - [output_dom]
	```rson
	@Fragment {"text": [@Blockquote {}]}
	```
      - [description]

@end::section directives

@begin::section dom

@end::section dom

